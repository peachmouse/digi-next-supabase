/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@baselime+node-opentelemetry@0.5.8_@trpc+server@10.45.2";
exports.ids = ["vendor-chunks/@baselime+node-opentelemetry@0.5.8_@trpc+server@10.45.2"];
exports.modules = {

/***/ "(instrument)/../../node_modules/.pnpm/@baselime+node-opentelemetry@0.5.8_@trpc+server@10.45.2/node_modules/@baselime/node-opentelemetry/dist/index.cjs":
/*!*************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@baselime+node-opentelemetry@0.5.8_@trpc+server@10.45.2/node_modules/@baselime/node-opentelemetry/dist/index.cjs ***!
  \*************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __esm = (fn, res) => function __init() {\n  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js\nvar _globalThis;\nvar init_globalThis = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js\"() {\n    _globalThis = typeof globalThis === \"object\" ? globalThis : global;\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/platform/node/index.js\nvar init_node = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/platform/node/index.js\"() {\n    init_globalThis();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/platform/index.js\nvar init_platform = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/platform/index.js\"() {\n    init_node();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/version.js\nvar VERSION;\nvar init_version = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/version.js\"() {\n    VERSION = \"1.8.0\";\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/internal/semver.js\nfunction _makeCompatibilityCheck(ownVersion) {\n  var acceptedVersions = /* @__PURE__ */ new Set([ownVersion]);\n  var rejectedVersions = /* @__PURE__ */ new Set();\n  var myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    return function() {\n      return false;\n    };\n  }\n  var ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4]\n  };\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion) {\n      return globalVersion === ownVersion;\n    };\n  }\n  function _reject(v) {\n    rejectedVersions.add(v);\n    return false;\n  }\n  function _accept(v) {\n    acceptedVersions.add(v);\n    return true;\n  }\n  return function isCompatible2(globalVersion) {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n    var globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      return _reject(globalVersion);\n    }\n    var globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4]\n    };\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n    if (ownVersionParsed.major === 0) {\n      if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {\n        return _accept(globalVersion);\n      }\n      return _reject(globalVersion);\n    }\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n    return _reject(globalVersion);\n  };\n}\nvar re, isCompatible;\nvar init_semver = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/internal/semver.js\"() {\n    init_version();\n    re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n    isCompatible = _makeCompatibilityCheck(VERSION);\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\nfunction registerGlobal(type, instance, diag3, allowOverride) {\n  var _a2;\n  if (allowOverride === void 0) {\n    allowOverride = false;\n  }\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a2 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a2 !== void 0 ? _a2 : {\n    version: VERSION\n  };\n  if (!allowOverride && api[type]) {\n    var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n    diag3.error(err.stack || err.message);\n    return false;\n  }\n  if (api.version !== VERSION) {\n    var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + VERSION);\n    diag3.error(err.stack || err.message);\n    return false;\n  }\n  api[type] = instance;\n  diag3.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n  return true;\n}\nfunction getGlobal(type) {\n  var _a2, _b;\n  var globalVersion = (_a2 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a2 === void 0 ? void 0 : _a2.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nfunction unregisterGlobal(type, diag3) {\n  diag3.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n  if (api) {\n    delete api[type];\n  }\n}\nvar major, GLOBAL_OPENTELEMETRY_API_KEY, _global;\nvar init_global_utils = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\"() {\n    init_platform();\n    init_version();\n    init_semver();\n    major = VERSION.split(\".\")[0];\n    GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\n    _global = _globalThis;\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js\nfunction logProxy(funcName, namespace, args) {\n  var logger = getGlobal(\"diag\");\n  if (!logger) {\n    return;\n  }\n  args.unshift(namespace);\n  return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}\nvar __read, __spreadArray, DiagComponentLogger;\nvar init_ComponentLogger = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js\"() {\n    init_global_utils();\n    __read = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    __spreadArray = function(to, from, pack) {\n      if (pack || arguments.length === 2)\n        for (var i = 0, l = from.length, ar; i < l; i++) {\n          if (ar || !(i in from)) {\n            if (!ar)\n              ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n          }\n        }\n      return to.concat(ar || Array.prototype.slice.call(from));\n    };\n    DiagComponentLogger = /** @class */\n    function() {\n      function DiagComponentLogger2(props) {\n        this._namespace = props.namespace || \"DiagComponentLogger\";\n      }\n      DiagComponentLogger2.prototype.debug = function() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return logProxy(\"debug\", this._namespace, args);\n      };\n      DiagComponentLogger2.prototype.error = function() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return logProxy(\"error\", this._namespace, args);\n      };\n      DiagComponentLogger2.prototype.info = function() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return logProxy(\"info\", this._namespace, args);\n      };\n      DiagComponentLogger2.prototype.warn = function() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return logProxy(\"warn\", this._namespace, args);\n      };\n      DiagComponentLogger2.prototype.verbose = function() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        return logProxy(\"verbose\", this._namespace, args);\n      };\n      return DiagComponentLogger2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/diag/types.js\nvar DiagLogLevel;\nvar init_types = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/diag/types.js\"() {\n    (function(DiagLogLevel2) {\n      DiagLogLevel2[DiagLogLevel2[\"NONE\"] = 0] = \"NONE\";\n      DiagLogLevel2[DiagLogLevel2[\"ERROR\"] = 30] = \"ERROR\";\n      DiagLogLevel2[DiagLogLevel2[\"WARN\"] = 50] = \"WARN\";\n      DiagLogLevel2[DiagLogLevel2[\"INFO\"] = 60] = \"INFO\";\n      DiagLogLevel2[DiagLogLevel2[\"DEBUG\"] = 70] = \"DEBUG\";\n      DiagLogLevel2[DiagLogLevel2[\"VERBOSE\"] = 80] = \"VERBOSE\";\n      DiagLogLevel2[DiagLogLevel2[\"ALL\"] = 9999] = \"ALL\";\n    })(DiagLogLevel || (DiagLogLevel = {}));\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js\nfunction createLogLevelDiagLogger(maxLevel, logger) {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n  logger = logger || {};\n  function _filterFunc(funcName, theLevel) {\n    var theFunc = logger[funcName];\n    if (typeof theFunc === \"function\" && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function() {\n    };\n  }\n  return {\n    error: _filterFunc(\"error\", DiagLogLevel.ERROR),\n    warn: _filterFunc(\"warn\", DiagLogLevel.WARN),\n    info: _filterFunc(\"info\", DiagLogLevel.INFO),\n    debug: _filterFunc(\"debug\", DiagLogLevel.DEBUG),\n    verbose: _filterFunc(\"verbose\", DiagLogLevel.VERBOSE)\n  };\n}\nvar init_logLevelLogger = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js\"() {\n    init_types();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/api/diag.js\nvar __read2, __spreadArray2, API_NAME, DiagAPI;\nvar init_diag = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/api/diag.js\"() {\n    init_ComponentLogger();\n    init_logLevelLogger();\n    init_types();\n    init_global_utils();\n    __read2 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    __spreadArray2 = function(to, from, pack) {\n      if (pack || arguments.length === 2)\n        for (var i = 0, l = from.length, ar; i < l; i++) {\n          if (ar || !(i in from)) {\n            if (!ar)\n              ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n          }\n        }\n      return to.concat(ar || Array.prototype.slice.call(from));\n    };\n    API_NAME = \"diag\";\n    DiagAPI = /** @class */\n    function() {\n      function DiagAPI2() {\n        function _logProxy(funcName) {\n          return function() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n            var logger = getGlobal(\"diag\");\n            if (!logger)\n              return;\n            return logger[funcName].apply(logger, __spreadArray2([], __read2(args), false));\n          };\n        }\n        var self2 = this;\n        var setLogger = function(logger, optionsOrLogLevel) {\n          var _a2, _b, _c;\n          if (optionsOrLogLevel === void 0) {\n            optionsOrLogLevel = { logLevel: DiagLogLevel.INFO };\n          }\n          if (logger === self2) {\n            var err = new Error(\"Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation\");\n            self2.error((_a2 = err.stack) !== null && _a2 !== void 0 ? _a2 : err.message);\n            return false;\n          }\n          if (typeof optionsOrLogLevel === \"number\") {\n            optionsOrLogLevel = {\n              logLevel: optionsOrLogLevel\n            };\n          }\n          var oldLogger = getGlobal(\"diag\");\n          var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger);\n          if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n            var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : \"<failed to generate stacktrace>\";\n            oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n            newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n          }\n          return registerGlobal(\"diag\", newLogger, self2, true);\n        };\n        self2.setLogger = setLogger;\n        self2.disable = function() {\n          unregisterGlobal(API_NAME, self2);\n        };\n        self2.createComponentLogger = function(options) {\n          return new DiagComponentLogger(options);\n        };\n        self2.verbose = _logProxy(\"verbose\");\n        self2.debug = _logProxy(\"debug\");\n        self2.info = _logProxy(\"info\");\n        self2.warn = _logProxy(\"warn\");\n        self2.error = _logProxy(\"error\");\n      }\n      DiagAPI2.instance = function() {\n        if (!this._instance) {\n          this._instance = new DiagAPI2();\n        }\n        return this._instance;\n      };\n      return DiagAPI2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js\nvar __read3, __values, BaggageImpl;\nvar init_baggage_impl = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js\"() {\n    __read3 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    __values = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n    BaggageImpl = /** @class */\n    function() {\n      function BaggageImpl2(entries) {\n        this._entries = entries ? new Map(entries) : /* @__PURE__ */ new Map();\n      }\n      BaggageImpl2.prototype.getEntry = function(key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n          return void 0;\n        }\n        return Object.assign({}, entry);\n      };\n      BaggageImpl2.prototype.getAllEntries = function() {\n        return Array.from(this._entries.entries()).map(function(_a2) {\n          var _b = __read3(_a2, 2), k = _b[0], v = _b[1];\n          return [k, v];\n        });\n      };\n      BaggageImpl2.prototype.setEntry = function(key, entry) {\n        var newBaggage = new BaggageImpl2(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n      };\n      BaggageImpl2.prototype.removeEntry = function(key) {\n        var newBaggage = new BaggageImpl2(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n      };\n      BaggageImpl2.prototype.removeEntries = function() {\n        var e_1, _a2;\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl2(this._entries);\n        try {\n          for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n            var key = keys_1_1.value;\n            newBaggage._entries.delete(key);\n          }\n        } catch (e_1_1) {\n          e_1 = { error: e_1_1 };\n        } finally {\n          try {\n            if (keys_1_1 && !keys_1_1.done && (_a2 = keys_1.return))\n              _a2.call(keys_1);\n          } finally {\n            if (e_1)\n              throw e_1.error;\n          }\n        }\n        return newBaggage;\n      };\n      BaggageImpl2.prototype.clear = function() {\n        return new BaggageImpl2();\n      };\n      return BaggageImpl2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js\nvar baggageEntryMetadataSymbol;\nvar init_symbol = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js\"() {\n    baggageEntryMetadataSymbol = Symbol(\"BaggageEntryMetadata\");\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/baggage/utils.js\nfunction createBaggage(entries) {\n  if (entries === void 0) {\n    entries = {};\n  }\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\nfunction baggageEntryMetadataFromString(str) {\n  if (typeof str !== \"string\") {\n    diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n    str = \"\";\n  }\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString: function() {\n      return str;\n    }\n  };\n}\nvar diag;\nvar init_utils = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/baggage/utils.js\"() {\n    init_diag();\n    init_baggage_impl();\n    init_symbol();\n    diag = DiagAPI.instance();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/context/context.js\nfunction createContextKey(description) {\n  return Symbol.for(description);\n}\nvar BaseContext, ROOT_CONTEXT;\nvar init_context = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/context/context.js\"() {\n    BaseContext = /** @class */\n    function() {\n      function BaseContext2(parentContext) {\n        var self2 = this;\n        self2._currentContext = parentContext ? new Map(parentContext) : /* @__PURE__ */ new Map();\n        self2.getValue = function(key) {\n          return self2._currentContext.get(key);\n        };\n        self2.setValue = function(key, value) {\n          var context2 = new BaseContext2(self2._currentContext);\n          context2._currentContext.set(key, value);\n          return context2;\n        };\n        self2.deleteValue = function(key) {\n          var context2 = new BaseContext2(self2._currentContext);\n          context2._currentContext.delete(key);\n          return context2;\n        };\n      }\n      return BaseContext2;\n    }();\n    ROOT_CONTEXT = new BaseContext();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js\nvar consoleMap, DiagConsoleLogger;\nvar init_consoleLogger = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js\"() {\n    consoleMap = [\n      { n: \"error\", c: \"error\" },\n      { n: \"warn\", c: \"warn\" },\n      { n: \"info\", c: \"info\" },\n      { n: \"debug\", c: \"debug\" },\n      { n: \"verbose\", c: \"trace\" }\n    ];\n    DiagConsoleLogger = /** @class */\n    function() {\n      function DiagConsoleLogger2() {\n        function _consoleFunc(funcName) {\n          return function() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              args[_i] = arguments[_i];\n            }\n            if (console) {\n              var theFunc = console[funcName];\n              if (typeof theFunc !== \"function\") {\n                theFunc = console.log;\n              }\n              if (typeof theFunc === \"function\") {\n                return theFunc.apply(console, args);\n              }\n            }\n          };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n          this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n      }\n      return DiagConsoleLogger2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\nfunction createNoopMeter() {\n  return NOOP_METER;\n}\nvar __extends, NoopMeter, NoopMetric, NoopCounterMetric, NoopUpDownCounterMetric, NoopHistogramMetric, NoopObservableMetric, NoopObservableCounterMetric, NoopObservableGaugeMetric, NoopObservableUpDownCounterMetric, NOOP_METER, NOOP_COUNTER_METRIC, NOOP_HISTOGRAM_METRIC, NOOP_UP_DOWN_COUNTER_METRIC, NOOP_OBSERVABLE_COUNTER_METRIC, NOOP_OBSERVABLE_GAUGE_METRIC, NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\nvar init_NoopMeter = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\"() {\n    __extends = function() {\n      var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {\n          d2.__proto__ = b2;\n        } || function(d2, b2) {\n          for (var p in b2)\n            if (Object.prototype.hasOwnProperty.call(b2, p))\n              d2[p] = b2[p];\n        };\n        return extendStatics(d, b);\n      };\n      return function(d, b) {\n        if (typeof b !== \"function\" && b !== null)\n          throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n          this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n    NoopMeter = /** @class */\n    function() {\n      function NoopMeter2() {\n      }\n      NoopMeter2.prototype.createHistogram = function(_name, _options) {\n        return NOOP_HISTOGRAM_METRIC;\n      };\n      NoopMeter2.prototype.createCounter = function(_name, _options) {\n        return NOOP_COUNTER_METRIC;\n      };\n      NoopMeter2.prototype.createUpDownCounter = function(_name, _options) {\n        return NOOP_UP_DOWN_COUNTER_METRIC;\n      };\n      NoopMeter2.prototype.createObservableGauge = function(_name, _options) {\n        return NOOP_OBSERVABLE_GAUGE_METRIC;\n      };\n      NoopMeter2.prototype.createObservableCounter = function(_name, _options) {\n        return NOOP_OBSERVABLE_COUNTER_METRIC;\n      };\n      NoopMeter2.prototype.createObservableUpDownCounter = function(_name, _options) {\n        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n      };\n      NoopMeter2.prototype.addBatchObservableCallback = function(_callback, _observables) {\n      };\n      NoopMeter2.prototype.removeBatchObservableCallback = function(_callback) {\n      };\n      return NoopMeter2;\n    }();\n    NoopMetric = /** @class */\n    function() {\n      function NoopMetric2() {\n      }\n      return NoopMetric2;\n    }();\n    NoopCounterMetric = /** @class */\n    function(_super) {\n      __extends(NoopCounterMetric2, _super);\n      function NoopCounterMetric2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      NoopCounterMetric2.prototype.add = function(_value, _attributes) {\n      };\n      return NoopCounterMetric2;\n    }(NoopMetric);\n    NoopUpDownCounterMetric = /** @class */\n    function(_super) {\n      __extends(NoopUpDownCounterMetric2, _super);\n      function NoopUpDownCounterMetric2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      NoopUpDownCounterMetric2.prototype.add = function(_value, _attributes) {\n      };\n      return NoopUpDownCounterMetric2;\n    }(NoopMetric);\n    NoopHistogramMetric = /** @class */\n    function(_super) {\n      __extends(NoopHistogramMetric2, _super);\n      function NoopHistogramMetric2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      NoopHistogramMetric2.prototype.record = function(_value, _attributes) {\n      };\n      return NoopHistogramMetric2;\n    }(NoopMetric);\n    NoopObservableMetric = /** @class */\n    function() {\n      function NoopObservableMetric2() {\n      }\n      NoopObservableMetric2.prototype.addCallback = function(_callback) {\n      };\n      NoopObservableMetric2.prototype.removeCallback = function(_callback) {\n      };\n      return NoopObservableMetric2;\n    }();\n    NoopObservableCounterMetric = /** @class */\n    function(_super) {\n      __extends(NoopObservableCounterMetric2, _super);\n      function NoopObservableCounterMetric2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      return NoopObservableCounterMetric2;\n    }(NoopObservableMetric);\n    NoopObservableGaugeMetric = /** @class */\n    function(_super) {\n      __extends(NoopObservableGaugeMetric2, _super);\n      function NoopObservableGaugeMetric2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      return NoopObservableGaugeMetric2;\n    }(NoopObservableMetric);\n    NoopObservableUpDownCounterMetric = /** @class */\n    function(_super) {\n      __extends(NoopObservableUpDownCounterMetric2, _super);\n      function NoopObservableUpDownCounterMetric2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      return NoopObservableUpDownCounterMetric2;\n    }(NoopObservableMetric);\n    NOOP_METER = new NoopMeter();\n    NOOP_COUNTER_METRIC = new NoopCounterMetric();\n    NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\n    NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n    NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\n    NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\n    NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/metrics/Metric.js\nvar ValueType;\nvar init_Metric = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/metrics/Metric.js\"() {\n    (function(ValueType2) {\n      ValueType2[ValueType2[\"INT\"] = 0] = \"INT\";\n      ValueType2[ValueType2[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    })(ValueType || (ValueType = {}));\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\nvar defaultTextMapGetter, defaultTextMapSetter;\nvar init_TextMapPropagator = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\"() {\n    defaultTextMapGetter = {\n      get: function(carrier, key) {\n        if (carrier == null) {\n          return void 0;\n        }\n        return carrier[key];\n      },\n      keys: function(carrier) {\n        if (carrier == null) {\n          return [];\n        }\n        return Object.keys(carrier);\n      }\n    };\n    defaultTextMapSetter = {\n      set: function(carrier, key, value) {\n        if (carrier == null) {\n          return;\n        }\n        carrier[key] = value;\n      }\n    };\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js\nvar __read4, __spreadArray3, NoopContextManager;\nvar init_NoopContextManager = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js\"() {\n    init_context();\n    __read4 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    __spreadArray3 = function(to, from, pack) {\n      if (pack || arguments.length === 2)\n        for (var i = 0, l = from.length, ar; i < l; i++) {\n          if (ar || !(i in from)) {\n            if (!ar)\n              ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n          }\n        }\n      return to.concat(ar || Array.prototype.slice.call(from));\n    };\n    NoopContextManager = /** @class */\n    function() {\n      function NoopContextManager2() {\n      }\n      NoopContextManager2.prototype.active = function() {\n        return ROOT_CONTEXT;\n      };\n      NoopContextManager2.prototype.with = function(_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n          args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray3([thisArg], __read4(args), false));\n      };\n      NoopContextManager2.prototype.bind = function(_context, target) {\n        return target;\n      };\n      NoopContextManager2.prototype.enable = function() {\n        return this;\n      };\n      NoopContextManager2.prototype.disable = function() {\n        return this;\n      };\n      return NoopContextManager2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/api/context.js\nvar __read5, __spreadArray4, API_NAME2, NOOP_CONTEXT_MANAGER, ContextAPI;\nvar init_context2 = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/api/context.js\"() {\n    init_NoopContextManager();\n    init_global_utils();\n    init_diag();\n    __read5 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    __spreadArray4 = function(to, from, pack) {\n      if (pack || arguments.length === 2)\n        for (var i = 0, l = from.length, ar; i < l; i++) {\n          if (ar || !(i in from)) {\n            if (!ar)\n              ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n          }\n        }\n      return to.concat(ar || Array.prototype.slice.call(from));\n    };\n    API_NAME2 = \"context\";\n    NOOP_CONTEXT_MANAGER = new NoopContextManager();\n    ContextAPI = /** @class */\n    function() {\n      function ContextAPI2() {\n      }\n      ContextAPI2.getInstance = function() {\n        if (!this._instance) {\n          this._instance = new ContextAPI2();\n        }\n        return this._instance;\n      };\n      ContextAPI2.prototype.setGlobalContextManager = function(contextManager) {\n        return registerGlobal(API_NAME2, contextManager, DiagAPI.instance());\n      };\n      ContextAPI2.prototype.active = function() {\n        return this._getContextManager().active();\n      };\n      ContextAPI2.prototype.with = function(context2, fn, thisArg) {\n        var _a2;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n          args[_i - 3] = arguments[_i];\n        }\n        return (_a2 = this._getContextManager()).with.apply(_a2, __spreadArray4([context2, fn, thisArg], __read5(args), false));\n      };\n      ContextAPI2.prototype.bind = function(context2, target) {\n        return this._getContextManager().bind(context2, target);\n      };\n      ContextAPI2.prototype._getContextManager = function() {\n        return getGlobal(API_NAME2) || NOOP_CONTEXT_MANAGER;\n      };\n      ContextAPI2.prototype.disable = function() {\n        this._getContextManager().disable();\n        unregisterGlobal(API_NAME2, DiagAPI.instance());\n      };\n      return ContextAPI2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\nvar TraceFlags;\nvar init_trace_flags = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\"() {\n    (function(TraceFlags2) {\n      TraceFlags2[TraceFlags2[\"NONE\"] = 0] = \"NONE\";\n      TraceFlags2[TraceFlags2[\"SAMPLED\"] = 1] = \"SAMPLED\";\n    })(TraceFlags || (TraceFlags = {}));\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\nvar INVALID_SPANID, INVALID_TRACEID, INVALID_SPAN_CONTEXT;\nvar init_invalid_span_constants = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\"() {\n    init_trace_flags();\n    INVALID_SPANID = \"0000000000000000\";\n    INVALID_TRACEID = \"00000000000000000000000000000000\";\n    INVALID_SPAN_CONTEXT = {\n      traceId: INVALID_TRACEID,\n      spanId: INVALID_SPANID,\n      traceFlags: TraceFlags.NONE\n    };\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\nvar NonRecordingSpan;\nvar init_NonRecordingSpan = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\"() {\n    init_invalid_span_constants();\n    NonRecordingSpan = /** @class */\n    function() {\n      function NonRecordingSpan2(_spanContext) {\n        if (_spanContext === void 0) {\n          _spanContext = INVALID_SPAN_CONTEXT;\n        }\n        this._spanContext = _spanContext;\n      }\n      NonRecordingSpan2.prototype.spanContext = function() {\n        return this._spanContext;\n      };\n      NonRecordingSpan2.prototype.setAttribute = function(_key, _value) {\n        return this;\n      };\n      NonRecordingSpan2.prototype.setAttributes = function(_attributes) {\n        return this;\n      };\n      NonRecordingSpan2.prototype.addEvent = function(_name, _attributes) {\n        return this;\n      };\n      NonRecordingSpan2.prototype.setStatus = function(_status) {\n        return this;\n      };\n      NonRecordingSpan2.prototype.updateName = function(_name) {\n        return this;\n      };\n      NonRecordingSpan2.prototype.end = function(_endTime) {\n      };\n      NonRecordingSpan2.prototype.isRecording = function() {\n        return false;\n      };\n      NonRecordingSpan2.prototype.recordException = function(_exception, _time) {\n      };\n      return NonRecordingSpan2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\nfunction getSpan(context2) {\n  return context2.getValue(SPAN_KEY) || void 0;\n}\nfunction getActiveSpan() {\n  return getSpan(ContextAPI.getInstance().active());\n}\nfunction setSpan(context2, span) {\n  return context2.setValue(SPAN_KEY, span);\n}\nfunction deleteSpan(context2) {\n  return context2.deleteValue(SPAN_KEY);\n}\nfunction setSpanContext(context2, spanContext) {\n  return setSpan(context2, new NonRecordingSpan(spanContext));\n}\nfunction getSpanContext(context2) {\n  var _a2;\n  return (_a2 = getSpan(context2)) === null || _a2 === void 0 ? void 0 : _a2.spanContext();\n}\nvar SPAN_KEY;\nvar init_context_utils = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\"() {\n    init_context();\n    init_NonRecordingSpan();\n    init_context2();\n    SPAN_KEY = createContextKey(\"OpenTelemetry Context Key SPAN\");\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\nfunction isValidTraceId(traceId) {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\nfunction isValidSpanId(spanId) {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\nfunction isSpanContextValid(spanContext) {\n  return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);\n}\nfunction wrapSpanContext(spanContext) {\n  return new NonRecordingSpan(spanContext);\n}\nvar VALID_TRACEID_REGEX, VALID_SPANID_REGEX;\nvar init_spancontext_utils = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\"() {\n    init_invalid_span_constants();\n    init_NonRecordingSpan();\n    VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\n    VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\nfunction isSpanContext(spanContext) {\n  return typeof spanContext === \"object\" && typeof spanContext[\"spanId\"] === \"string\" && typeof spanContext[\"traceId\"] === \"string\" && typeof spanContext[\"traceFlags\"] === \"number\";\n}\nvar contextApi, NoopTracer;\nvar init_NoopTracer = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\"() {\n    init_context2();\n    init_context_utils();\n    init_NonRecordingSpan();\n    init_spancontext_utils();\n    contextApi = ContextAPI.getInstance();\n    NoopTracer = /** @class */\n    function() {\n      function NoopTracer2() {\n      }\n      NoopTracer2.prototype.startSpan = function(name, options, context2) {\n        if (context2 === void 0) {\n          context2 = contextApi.active();\n        }\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n          return new NonRecordingSpan();\n        }\n        var parentFromContext = context2 && getSpanContext(context2);\n        if (isSpanContext(parentFromContext) && isSpanContextValid(parentFromContext)) {\n          return new NonRecordingSpan(parentFromContext);\n        } else {\n          return new NonRecordingSpan();\n        }\n      };\n      NoopTracer2.prototype.startActiveSpan = function(name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n          return;\n        } else if (arguments.length === 2) {\n          fn = arg2;\n        } else if (arguments.length === 3) {\n          opts = arg2;\n          fn = arg3;\n        } else {\n          opts = arg2;\n          ctx = arg3;\n          fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = setSpan(parentContext, span);\n        return contextApi.with(contextWithSpanSet, fn, void 0, span);\n      };\n      return NoopTracer2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\nvar NOOP_TRACER, ProxyTracer;\nvar init_ProxyTracer = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\"() {\n    init_NoopTracer();\n    NOOP_TRACER = new NoopTracer();\n    ProxyTracer = /** @class */\n    function() {\n      function ProxyTracer2(_provider, name, version, options) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n        this.options = options;\n      }\n      ProxyTracer2.prototype.startSpan = function(name, options, context2) {\n        return this._getTracer().startSpan(name, options, context2);\n      };\n      ProxyTracer2.prototype.startActiveSpan = function(_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n      };\n      ProxyTracer2.prototype._getTracer = function() {\n        if (this._delegate) {\n          return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n        if (!tracer) {\n          return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n      };\n      return ProxyTracer2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js\nvar NoopTracerProvider;\nvar init_NoopTracerProvider = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js\"() {\n    init_NoopTracer();\n    NoopTracerProvider = /** @class */\n    function() {\n      function NoopTracerProvider2() {\n      }\n      NoopTracerProvider2.prototype.getTracer = function(_name, _version, _options) {\n        return new NoopTracer();\n      };\n      return NoopTracerProvider2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\nvar NOOP_TRACER_PROVIDER, ProxyTracerProvider;\nvar init_ProxyTracerProvider = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\"() {\n    init_ProxyTracer();\n    init_NoopTracerProvider();\n    NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n    ProxyTracerProvider = /** @class */\n    function() {\n      function ProxyTracerProvider2() {\n      }\n      ProxyTracerProvider2.prototype.getTracer = function(name, version, options) {\n        var _a2;\n        return (_a2 = this.getDelegateTracer(name, version, options)) !== null && _a2 !== void 0 ? _a2 : new ProxyTracer(this, name, version, options);\n      };\n      ProxyTracerProvider2.prototype.getDelegate = function() {\n        var _a2;\n        return (_a2 = this._delegate) !== null && _a2 !== void 0 ? _a2 : NOOP_TRACER_PROVIDER;\n      };\n      ProxyTracerProvider2.prototype.setDelegate = function(delegate) {\n        this._delegate = delegate;\n      };\n      ProxyTracerProvider2.prototype.getDelegateTracer = function(name, version, options) {\n        var _a2;\n        return (_a2 = this._delegate) === null || _a2 === void 0 ? void 0 : _a2.getTracer(name, version, options);\n      };\n      return ProxyTracerProvider2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\nvar SamplingDecision;\nvar init_SamplingResult = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\"() {\n    (function(SamplingDecision3) {\n      SamplingDecision3[SamplingDecision3[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n      SamplingDecision3[SamplingDecision3[\"RECORD\"] = 1] = \"RECORD\";\n      SamplingDecision3[SamplingDecision3[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n    })(SamplingDecision || (SamplingDecision = {}));\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\nvar SpanKind;\nvar init_span_kind = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\"() {\n    (function(SpanKind2) {\n      SpanKind2[SpanKind2[\"INTERNAL\"] = 0] = \"INTERNAL\";\n      SpanKind2[SpanKind2[\"SERVER\"] = 1] = \"SERVER\";\n      SpanKind2[SpanKind2[\"CLIENT\"] = 2] = \"CLIENT\";\n      SpanKind2[SpanKind2[\"PRODUCER\"] = 3] = \"PRODUCER\";\n      SpanKind2[SpanKind2[\"CONSUMER\"] = 4] = \"CONSUMER\";\n    })(SpanKind || (SpanKind = {}));\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/status.js\nvar SpanStatusCode;\nvar init_status = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/status.js\"() {\n    (function(SpanStatusCode2) {\n      SpanStatusCode2[SpanStatusCode2[\"UNSET\"] = 0] = \"UNSET\";\n      SpanStatusCode2[SpanStatusCode2[\"OK\"] = 1] = \"OK\";\n      SpanStatusCode2[SpanStatusCode2[\"ERROR\"] = 2] = \"ERROR\";\n    })(SpanStatusCode || (SpanStatusCode = {}));\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js\nfunction validateKey(key) {\n  return VALID_KEY_REGEX.test(key);\n}\nfunction validateValue(value) {\n  return VALID_VALUE_BASE_REGEX.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);\n}\nvar VALID_KEY_CHAR_RANGE, VALID_KEY, VALID_VENDOR_KEY, VALID_KEY_REGEX, VALID_VALUE_BASE_REGEX, INVALID_VALUE_COMMA_EQUAL_REGEX;\nvar init_tracestate_validators = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js\"() {\n    VALID_KEY_CHAR_RANGE = \"[_0-9a-z-*/]\";\n    VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\n    VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\n    VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\n    VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\n    INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js\nvar MAX_TRACE_STATE_ITEMS, MAX_TRACE_STATE_LEN, LIST_MEMBERS_SEPARATOR, LIST_MEMBER_KEY_VALUE_SPLITTER, TraceStateImpl;\nvar init_tracestate_impl = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js\"() {\n    init_tracestate_validators();\n    MAX_TRACE_STATE_ITEMS = 32;\n    MAX_TRACE_STATE_LEN = 512;\n    LIST_MEMBERS_SEPARATOR = \",\";\n    LIST_MEMBER_KEY_VALUE_SPLITTER = \"=\";\n    TraceStateImpl = /** @class */\n    function() {\n      function TraceStateImpl2(rawTraceState) {\n        this._internalState = /* @__PURE__ */ new Map();\n        if (rawTraceState)\n          this._parse(rawTraceState);\n      }\n      TraceStateImpl2.prototype.set = function(key, value) {\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n          traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n      };\n      TraceStateImpl2.prototype.unset = function(key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n      };\n      TraceStateImpl2.prototype.get = function(key) {\n        return this._internalState.get(key);\n      };\n      TraceStateImpl2.prototype.serialize = function() {\n        var _this = this;\n        return this._keys().reduce(function(agg, key) {\n          agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n          return agg;\n        }, []).join(LIST_MEMBERS_SEPARATOR);\n      };\n      TraceStateImpl2.prototype._parse = function(rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n          return;\n        this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse().reduce(function(agg, part) {\n          var listMember = part.trim();\n          var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n          if (i !== -1) {\n            var key = listMember.slice(0, i);\n            var value = listMember.slice(i + 1, part.length);\n            if (validateKey(key) && validateValue(value)) {\n              agg.set(key, value);\n            } else {\n            }\n          }\n          return agg;\n        }, /* @__PURE__ */ new Map());\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n          this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n      };\n      TraceStateImpl2.prototype._keys = function() {\n        return Array.from(this._internalState.keys()).reverse();\n      };\n      TraceStateImpl2.prototype._clone = function() {\n        var traceState = new TraceStateImpl2();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n      };\n      return TraceStateImpl2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js\nfunction createTraceState(rawTraceState) {\n  return new TraceStateImpl(rawTraceState);\n}\nvar init_utils2 = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js\"() {\n    init_tracestate_impl();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/context-api.js\nvar context;\nvar init_context_api = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/context-api.js\"() {\n    init_context2();\n    context = ContextAPI.getInstance();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/diag-api.js\nvar diag2;\nvar init_diag_api = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/diag-api.js\"() {\n    init_diag();\n    diag2 = DiagAPI.instance();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js\nvar NoopMeterProvider, NOOP_METER_PROVIDER;\nvar init_NoopMeterProvider = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js\"() {\n    init_NoopMeter();\n    NoopMeterProvider = /** @class */\n    function() {\n      function NoopMeterProvider2() {\n      }\n      NoopMeterProvider2.prototype.getMeter = function(_name, _version, _options) {\n        return NOOP_METER;\n      };\n      return NoopMeterProvider2;\n    }();\n    NOOP_METER_PROVIDER = new NoopMeterProvider();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/api/metrics.js\nvar API_NAME3, MetricsAPI;\nvar init_metrics = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/api/metrics.js\"() {\n    init_NoopMeterProvider();\n    init_global_utils();\n    init_diag();\n    API_NAME3 = \"metrics\";\n    MetricsAPI = /** @class */\n    function() {\n      function MetricsAPI2() {\n      }\n      MetricsAPI2.getInstance = function() {\n        if (!this._instance) {\n          this._instance = new MetricsAPI2();\n        }\n        return this._instance;\n      };\n      MetricsAPI2.prototype.setGlobalMeterProvider = function(provider) {\n        return registerGlobal(API_NAME3, provider, DiagAPI.instance());\n      };\n      MetricsAPI2.prototype.getMeterProvider = function() {\n        return getGlobal(API_NAME3) || NOOP_METER_PROVIDER;\n      };\n      MetricsAPI2.prototype.getMeter = function(name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n      };\n      MetricsAPI2.prototype.disable = function() {\n        unregisterGlobal(API_NAME3, DiagAPI.instance());\n      };\n      return MetricsAPI2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/metrics-api.js\nvar metrics;\nvar init_metrics_api = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/metrics-api.js\"() {\n    init_metrics();\n    metrics = MetricsAPI.getInstance();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js\nvar NoopTextMapPropagator;\nvar init_NoopTextMapPropagator = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js\"() {\n    NoopTextMapPropagator = /** @class */\n    function() {\n      function NoopTextMapPropagator2() {\n      }\n      NoopTextMapPropagator2.prototype.inject = function(_context, _carrier) {\n      };\n      NoopTextMapPropagator2.prototype.extract = function(context2, _carrier) {\n        return context2;\n      };\n      NoopTextMapPropagator2.prototype.fields = function() {\n        return [];\n      };\n      return NoopTextMapPropagator2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js\nfunction getBaggage(context2) {\n  return context2.getValue(BAGGAGE_KEY) || void 0;\n}\nfunction getActiveBaggage() {\n  return getBaggage(ContextAPI.getInstance().active());\n}\nfunction setBaggage(context2, baggage) {\n  return context2.setValue(BAGGAGE_KEY, baggage);\n}\nfunction deleteBaggage(context2) {\n  return context2.deleteValue(BAGGAGE_KEY);\n}\nvar BAGGAGE_KEY;\nvar init_context_helpers = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js\"() {\n    init_context2();\n    init_context();\n    BAGGAGE_KEY = createContextKey(\"OpenTelemetry Baggage Key\");\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/api/propagation.js\nvar API_NAME4, NOOP_TEXT_MAP_PROPAGATOR, PropagationAPI;\nvar init_propagation = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/api/propagation.js\"() {\n    init_global_utils();\n    init_NoopTextMapPropagator();\n    init_TextMapPropagator();\n    init_context_helpers();\n    init_utils();\n    init_diag();\n    API_NAME4 = \"propagation\";\n    NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n    PropagationAPI = /** @class */\n    function() {\n      function PropagationAPI2() {\n        this.createBaggage = createBaggage;\n        this.getBaggage = getBaggage;\n        this.getActiveBaggage = getActiveBaggage;\n        this.setBaggage = setBaggage;\n        this.deleteBaggage = deleteBaggage;\n      }\n      PropagationAPI2.getInstance = function() {\n        if (!this._instance) {\n          this._instance = new PropagationAPI2();\n        }\n        return this._instance;\n      };\n      PropagationAPI2.prototype.setGlobalPropagator = function(propagator) {\n        return registerGlobal(API_NAME4, propagator, DiagAPI.instance());\n      };\n      PropagationAPI2.prototype.inject = function(context2, carrier, setter) {\n        if (setter === void 0) {\n          setter = defaultTextMapSetter;\n        }\n        return this._getGlobalPropagator().inject(context2, carrier, setter);\n      };\n      PropagationAPI2.prototype.extract = function(context2, carrier, getter) {\n        if (getter === void 0) {\n          getter = defaultTextMapGetter;\n        }\n        return this._getGlobalPropagator().extract(context2, carrier, getter);\n      };\n      PropagationAPI2.prototype.fields = function() {\n        return this._getGlobalPropagator().fields();\n      };\n      PropagationAPI2.prototype.disable = function() {\n        unregisterGlobal(API_NAME4, DiagAPI.instance());\n      };\n      PropagationAPI2.prototype._getGlobalPropagator = function() {\n        return getGlobal(API_NAME4) || NOOP_TEXT_MAP_PROPAGATOR;\n      };\n      return PropagationAPI2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/propagation-api.js\nvar propagation;\nvar init_propagation_api = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/propagation-api.js\"() {\n    init_propagation();\n    propagation = PropagationAPI.getInstance();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/api/trace.js\nvar API_NAME5, TraceAPI;\nvar init_trace = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/api/trace.js\"() {\n    init_global_utils();\n    init_ProxyTracerProvider();\n    init_spancontext_utils();\n    init_context_utils();\n    init_diag();\n    API_NAME5 = \"trace\";\n    TraceAPI = /** @class */\n    function() {\n      function TraceAPI2() {\n        this._proxyTracerProvider = new ProxyTracerProvider();\n        this.wrapSpanContext = wrapSpanContext;\n        this.isSpanContextValid = isSpanContextValid;\n        this.deleteSpan = deleteSpan;\n        this.getSpan = getSpan;\n        this.getActiveSpan = getActiveSpan;\n        this.getSpanContext = getSpanContext;\n        this.setSpan = setSpan;\n        this.setSpanContext = setSpanContext;\n      }\n      TraceAPI2.getInstance = function() {\n        if (!this._instance) {\n          this._instance = new TraceAPI2();\n        }\n        return this._instance;\n      };\n      TraceAPI2.prototype.setGlobalTracerProvider = function(provider) {\n        var success = registerGlobal(API_NAME5, this._proxyTracerProvider, DiagAPI.instance());\n        if (success) {\n          this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n      };\n      TraceAPI2.prototype.getTracerProvider = function() {\n        return getGlobal(API_NAME5) || this._proxyTracerProvider;\n      };\n      TraceAPI2.prototype.getTracer = function(name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n      };\n      TraceAPI2.prototype.disable = function() {\n        unregisterGlobal(API_NAME5, DiagAPI.instance());\n        this._proxyTracerProvider = new ProxyTracerProvider();\n      };\n      return TraceAPI2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/trace-api.js\nvar trace;\nvar init_trace_api = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/trace-api.js\"() {\n    init_trace();\n    trace = TraceAPI.getInstance();\n  }\n});\n\n// node_modules/@opentelemetry/api/build/esm/index.js\nvar esm_exports = {};\n__export(esm_exports, {\n  DiagConsoleLogger: () => DiagConsoleLogger,\n  DiagLogLevel: () => DiagLogLevel,\n  INVALID_SPANID: () => INVALID_SPANID,\n  INVALID_SPAN_CONTEXT: () => INVALID_SPAN_CONTEXT,\n  INVALID_TRACEID: () => INVALID_TRACEID,\n  ProxyTracer: () => ProxyTracer,\n  ProxyTracerProvider: () => ProxyTracerProvider,\n  ROOT_CONTEXT: () => ROOT_CONTEXT,\n  SamplingDecision: () => SamplingDecision,\n  SpanKind: () => SpanKind,\n  SpanStatusCode: () => SpanStatusCode,\n  TraceFlags: () => TraceFlags,\n  ValueType: () => ValueType,\n  baggageEntryMetadataFromString: () => baggageEntryMetadataFromString,\n  context: () => context,\n  createContextKey: () => createContextKey,\n  createNoopMeter: () => createNoopMeter,\n  createTraceState: () => createTraceState,\n  default: () => esm_default,\n  defaultTextMapGetter: () => defaultTextMapGetter,\n  defaultTextMapSetter: () => defaultTextMapSetter,\n  diag: () => diag2,\n  isSpanContextValid: () => isSpanContextValid,\n  isValidSpanId: () => isValidSpanId,\n  isValidTraceId: () => isValidTraceId,\n  metrics: () => metrics,\n  propagation: () => propagation,\n  trace: () => trace\n});\nvar esm_default;\nvar init_esm = __esm({\n  \"node_modules/@opentelemetry/api/build/esm/index.js\"() {\n    init_utils();\n    init_context();\n    init_consoleLogger();\n    init_types();\n    init_NoopMeter();\n    init_Metric();\n    init_TextMapPropagator();\n    init_ProxyTracer();\n    init_ProxyTracerProvider();\n    init_SamplingResult();\n    init_span_kind();\n    init_status();\n    init_trace_flags();\n    init_utils2();\n    init_spancontext_utils();\n    init_invalid_span_constants();\n    init_context_api();\n    init_diag_api();\n    init_metrics_api();\n    init_propagation_api();\n    init_trace_api();\n    esm_default = {\n      context,\n      diag: diag2,\n      metrics,\n      propagation,\n      trace\n    };\n  }\n});\n\n// node_modules/@opentelemetry/context-async-hooks/build/src/AbstractAsyncHooksContextManager.js\nvar require_AbstractAsyncHooksContextManager = __commonJS({\n  \"node_modules/@opentelemetry/context-async-hooks/build/src/AbstractAsyncHooksContextManager.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.AbstractAsyncHooksContextManager = void 0;\n    var events_1 = __webpack_require__(/*! events */ \"events\");\n    var ADD_LISTENER_METHODS = [\n      \"addListener\",\n      \"on\",\n      \"once\",\n      \"prependListener\",\n      \"prependOnceListener\"\n    ];\n    var AbstractAsyncHooksContextManager = class {\n      constructor() {\n        this._kOtListeners = Symbol(\"OtListeners\");\n        this._wrapped = false;\n      }\n      /**\n       * Binds a the certain context or the active one to the target function and then returns the target\n       * @param context A context (span) to be bind to target\n       * @param target a function or event emitter. When target or one of its callbacks is called,\n       *  the provided context will be used as the active context for the duration of the call.\n       */\n      bind(context2, target) {\n        if (target instanceof events_1.EventEmitter) {\n          return this._bindEventEmitter(context2, target);\n        }\n        if (typeof target === \"function\") {\n          return this._bindFunction(context2, target);\n        }\n        return target;\n      }\n      _bindFunction(context2, target) {\n        const manager = this;\n        const contextWrapper = function(...args) {\n          return manager.with(context2, () => target.apply(this, args));\n        };\n        Object.defineProperty(contextWrapper, \"length\", {\n          enumerable: false,\n          configurable: true,\n          writable: false,\n          value: target.length\n        });\n        return contextWrapper;\n      }\n      /**\n       * By default, EventEmitter call their callback with their context, which we do\n       * not want, instead we will bind a specific context to all callbacks that\n       * go through it.\n       * @param context the context we want to bind\n       * @param ee EventEmitter an instance of EventEmitter to patch\n       */\n      _bindEventEmitter(context2, ee) {\n        const map = this._getPatchMap(ee);\n        if (map !== void 0)\n          return ee;\n        this._createPatchMap(ee);\n        ADD_LISTENER_METHODS.forEach((methodName) => {\n          if (ee[methodName] === void 0)\n            return;\n          ee[methodName] = this._patchAddListener(ee, ee[methodName], context2);\n        });\n        if (typeof ee.removeListener === \"function\") {\n          ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n        }\n        if (typeof ee.off === \"function\") {\n          ee.off = this._patchRemoveListener(ee, ee.off);\n        }\n        if (typeof ee.removeAllListeners === \"function\") {\n          ee.removeAllListeners = this._patchRemoveAllListeners(ee, ee.removeAllListeners);\n        }\n        return ee;\n      }\n      /**\n       * Patch methods that remove a given listener so that we match the \"patched\"\n       * version of that listener (the one that propagate context).\n       * @param ee EventEmitter instance\n       * @param original reference to the patched method\n       */\n      _patchRemoveListener(ee, original) {\n        const contextManager = this;\n        return function(event, listener) {\n          var _a2;\n          const events = (_a2 = contextManager._getPatchMap(ee)) === null || _a2 === void 0 ? void 0 : _a2[event];\n          if (events === void 0) {\n            return original.call(this, event, listener);\n          }\n          const patchedListener = events.get(listener);\n          return original.call(this, event, patchedListener || listener);\n        };\n      }\n      /**\n       * Patch methods that remove all listeners so we remove our\n       * internal references for a given event.\n       * @param ee EventEmitter instance\n       * @param original reference to the patched method\n       */\n      _patchRemoveAllListeners(ee, original) {\n        const contextManager = this;\n        return function(event) {\n          const map = contextManager._getPatchMap(ee);\n          if (map !== void 0) {\n            if (arguments.length === 0) {\n              contextManager._createPatchMap(ee);\n            } else if (map[event] !== void 0) {\n              delete map[event];\n            }\n          }\n          return original.apply(this, arguments);\n        };\n      }\n      /**\n       * Patch methods on an event emitter instance that can add listeners so we\n       * can force them to propagate a given context.\n       * @param ee EventEmitter instance\n       * @param original reference to the patched method\n       * @param [context] context to propagate when calling listeners\n       */\n      _patchAddListener(ee, original, context2) {\n        const contextManager = this;\n        return function(event, listener) {\n          if (contextManager._wrapped) {\n            return original.call(this, event, listener);\n          }\n          let map = contextManager._getPatchMap(ee);\n          if (map === void 0) {\n            map = contextManager._createPatchMap(ee);\n          }\n          let listeners = map[event];\n          if (listeners === void 0) {\n            listeners = /* @__PURE__ */ new WeakMap();\n            map[event] = listeners;\n          }\n          const patchedListener = contextManager.bind(context2, listener);\n          listeners.set(listener, patchedListener);\n          contextManager._wrapped = true;\n          try {\n            return original.call(this, event, patchedListener);\n          } finally {\n            contextManager._wrapped = false;\n          }\n        };\n      }\n      _createPatchMap(ee) {\n        const map = /* @__PURE__ */ Object.create(null);\n        ee[this._kOtListeners] = map;\n        return map;\n      }\n      _getPatchMap(ee) {\n        return ee[this._kOtListeners];\n      }\n    };\n    exports.AbstractAsyncHooksContextManager = AbstractAsyncHooksContextManager;\n  }\n});\n\n// node_modules/@opentelemetry/context-async-hooks/build/src/AsyncHooksContextManager.js\nvar require_AsyncHooksContextManager = __commonJS({\n  \"node_modules/@opentelemetry/context-async-hooks/build/src/AsyncHooksContextManager.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.AsyncHooksContextManager = void 0;\n    var api_1 = (init_esm(), __toCommonJS(esm_exports));\n    var asyncHooks = __webpack_require__(/*! async_hooks */ \"async_hooks\");\n    var AbstractAsyncHooksContextManager_1 = require_AbstractAsyncHooksContextManager();\n    var AsyncHooksContextManager = class extends AbstractAsyncHooksContextManager_1.AbstractAsyncHooksContextManager {\n      constructor() {\n        super();\n        this._contexts = /* @__PURE__ */ new Map();\n        this._stack = [];\n        this._asyncHook = asyncHooks.createHook({\n          init: this._init.bind(this),\n          before: this._before.bind(this),\n          after: this._after.bind(this),\n          destroy: this._destroy.bind(this),\n          promiseResolve: this._destroy.bind(this)\n        });\n      }\n      active() {\n        var _a2;\n        return (_a2 = this._stack[this._stack.length - 1]) !== null && _a2 !== void 0 ? _a2 : api_1.ROOT_CONTEXT;\n      }\n      with(context2, fn, thisArg, ...args) {\n        this._enterContext(context2);\n        try {\n          return fn.call(thisArg, ...args);\n        } finally {\n          this._exitContext();\n        }\n      }\n      enable() {\n        this._asyncHook.enable();\n        return this;\n      }\n      disable() {\n        this._asyncHook.disable();\n        this._contexts.clear();\n        this._stack = [];\n        return this;\n      }\n      /**\n       * Init hook will be called when userland create a async context, setting the\n       * context as the current one if it exist.\n       * @param uid id of the async context\n       * @param type the resource type\n       */\n      _init(uid, type) {\n        if (type === \"TIMERWRAP\")\n          return;\n        const context2 = this._stack[this._stack.length - 1];\n        if (context2 !== void 0) {\n          this._contexts.set(uid, context2);\n        }\n      }\n      /**\n       * Destroy hook will be called when a given context is no longer used so we can\n       * remove its attached context.\n       * @param uid uid of the async context\n       */\n      _destroy(uid) {\n        this._contexts.delete(uid);\n      }\n      /**\n       * Before hook is called just before executing a async context.\n       * @param uid uid of the async context\n       */\n      _before(uid) {\n        const context2 = this._contexts.get(uid);\n        if (context2 !== void 0) {\n          this._enterContext(context2);\n        }\n      }\n      /**\n       * After hook is called just after completing the execution of a async context.\n       */\n      _after() {\n        this._exitContext();\n      }\n      /**\n       * Set the given context as active\n       */\n      _enterContext(context2) {\n        this._stack.push(context2);\n      }\n      /**\n       * Remove the context at the root of the stack\n       */\n      _exitContext() {\n        this._stack.pop();\n      }\n    };\n    exports.AsyncHooksContextManager = AsyncHooksContextManager;\n  }\n});\n\n// node_modules/@opentelemetry/context-async-hooks/build/src/AsyncLocalStorageContextManager.js\nvar require_AsyncLocalStorageContextManager = __commonJS({\n  \"node_modules/@opentelemetry/context-async-hooks/build/src/AsyncLocalStorageContextManager.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.AsyncLocalStorageContextManager = void 0;\n    var api_1 = (init_esm(), __toCommonJS(esm_exports));\n    var async_hooks_1 = __webpack_require__(/*! async_hooks */ \"async_hooks\");\n    var AbstractAsyncHooksContextManager_1 = require_AbstractAsyncHooksContextManager();\n    var AsyncLocalStorageContextManager = class extends AbstractAsyncHooksContextManager_1.AbstractAsyncHooksContextManager {\n      constructor() {\n        super();\n        this._asyncLocalStorage = new async_hooks_1.AsyncLocalStorage();\n      }\n      active() {\n        var _a2;\n        return (_a2 = this._asyncLocalStorage.getStore()) !== null && _a2 !== void 0 ? _a2 : api_1.ROOT_CONTEXT;\n      }\n      with(context2, fn, thisArg, ...args) {\n        const cb = thisArg == null ? fn : fn.bind(thisArg);\n        return this._asyncLocalStorage.run(context2, cb, ...args);\n      }\n      enable() {\n        return this;\n      }\n      disable() {\n        this._asyncLocalStorage.disable();\n        return this;\n      }\n    };\n    exports.AsyncLocalStorageContextManager = AsyncLocalStorageContextManager;\n  }\n});\n\n// node_modules/@opentelemetry/context-async-hooks/build/src/index.js\nvar require_src = __commonJS({\n  \"node_modules/@opentelemetry/context-async-hooks/build/src/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      Object.defineProperty(o, k2, { enumerable: true, get: function() {\n        return m[k];\n      } });\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_AsyncHooksContextManager(), exports);\n    __exportStar(require_AsyncLocalStorageContextManager(), exports);\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\nfunction suppressTracing(context2) {\n  return context2.setValue(SUPPRESS_TRACING_KEY, true);\n}\nfunction unsuppressTracing(context2) {\n  return context2.deleteValue(SUPPRESS_TRACING_KEY);\n}\nfunction isTracingSuppressed(context2) {\n  return context2.getValue(SUPPRESS_TRACING_KEY) === true;\n}\nvar SUPPRESS_TRACING_KEY;\nvar init_suppress_tracing = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\"() {\n    init_esm();\n    SUPPRESS_TRACING_KEY = createContextKey(\"OpenTelemetry SDK Context Key SUPPRESS_TRACING\");\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/baggage/constants.js\nvar BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_HEADER, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS, BAGGAGE_MAX_TOTAL_LENGTH;\nvar init_constants = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/baggage/constants.js\"() {\n    BAGGAGE_KEY_PAIR_SEPARATOR = \"=\";\n    BAGGAGE_PROPERTIES_SEPARATOR = \";\";\n    BAGGAGE_ITEMS_SEPARATOR = \",\";\n    BAGGAGE_HEADER = \"baggage\";\n    BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n    BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n    BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/baggage/utils.js\nvar utils_exports = {};\n__export(utils_exports, {\n  getKeyPairs: () => getKeyPairs,\n  parseKeyPairsIntoRecord: () => parseKeyPairsIntoRecord,\n  parsePairKeyValue: () => parsePairKeyValue,\n  serializeKeyPairs: () => serializeKeyPairs\n});\nfunction serializeKeyPairs(keyPairs) {\n  return keyPairs.reduce(function(hValue, current) {\n    var value = \"\" + hValue + (hValue !== \"\" ? BAGGAGE_ITEMS_SEPARATOR : \"\") + current;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, \"\");\n}\nfunction getKeyPairs(baggage) {\n  return baggage.getAllEntries().map(function(_a2) {\n    var _b = __read6(_a2, 2), key = _b[0], value = _b[1];\n    var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n    if (value.metadata !== void 0) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n    return entry;\n  });\n}\nfunction parsePairKeyValue(entry) {\n  var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0)\n    return;\n  var keyPairPart = valueProps.shift();\n  if (!keyPairPart)\n    return;\n  var separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0)\n    return;\n  var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n  var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n  var metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n  }\n  return { key, value, metadata };\n}\nfunction parseKeyPairsIntoRecord(value) {\n  if (typeof value !== \"string\" || value.length === 0)\n    return {};\n  return value.split(BAGGAGE_ITEMS_SEPARATOR).map(function(entry) {\n    return parsePairKeyValue(entry);\n  }).filter(function(keyPair) {\n    return keyPair !== void 0 && keyPair.value.length > 0;\n  }).reduce(function(headers, keyPair) {\n    headers[keyPair.key] = keyPair.value;\n    return headers;\n  }, {});\n}\nvar __read6;\nvar init_utils3 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/baggage/utils.js\"() {\n    init_esm();\n    init_constants();\n    __read6 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js\nvar W3CBaggagePropagator;\nvar init_W3CBaggagePropagator = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js\"() {\n    init_esm();\n    init_suppress_tracing();\n    init_constants();\n    init_utils3();\n    W3CBaggagePropagator = /** @class */\n    function() {\n      function W3CBaggagePropagator2() {\n      }\n      W3CBaggagePropagator2.prototype.inject = function(context2, carrier, setter) {\n        var baggage = propagation.getBaggage(context2);\n        if (!baggage || isTracingSuppressed(context2))\n          return;\n        var keyPairs = getKeyPairs(baggage).filter(function(pair) {\n          return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        }).slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n          setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n      };\n      W3CBaggagePropagator2.prototype.extract = function(context2, carrier, getter) {\n        var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        var baggageString = Array.isArray(headerValue) ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR) : headerValue;\n        if (!baggageString)\n          return context2;\n        var baggage = {};\n        if (baggageString.length === 0) {\n          return context2;\n        }\n        var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function(entry) {\n          var keyPair = parsePairKeyValue(entry);\n          if (keyPair) {\n            var baggageEntry = { value: keyPair.value };\n            if (keyPair.metadata) {\n              baggageEntry.metadata = keyPair.metadata;\n            }\n            baggage[keyPair.key] = baggageEntry;\n          }\n        });\n        if (Object.entries(baggage).length === 0) {\n          return context2;\n        }\n        return propagation.setBaggage(context2, propagation.createBaggage(baggage));\n      };\n      W3CBaggagePropagator2.prototype.fields = function() {\n        return [BAGGAGE_HEADER];\n      };\n      return W3CBaggagePropagator2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js\nvar AnchoredClock;\nvar init_anchored_clock = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js\"() {\n    AnchoredClock = /** @class */\n    function() {\n      function AnchoredClock2(systemClock, monotonicClock) {\n        this._monotonicClock = monotonicClock;\n        this._epochMillis = systemClock.now();\n        this._performanceMillis = monotonicClock.now();\n      }\n      AnchoredClock2.prototype.now = function() {\n        var delta = this._monotonicClock.now() - this._performanceMillis;\n        return this._epochMillis + delta;\n      };\n      return AnchoredClock2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/common/attributes.js\nfunction sanitizeAttributes(attributes) {\n  var e_1, _a2;\n  var out = {};\n  if (typeof attributes !== \"object\" || attributes == null) {\n    return out;\n  }\n  try {\n    for (var _b = __values2(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var _d = __read7(_c.value, 2), key = _d[0], val = _d[1];\n      if (!isAttributeKey(key)) {\n        diag2.warn(\"Invalid attribute key: \" + key);\n        continue;\n      }\n      if (!isAttributeValue(val)) {\n        diag2.warn(\"Invalid attribute value set for key: \" + key);\n        continue;\n      }\n      if (Array.isArray(val)) {\n        out[key] = val.slice();\n      } else {\n        out[key] = val;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = { error: e_1_1 };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a2 = _b.return))\n        _a2.call(_b);\n    } finally {\n      if (e_1)\n        throw e_1.error;\n    }\n  }\n  return out;\n}\nfunction isAttributeKey(key) {\n  return typeof key === \"string\" && key.length > 0;\n}\nfunction isAttributeValue(val) {\n  if (val == null) {\n    return true;\n  }\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n  return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n  var e_2, _a2;\n  var type;\n  try {\n    for (var arr_1 = __values2(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n      var element = arr_1_1.value;\n      if (element == null)\n        continue;\n      if (!type) {\n        if (isValidPrimitiveAttributeValue(element)) {\n          type = typeof element;\n          continue;\n        }\n        return false;\n      }\n      if (typeof element === type) {\n        continue;\n      }\n      return false;\n    }\n  } catch (e_2_1) {\n    e_2 = { error: e_2_1 };\n  } finally {\n    try {\n      if (arr_1_1 && !arr_1_1.done && (_a2 = arr_1.return))\n        _a2.call(arr_1);\n    } finally {\n      if (e_2)\n        throw e_2.error;\n    }\n  }\n  return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n  switch (typeof val) {\n    case \"number\":\n    case \"boolean\":\n    case \"string\":\n      return true;\n  }\n  return false;\n}\nvar __values2, __read7;\nvar init_attributes = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/common/attributes.js\"() {\n    init_esm();\n    __values2 = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n    __read7 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js\nfunction loggingErrorHandler() {\n  return function(ex) {\n    diag2.error(stringifyException(ex));\n  };\n}\nfunction stringifyException(ex) {\n  if (typeof ex === \"string\") {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\nfunction flattenException(ex) {\n  var result = {};\n  var current = ex;\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(function(propertyName) {\n      if (result[propertyName])\n        return;\n      var value = current[propertyName];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n  return result;\n}\nvar init_logging_error_handler = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js\"() {\n    init_esm();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\nfunction setGlobalErrorHandler(handler) {\n  delegateHandler = handler;\n}\nfunction globalErrorHandler(ex) {\n  try {\n    delegateHandler(ex);\n  } catch (_a2) {\n  }\n}\nvar delegateHandler;\nvar init_global_error_handler = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\"() {\n    init_logging_error_handler();\n    delegateHandler = loggingErrorHandler();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/utils/sampling.js\nvar TracesSamplerValues;\nvar init_sampling = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/utils/sampling.js\"() {\n    (function(TracesSamplerValues2) {\n      TracesSamplerValues2[\"AlwaysOff\"] = \"always_off\";\n      TracesSamplerValues2[\"AlwaysOn\"] = \"always_on\";\n      TracesSamplerValues2[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n      TracesSamplerValues2[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n      TracesSamplerValues2[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n      TracesSamplerValues2[\"TraceIdRatio\"] = \"traceidratio\";\n    })(TracesSamplerValues || (TracesSamplerValues = {}));\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\nvar _globalThis2;\nvar init_globalThis2 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\"() {\n    _globalThis2 = typeof globalThis === \"object\" ? globalThis : typeof self === \"object\" ? self : typeof window === \"object\" ? window : typeof global === \"object\" ? global : {};\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/utils/environment.js\nfunction isEnvVarABoolean(key) {\n  return ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1;\n}\nfunction isEnvVarANumber(key) {\n  return ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1;\n}\nfunction isEnvVarAList(key) {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nfunction parseBoolean(key, environment, values) {\n  if (typeof values[key] === \"undefined\") {\n    return;\n  }\n  var value = String(values[key]);\n  environment[key] = value.toLowerCase() === \"true\";\n}\nfunction parseNumber(name, environment, values, min, max) {\n  if (min === void 0) {\n    min = -Infinity;\n  }\n  if (max === void 0) {\n    max = Infinity;\n  }\n  if (typeof values[name] !== \"undefined\") {\n    var value = Number(values[name]);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\nfunction parseStringList(name, output, input, separator) {\n  if (separator === void 0) {\n    separator = DEFAULT_LIST_SEPARATOR;\n  }\n  var givenValue = input[name];\n  if (typeof givenValue === \"string\") {\n    output[name] = givenValue.split(separator).map(function(v) {\n      return v.trim();\n    });\n  }\n}\nfunction setLogLevelFromEnv(key, environment, values) {\n  var value = values[key];\n  if (typeof value === \"string\") {\n    var theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\nfunction parseEnvironment(values) {\n  var environment = {};\n  for (var env3 in DEFAULT_ENVIRONMENT) {\n    var key = env3;\n    switch (key) {\n      case \"OTEL_LOG_LEVEL\":\n        setLogLevelFromEnv(key, environment, values);\n        break;\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          var value = values[key];\n          if (typeof value !== \"undefined\" && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n  return environment;\n}\nfunction getEnvWithoutDefaults() {\n  return typeof process !== \"undefined\" && process && process.env ? parseEnvironment(process.env) : parseEnvironment(_globalThis2);\n}\nvar DEFAULT_LIST_SEPARATOR, ENVIRONMENT_BOOLEAN_KEYS, ENVIRONMENT_NUMBERS_KEYS, ENVIRONMENT_LISTS_KEYS, DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT, DEFAULT_ATTRIBUTE_COUNT_LIMIT, DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT, DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT, DEFAULT_ENVIRONMENT, logLevelMap;\nvar init_environment = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/utils/environment.js\"() {\n    init_esm();\n    init_sampling();\n    init_globalThis2();\n    DEFAULT_LIST_SEPARATOR = \",\";\n    ENVIRONMENT_BOOLEAN_KEYS = [\"OTEL_SDK_DISABLED\"];\n    ENVIRONMENT_NUMBERS_KEYS = [\n      \"OTEL_BSP_EXPORT_TIMEOUT\",\n      \"OTEL_BSP_MAX_EXPORT_BATCH_SIZE\",\n      \"OTEL_BSP_MAX_QUEUE_SIZE\",\n      \"OTEL_BSP_SCHEDULE_DELAY\",\n      \"OTEL_BLRP_EXPORT_TIMEOUT\",\n      \"OTEL_BLRP_MAX_EXPORT_BATCH_SIZE\",\n      \"OTEL_BLRP_MAX_QUEUE_SIZE\",\n      \"OTEL_BLRP_SCHEDULE_DELAY\",\n      \"OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT\",\n      \"OTEL_ATTRIBUTE_COUNT_LIMIT\",\n      \"OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT\",\n      \"OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT\",\n      \"OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT\",\n      \"OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT\",\n      \"OTEL_SPAN_EVENT_COUNT_LIMIT\",\n      \"OTEL_SPAN_LINK_COUNT_LIMIT\",\n      \"OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT\",\n      \"OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT\",\n      \"OTEL_EXPORTER_OTLP_TIMEOUT\",\n      \"OTEL_EXPORTER_OTLP_TRACES_TIMEOUT\",\n      \"OTEL_EXPORTER_OTLP_METRICS_TIMEOUT\",\n      \"OTEL_EXPORTER_OTLP_LOGS_TIMEOUT\",\n      \"OTEL_EXPORTER_JAEGER_AGENT_PORT\"\n    ];\n    ENVIRONMENT_LISTS_KEYS = [\n      \"OTEL_NO_PATCH_MODULES\",\n      \"OTEL_PROPAGATORS\"\n    ];\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n    DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\n    DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n    DEFAULT_ENVIRONMENT = {\n      OTEL_SDK_DISABLED: false,\n      CONTAINER_NAME: \"\",\n      ECS_CONTAINER_METADATA_URI_V4: \"\",\n      ECS_CONTAINER_METADATA_URI: \"\",\n      HOSTNAME: \"\",\n      KUBERNETES_SERVICE_HOST: \"\",\n      NAMESPACE: \"\",\n      OTEL_BSP_EXPORT_TIMEOUT: 3e4,\n      OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n      OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n      OTEL_BSP_SCHEDULE_DELAY: 5e3,\n      OTEL_BLRP_EXPORT_TIMEOUT: 3e4,\n      OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n      OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n      OTEL_BLRP_SCHEDULE_DELAY: 5e3,\n      OTEL_EXPORTER_JAEGER_AGENT_HOST: \"\",\n      OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n      OTEL_EXPORTER_JAEGER_ENDPOINT: \"\",\n      OTEL_EXPORTER_JAEGER_PASSWORD: \"\",\n      OTEL_EXPORTER_JAEGER_USER: \"\",\n      OTEL_EXPORTER_OTLP_ENDPOINT: \"\",\n      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: \"\",\n      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: \"\",\n      OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: \"\",\n      OTEL_EXPORTER_OTLP_HEADERS: \"\",\n      OTEL_EXPORTER_OTLP_TRACES_HEADERS: \"\",\n      OTEL_EXPORTER_OTLP_METRICS_HEADERS: \"\",\n      OTEL_EXPORTER_OTLP_LOGS_HEADERS: \"\",\n      OTEL_EXPORTER_OTLP_TIMEOUT: 1e4,\n      OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 1e4,\n      OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 1e4,\n      OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 1e4,\n      OTEL_EXPORTER_ZIPKIN_ENDPOINT: \"http://localhost:9411/api/v2/spans\",\n      OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n      OTEL_NO_PATCH_MODULES: [],\n      OTEL_PROPAGATORS: [\"tracecontext\", \"baggage\"],\n      OTEL_RESOURCE_ATTRIBUTES: \"\",\n      OTEL_SERVICE_NAME: \"\",\n      OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n      OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n      OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n      OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n      OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n      OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n      OTEL_TRACES_EXPORTER: \"\",\n      OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n      OTEL_TRACES_SAMPLER_ARG: \"\",\n      OTEL_LOGS_EXPORTER: \"\",\n      OTEL_EXPORTER_OTLP_INSECURE: \"\",\n      OTEL_EXPORTER_OTLP_TRACES_INSECURE: \"\",\n      OTEL_EXPORTER_OTLP_METRICS_INSECURE: \"\",\n      OTEL_EXPORTER_OTLP_LOGS_INSECURE: \"\",\n      OTEL_EXPORTER_OTLP_CERTIFICATE: \"\",\n      OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: \"\",\n      OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: \"\",\n      OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: \"\",\n      OTEL_EXPORTER_OTLP_COMPRESSION: \"\",\n      OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: \"\",\n      OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: \"\",\n      OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: \"\",\n      OTEL_EXPORTER_OTLP_CLIENT_KEY: \"\",\n      OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: \"\",\n      OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: \"\",\n      OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: \"\",\n      OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: \"\",\n      OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: \"\",\n      OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: \"\",\n      OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: \"\",\n      OTEL_EXPORTER_OTLP_PROTOCOL: \"http/protobuf\",\n      OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: \"http/protobuf\",\n      OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: \"http/protobuf\",\n      OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: \"http/protobuf\",\n      OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: \"cumulative\"\n    };\n    logLevelMap = {\n      ALL: DiagLogLevel.ALL,\n      VERBOSE: DiagLogLevel.VERBOSE,\n      DEBUG: DiagLogLevel.DEBUG,\n      INFO: DiagLogLevel.INFO,\n      WARN: DiagLogLevel.WARN,\n      ERROR: DiagLogLevel.ERROR,\n      NONE: DiagLogLevel.NONE\n    };\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\nfunction getEnv() {\n  var processEnv = parseEnvironment(process.env);\n  return Object.assign({}, DEFAULT_ENVIRONMENT, processEnv);\n}\nvar init_environment2 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\"() {\n    init_environment();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/node/globalThis.js\nvar _globalThis3;\nvar init_globalThis3 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/node/globalThis.js\"() {\n    _globalThis3 = typeof globalThis === \"object\" ? globalThis : global;\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/common/hex-to-binary.js\nfunction intValue(charCode) {\n  if (charCode >= 48 && charCode <= 57) {\n    return charCode - 48;\n  }\n  if (charCode >= 97 && charCode <= 102) {\n    return charCode - 87;\n  }\n  return charCode - 55;\n}\nfunction hexToBinary(hexStr) {\n  var buf = new Uint8Array(hexStr.length / 2);\n  var offset = 0;\n  for (var i = 0; i < hexStr.length; i += 2) {\n    var hi = intValue(hexStr.charCodeAt(i));\n    var lo = intValue(hexStr.charCodeAt(i + 1));\n    buf[offset++] = hi << 4 | lo;\n  }\n  return buf;\n}\nvar init_hex_to_binary = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/common/hex-to-binary.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/node/hex-to-base64.js\nfunction hexToBase64(hexStr) {\n  return Buffer.from(hexToBinary(hexStr)).toString(\"base64\");\n}\nvar init_hex_to_base64 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/node/hex-to-base64.js\"() {\n    init_hex_to_binary();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/node/RandomIdGenerator.js\nfunction getIdGenerator(bytes) {\n  return function generateId() {\n    for (var i = 0; i < bytes / 4; i++) {\n      SHARED_BUFFER.writeUInt32BE(Math.random() * Math.pow(2, 32) >>> 0, i * 4);\n    }\n    for (var i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n    return SHARED_BUFFER.toString(\"hex\", 0, bytes);\n  };\n}\nvar SPAN_ID_BYTES, TRACE_ID_BYTES, RandomIdGenerator, SHARED_BUFFER;\nvar init_RandomIdGenerator = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/node/RandomIdGenerator.js\"() {\n    SPAN_ID_BYTES = 8;\n    TRACE_ID_BYTES = 16;\n    RandomIdGenerator = /** @class */\n    function() {\n      function RandomIdGenerator3() {\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n      }\n      return RandomIdGenerator3;\n    }();\n    SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/node/performance.js\nvar import_perf_hooks, otperformance;\nvar init_performance = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/node/performance.js\"() {\n    import_perf_hooks = __webpack_require__(/*! perf_hooks */ \"perf_hooks\");\n    otperformance = import_perf_hooks.performance;\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/version.js\nvar VERSION2;\nvar init_version2 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/version.js\"() {\n    VERSION2 = \"1.23.0\";\n  }\n});\n\n// node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js\n// @__NO_SIDE_EFFECTS__\nfunction createConstMap(values) {\n  var res = {};\n  var len = values.length;\n  for (var lp = 0; lp < len; lp++) {\n    var val = values[lp];\n    if (val) {\n      res[String(val).toUpperCase().replace(/[-.]/g, \"_\")] = val;\n    }\n  }\n  return res;\n}\nvar init_utils4 = __esm({\n  \"node_modules/@opentelemetry/semantic-conventions/build/esm/internal/utils.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js\nvar TMP_AWS_LAMBDA_INVOKED_ARN, TMP_DB_SYSTEM, TMP_DB_CONNECTION_STRING, TMP_DB_USER, TMP_DB_JDBC_DRIVER_CLASSNAME, TMP_DB_NAME, TMP_DB_STATEMENT, TMP_DB_OPERATION, TMP_DB_MSSQL_INSTANCE_NAME, TMP_DB_CASSANDRA_KEYSPACE, TMP_DB_CASSANDRA_PAGE_SIZE, TMP_DB_CASSANDRA_CONSISTENCY_LEVEL, TMP_DB_CASSANDRA_TABLE, TMP_DB_CASSANDRA_IDEMPOTENCE, TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT, TMP_DB_CASSANDRA_COORDINATOR_ID, TMP_DB_CASSANDRA_COORDINATOR_DC, TMP_DB_HBASE_NAMESPACE, TMP_DB_REDIS_DATABASE_INDEX, TMP_DB_MONGODB_COLLECTION, TMP_DB_SQL_TABLE, TMP_EXCEPTION_TYPE, TMP_EXCEPTION_MESSAGE, TMP_EXCEPTION_STACKTRACE, TMP_EXCEPTION_ESCAPED, TMP_FAAS_TRIGGER, TMP_FAAS_EXECUTION, TMP_FAAS_DOCUMENT_COLLECTION, TMP_FAAS_DOCUMENT_OPERATION, TMP_FAAS_DOCUMENT_TIME, TMP_FAAS_DOCUMENT_NAME, TMP_FAAS_TIME, TMP_FAAS_CRON, TMP_FAAS_COLDSTART, TMP_FAAS_INVOKED_NAME, TMP_FAAS_INVOKED_PROVIDER, TMP_FAAS_INVOKED_REGION, TMP_NET_TRANSPORT, TMP_NET_PEER_IP, TMP_NET_PEER_PORT, TMP_NET_PEER_NAME, TMP_NET_HOST_IP, TMP_NET_HOST_PORT, TMP_NET_HOST_NAME, TMP_NET_HOST_CONNECTION_TYPE, TMP_NET_HOST_CONNECTION_SUBTYPE, TMP_NET_HOST_CARRIER_NAME, TMP_NET_HOST_CARRIER_MCC, TMP_NET_HOST_CARRIER_MNC, TMP_NET_HOST_CARRIER_ICC, TMP_PEER_SERVICE, TMP_ENDUSER_ID, TMP_ENDUSER_ROLE, TMP_ENDUSER_SCOPE, TMP_THREAD_ID, TMP_THREAD_NAME, TMP_CODE_FUNCTION, TMP_CODE_NAMESPACE, TMP_CODE_FILEPATH, TMP_CODE_LINENO, TMP_HTTP_METHOD, TMP_HTTP_URL, TMP_HTTP_TARGET, TMP_HTTP_HOST, TMP_HTTP_SCHEME, TMP_HTTP_STATUS_CODE, TMP_HTTP_FLAVOR, TMP_HTTP_USER_AGENT, TMP_HTTP_REQUEST_CONTENT_LENGTH, TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED, TMP_HTTP_RESPONSE_CONTENT_LENGTH, TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, TMP_HTTP_SERVER_NAME, TMP_HTTP_ROUTE, TMP_HTTP_CLIENT_IP, TMP_AWS_DYNAMODB_TABLE_NAMES, TMP_AWS_DYNAMODB_CONSUMED_CAPACITY, TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS, TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY, TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY, TMP_AWS_DYNAMODB_CONSISTENT_READ, TMP_AWS_DYNAMODB_PROJECTION, TMP_AWS_DYNAMODB_LIMIT, TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET, TMP_AWS_DYNAMODB_INDEX_NAME, TMP_AWS_DYNAMODB_SELECT, TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES, TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES, TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE, TMP_AWS_DYNAMODB_TABLE_COUNT, TMP_AWS_DYNAMODB_SCAN_FORWARD, TMP_AWS_DYNAMODB_SEGMENT, TMP_AWS_DYNAMODB_TOTAL_SEGMENTS, TMP_AWS_DYNAMODB_COUNT, TMP_AWS_DYNAMODB_SCANNED_COUNT, TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS, TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES, TMP_MESSAGING_SYSTEM, TMP_MESSAGING_DESTINATION, TMP_MESSAGING_DESTINATION_KIND, TMP_MESSAGING_TEMP_DESTINATION, TMP_MESSAGING_PROTOCOL, TMP_MESSAGING_PROTOCOL_VERSION, TMP_MESSAGING_URL, TMP_MESSAGING_MESSAGE_ID, TMP_MESSAGING_CONVERSATION_ID, TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES, TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES, TMP_MESSAGING_OPERATION, TMP_MESSAGING_CONSUMER_ID, TMP_MESSAGING_RABBITMQ_ROUTING_KEY, TMP_MESSAGING_KAFKA_MESSAGE_KEY, TMP_MESSAGING_KAFKA_CONSUMER_GROUP, TMP_MESSAGING_KAFKA_CLIENT_ID, TMP_MESSAGING_KAFKA_PARTITION, TMP_MESSAGING_KAFKA_TOMBSTONE, TMP_RPC_SYSTEM, TMP_RPC_SERVICE, TMP_RPC_METHOD, TMP_RPC_GRPC_STATUS_CODE, TMP_RPC_JSONRPC_VERSION, TMP_RPC_JSONRPC_REQUEST_ID, TMP_RPC_JSONRPC_ERROR_CODE, TMP_RPC_JSONRPC_ERROR_MESSAGE, TMP_MESSAGE_TYPE, TMP_MESSAGE_ID, TMP_MESSAGE_COMPRESSED_SIZE, TMP_MESSAGE_UNCOMPRESSED_SIZE, SEMATTRS_AWS_LAMBDA_INVOKED_ARN, SEMATTRS_DB_SYSTEM, SEMATTRS_DB_CONNECTION_STRING, SEMATTRS_DB_USER, SEMATTRS_DB_JDBC_DRIVER_CLASSNAME, SEMATTRS_DB_NAME, SEMATTRS_DB_STATEMENT, SEMATTRS_DB_OPERATION, SEMATTRS_DB_MSSQL_INSTANCE_NAME, SEMATTRS_DB_CASSANDRA_KEYSPACE, SEMATTRS_DB_CASSANDRA_PAGE_SIZE, SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL, SEMATTRS_DB_CASSANDRA_TABLE, SEMATTRS_DB_CASSANDRA_IDEMPOTENCE, SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT, SEMATTRS_DB_CASSANDRA_COORDINATOR_ID, SEMATTRS_DB_CASSANDRA_COORDINATOR_DC, SEMATTRS_DB_HBASE_NAMESPACE, SEMATTRS_DB_REDIS_DATABASE_INDEX, SEMATTRS_DB_MONGODB_COLLECTION, SEMATTRS_DB_SQL_TABLE, SEMATTRS_EXCEPTION_TYPE, SEMATTRS_EXCEPTION_MESSAGE, SEMATTRS_EXCEPTION_STACKTRACE, SEMATTRS_EXCEPTION_ESCAPED, SEMATTRS_FAAS_TRIGGER, SEMATTRS_FAAS_EXECUTION, SEMATTRS_FAAS_DOCUMENT_COLLECTION, SEMATTRS_FAAS_DOCUMENT_OPERATION, SEMATTRS_FAAS_DOCUMENT_TIME, SEMATTRS_FAAS_DOCUMENT_NAME, SEMATTRS_FAAS_TIME, SEMATTRS_FAAS_CRON, SEMATTRS_FAAS_COLDSTART, SEMATTRS_FAAS_INVOKED_NAME, SEMATTRS_FAAS_INVOKED_PROVIDER, SEMATTRS_FAAS_INVOKED_REGION, SEMATTRS_NET_TRANSPORT, SEMATTRS_NET_PEER_IP, SEMATTRS_NET_PEER_PORT, SEMATTRS_NET_PEER_NAME, SEMATTRS_NET_HOST_IP, SEMATTRS_NET_HOST_PORT, SEMATTRS_NET_HOST_NAME, SEMATTRS_NET_HOST_CONNECTION_TYPE, SEMATTRS_NET_HOST_CONNECTION_SUBTYPE, SEMATTRS_NET_HOST_CARRIER_NAME, SEMATTRS_NET_HOST_CARRIER_MCC, SEMATTRS_NET_HOST_CARRIER_MNC, SEMATTRS_NET_HOST_CARRIER_ICC, SEMATTRS_PEER_SERVICE, SEMATTRS_ENDUSER_ID, SEMATTRS_ENDUSER_ROLE, SEMATTRS_ENDUSER_SCOPE, SEMATTRS_THREAD_ID, SEMATTRS_THREAD_NAME, SEMATTRS_CODE_FUNCTION, SEMATTRS_CODE_NAMESPACE, SEMATTRS_CODE_FILEPATH, SEMATTRS_CODE_LINENO, SEMATTRS_HTTP_METHOD, SEMATTRS_HTTP_URL, SEMATTRS_HTTP_TARGET, SEMATTRS_HTTP_HOST, SEMATTRS_HTTP_SCHEME, SEMATTRS_HTTP_STATUS_CODE, SEMATTRS_HTTP_FLAVOR, SEMATTRS_HTTP_USER_AGENT, SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH, SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED, SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH, SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED, SEMATTRS_HTTP_SERVER_NAME, SEMATTRS_HTTP_ROUTE, SEMATTRS_HTTP_CLIENT_IP, SEMATTRS_AWS_DYNAMODB_TABLE_NAMES, SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY, SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS, SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY, SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY, SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ, SEMATTRS_AWS_DYNAMODB_PROJECTION, SEMATTRS_AWS_DYNAMODB_LIMIT, SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET, SEMATTRS_AWS_DYNAMODB_INDEX_NAME, SEMATTRS_AWS_DYNAMODB_SELECT, SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES, SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES, SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE, SEMATTRS_AWS_DYNAMODB_TABLE_COUNT, SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD, SEMATTRS_AWS_DYNAMODB_SEGMENT, SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS, SEMATTRS_AWS_DYNAMODB_COUNT, SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT, SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS, SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES, SEMATTRS_MESSAGING_SYSTEM, SEMATTRS_MESSAGING_DESTINATION, SEMATTRS_MESSAGING_DESTINATION_KIND, SEMATTRS_MESSAGING_TEMP_DESTINATION, SEMATTRS_MESSAGING_PROTOCOL, SEMATTRS_MESSAGING_PROTOCOL_VERSION, SEMATTRS_MESSAGING_URL, SEMATTRS_MESSAGING_MESSAGE_ID, SEMATTRS_MESSAGING_CONVERSATION_ID, SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES, SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES, SEMATTRS_MESSAGING_OPERATION, SEMATTRS_MESSAGING_CONSUMER_ID, SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY, SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY, SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP, SEMATTRS_MESSAGING_KAFKA_CLIENT_ID, SEMATTRS_MESSAGING_KAFKA_PARTITION, SEMATTRS_MESSAGING_KAFKA_TOMBSTONE, SEMATTRS_RPC_SYSTEM, SEMATTRS_RPC_SERVICE, SEMATTRS_RPC_METHOD, SEMATTRS_RPC_GRPC_STATUS_CODE, SEMATTRS_RPC_JSONRPC_VERSION, SEMATTRS_RPC_JSONRPC_REQUEST_ID, SEMATTRS_RPC_JSONRPC_ERROR_CODE, SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE, SEMATTRS_MESSAGE_TYPE, SEMATTRS_MESSAGE_ID, SEMATTRS_MESSAGE_COMPRESSED_SIZE, SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE, SemanticAttributes, TMP_DBSYSTEMVALUES_OTHER_SQL, TMP_DBSYSTEMVALUES_MSSQL, TMP_DBSYSTEMVALUES_MYSQL, TMP_DBSYSTEMVALUES_ORACLE, TMP_DBSYSTEMVALUES_DB2, TMP_DBSYSTEMVALUES_POSTGRESQL, TMP_DBSYSTEMVALUES_REDSHIFT, TMP_DBSYSTEMVALUES_HIVE, TMP_DBSYSTEMVALUES_CLOUDSCAPE, TMP_DBSYSTEMVALUES_HSQLDB, TMP_DBSYSTEMVALUES_PROGRESS, TMP_DBSYSTEMVALUES_MAXDB, TMP_DBSYSTEMVALUES_HANADB, TMP_DBSYSTEMVALUES_INGRES, TMP_DBSYSTEMVALUES_FIRSTSQL, TMP_DBSYSTEMVALUES_EDB, TMP_DBSYSTEMVALUES_CACHE, TMP_DBSYSTEMVALUES_ADABAS, TMP_DBSYSTEMVALUES_FIREBIRD, TMP_DBSYSTEMVALUES_DERBY, TMP_DBSYSTEMVALUES_FILEMAKER, TMP_DBSYSTEMVALUES_INFORMIX, TMP_DBSYSTEMVALUES_INSTANTDB, TMP_DBSYSTEMVALUES_INTERBASE, TMP_DBSYSTEMVALUES_MARIADB, TMP_DBSYSTEMVALUES_NETEZZA, TMP_DBSYSTEMVALUES_PERVASIVE, TMP_DBSYSTEMVALUES_POINTBASE, TMP_DBSYSTEMVALUES_SQLITE, TMP_DBSYSTEMVALUES_SYBASE, TMP_DBSYSTEMVALUES_TERADATA, TMP_DBSYSTEMVALUES_VERTICA, TMP_DBSYSTEMVALUES_H2, TMP_DBSYSTEMVALUES_COLDFUSION, TMP_DBSYSTEMVALUES_CASSANDRA, TMP_DBSYSTEMVALUES_HBASE, TMP_DBSYSTEMVALUES_MONGODB, TMP_DBSYSTEMVALUES_REDIS, TMP_DBSYSTEMVALUES_COUCHBASE, TMP_DBSYSTEMVALUES_COUCHDB, TMP_DBSYSTEMVALUES_COSMOSDB, TMP_DBSYSTEMVALUES_DYNAMODB, TMP_DBSYSTEMVALUES_NEO4J, TMP_DBSYSTEMVALUES_GEODE, TMP_DBSYSTEMVALUES_ELASTICSEARCH, TMP_DBSYSTEMVALUES_MEMCACHED, TMP_DBSYSTEMVALUES_COCKROACHDB, DBSYSTEMVALUES_OTHER_SQL, DBSYSTEMVALUES_MSSQL, DBSYSTEMVALUES_MYSQL, DBSYSTEMVALUES_ORACLE, DBSYSTEMVALUES_DB2, DBSYSTEMVALUES_POSTGRESQL, DBSYSTEMVALUES_REDSHIFT, DBSYSTEMVALUES_HIVE, DBSYSTEMVALUES_CLOUDSCAPE, DBSYSTEMVALUES_HSQLDB, DBSYSTEMVALUES_PROGRESS, DBSYSTEMVALUES_MAXDB, DBSYSTEMVALUES_HANADB, DBSYSTEMVALUES_INGRES, DBSYSTEMVALUES_FIRSTSQL, DBSYSTEMVALUES_EDB, DBSYSTEMVALUES_CACHE, DBSYSTEMVALUES_ADABAS, DBSYSTEMVALUES_FIREBIRD, DBSYSTEMVALUES_DERBY, DBSYSTEMVALUES_FILEMAKER, DBSYSTEMVALUES_INFORMIX, DBSYSTEMVALUES_INSTANTDB, DBSYSTEMVALUES_INTERBASE, DBSYSTEMVALUES_MARIADB, DBSYSTEMVALUES_NETEZZA, DBSYSTEMVALUES_PERVASIVE, DBSYSTEMVALUES_POINTBASE, DBSYSTEMVALUES_SQLITE, DBSYSTEMVALUES_SYBASE, DBSYSTEMVALUES_TERADATA, DBSYSTEMVALUES_VERTICA, DBSYSTEMVALUES_H2, DBSYSTEMVALUES_COLDFUSION, DBSYSTEMVALUES_CASSANDRA, DBSYSTEMVALUES_HBASE, DBSYSTEMVALUES_MONGODB, DBSYSTEMVALUES_REDIS, DBSYSTEMVALUES_COUCHBASE, DBSYSTEMVALUES_COUCHDB, DBSYSTEMVALUES_COSMOSDB, DBSYSTEMVALUES_DYNAMODB, DBSYSTEMVALUES_NEO4J, DBSYSTEMVALUES_GEODE, DBSYSTEMVALUES_ELASTICSEARCH, DBSYSTEMVALUES_MEMCACHED, DBSYSTEMVALUES_COCKROACHDB, DbSystemValues, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL, TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL, DBCASSANDRACONSISTENCYLEVELVALUES_ALL, DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM, DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM, DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM, DBCASSANDRACONSISTENCYLEVELVALUES_ONE, DBCASSANDRACONSISTENCYLEVELVALUES_TWO, DBCASSANDRACONSISTENCYLEVELVALUES_THREE, DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE, DBCASSANDRACONSISTENCYLEVELVALUES_ANY, DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL, DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL, DbCassandraConsistencyLevelValues, TMP_FAASTRIGGERVALUES_DATASOURCE, TMP_FAASTRIGGERVALUES_HTTP, TMP_FAASTRIGGERVALUES_PUBSUB, TMP_FAASTRIGGERVALUES_TIMER, TMP_FAASTRIGGERVALUES_OTHER, FAASTRIGGERVALUES_DATASOURCE, FAASTRIGGERVALUES_HTTP, FAASTRIGGERVALUES_PUBSUB, FAASTRIGGERVALUES_TIMER, FAASTRIGGERVALUES_OTHER, FaasTriggerValues, TMP_FAASDOCUMENTOPERATIONVALUES_INSERT, TMP_FAASDOCUMENTOPERATIONVALUES_EDIT, TMP_FAASDOCUMENTOPERATIONVALUES_DELETE, FAASDOCUMENTOPERATIONVALUES_INSERT, FAASDOCUMENTOPERATIONVALUES_EDIT, FAASDOCUMENTOPERATIONVALUES_DELETE, FaasDocumentOperationValues, TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD, TMP_FAASINVOKEDPROVIDERVALUES_AWS, TMP_FAASINVOKEDPROVIDERVALUES_AZURE, TMP_FAASINVOKEDPROVIDERVALUES_GCP, FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD, FAASINVOKEDPROVIDERVALUES_AWS, FAASINVOKEDPROVIDERVALUES_AZURE, FAASINVOKEDPROVIDERVALUES_GCP, FaasInvokedProviderValues, TMP_NETTRANSPORTVALUES_IP_TCP, TMP_NETTRANSPORTVALUES_IP_UDP, TMP_NETTRANSPORTVALUES_IP, TMP_NETTRANSPORTVALUES_UNIX, TMP_NETTRANSPORTVALUES_PIPE, TMP_NETTRANSPORTVALUES_INPROC, TMP_NETTRANSPORTVALUES_OTHER, NETTRANSPORTVALUES_IP_TCP, NETTRANSPORTVALUES_IP_UDP, NETTRANSPORTVALUES_IP, NETTRANSPORTVALUES_UNIX, NETTRANSPORTVALUES_PIPE, NETTRANSPORTVALUES_INPROC, NETTRANSPORTVALUES_OTHER, NetTransportValues, TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI, TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED, TMP_NETHOSTCONNECTIONTYPEVALUES_CELL, TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE, TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN, NETHOSTCONNECTIONTYPEVALUES_WIFI, NETHOSTCONNECTIONTYPEVALUES_WIRED, NETHOSTCONNECTIONTYPEVALUES_CELL, NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE, NETHOSTCONNECTIONTYPEVALUES_UNKNOWN, NetHostConnectionTypeValues, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA, TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA, NETHOSTCONNECTIONSUBTYPEVALUES_GPRS, NETHOSTCONNECTIONSUBTYPEVALUES_EDGE, NETHOSTCONNECTIONSUBTYPEVALUES_UMTS, NETHOSTCONNECTIONSUBTYPEVALUES_CDMA, NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0, NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A, NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT, NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA, NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA, NETHOSTCONNECTIONSUBTYPEVALUES_HSPA, NETHOSTCONNECTIONSUBTYPEVALUES_IDEN, NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B, NETHOSTCONNECTIONSUBTYPEVALUES_LTE, NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD, NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP, NETHOSTCONNECTIONSUBTYPEVALUES_GSM, NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA, NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN, NETHOSTCONNECTIONSUBTYPEVALUES_NR, NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA, NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA, NetHostConnectionSubtypeValues, TMP_HTTPFLAVORVALUES_HTTP_1_0, TMP_HTTPFLAVORVALUES_HTTP_1_1, TMP_HTTPFLAVORVALUES_HTTP_2_0, TMP_HTTPFLAVORVALUES_SPDY, TMP_HTTPFLAVORVALUES_QUIC, HTTPFLAVORVALUES_HTTP_1_0, HTTPFLAVORVALUES_HTTP_1_1, HTTPFLAVORVALUES_HTTP_2_0, HTTPFLAVORVALUES_SPDY, HTTPFLAVORVALUES_QUIC, HttpFlavorValues, TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE, TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC, MESSAGINGDESTINATIONKINDVALUES_QUEUE, MESSAGINGDESTINATIONKINDVALUES_TOPIC, MessagingDestinationKindValues, TMP_MESSAGINGOPERATIONVALUES_RECEIVE, TMP_MESSAGINGOPERATIONVALUES_PROCESS, MESSAGINGOPERATIONVALUES_RECEIVE, MESSAGINGOPERATIONVALUES_PROCESS, MessagingOperationValues, TMP_RPCGRPCSTATUSCODEVALUES_OK, TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED, TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN, TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT, TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED, TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND, TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS, TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED, TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED, TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION, TMP_RPCGRPCSTATUSCODEVALUES_ABORTED, TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE, TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED, TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL, TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE, TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS, TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED, RPCGRPCSTATUSCODEVALUES_OK, RPCGRPCSTATUSCODEVALUES_CANCELLED, RPCGRPCSTATUSCODEVALUES_UNKNOWN, RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT, RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED, RPCGRPCSTATUSCODEVALUES_NOT_FOUND, RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS, RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED, RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED, RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION, RPCGRPCSTATUSCODEVALUES_ABORTED, RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE, RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED, RPCGRPCSTATUSCODEVALUES_INTERNAL, RPCGRPCSTATUSCODEVALUES_UNAVAILABLE, RPCGRPCSTATUSCODEVALUES_DATA_LOSS, RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED, RpcGrpcStatusCodeValues, TMP_MESSAGETYPEVALUES_SENT, TMP_MESSAGETYPEVALUES_RECEIVED, MESSAGETYPEVALUES_SENT, MESSAGETYPEVALUES_RECEIVED, MessageTypeValues;\nvar init_SemanticAttributes = __esm({\n  \"node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js\"() {\n    init_utils4();\n    TMP_AWS_LAMBDA_INVOKED_ARN = \"aws.lambda.invoked_arn\";\n    TMP_DB_SYSTEM = \"db.system\";\n    TMP_DB_CONNECTION_STRING = \"db.connection_string\";\n    TMP_DB_USER = \"db.user\";\n    TMP_DB_JDBC_DRIVER_CLASSNAME = \"db.jdbc.driver_classname\";\n    TMP_DB_NAME = \"db.name\";\n    TMP_DB_STATEMENT = \"db.statement\";\n    TMP_DB_OPERATION = \"db.operation\";\n    TMP_DB_MSSQL_INSTANCE_NAME = \"db.mssql.instance_name\";\n    TMP_DB_CASSANDRA_KEYSPACE = \"db.cassandra.keyspace\";\n    TMP_DB_CASSANDRA_PAGE_SIZE = \"db.cassandra.page_size\";\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = \"db.cassandra.consistency_level\";\n    TMP_DB_CASSANDRA_TABLE = \"db.cassandra.table\";\n    TMP_DB_CASSANDRA_IDEMPOTENCE = \"db.cassandra.idempotence\";\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = \"db.cassandra.speculative_execution_count\";\n    TMP_DB_CASSANDRA_COORDINATOR_ID = \"db.cassandra.coordinator.id\";\n    TMP_DB_CASSANDRA_COORDINATOR_DC = \"db.cassandra.coordinator.dc\";\n    TMP_DB_HBASE_NAMESPACE = \"db.hbase.namespace\";\n    TMP_DB_REDIS_DATABASE_INDEX = \"db.redis.database_index\";\n    TMP_DB_MONGODB_COLLECTION = \"db.mongodb.collection\";\n    TMP_DB_SQL_TABLE = \"db.sql.table\";\n    TMP_EXCEPTION_TYPE = \"exception.type\";\n    TMP_EXCEPTION_MESSAGE = \"exception.message\";\n    TMP_EXCEPTION_STACKTRACE = \"exception.stacktrace\";\n    TMP_EXCEPTION_ESCAPED = \"exception.escaped\";\n    TMP_FAAS_TRIGGER = \"faas.trigger\";\n    TMP_FAAS_EXECUTION = \"faas.execution\";\n    TMP_FAAS_DOCUMENT_COLLECTION = \"faas.document.collection\";\n    TMP_FAAS_DOCUMENT_OPERATION = \"faas.document.operation\";\n    TMP_FAAS_DOCUMENT_TIME = \"faas.document.time\";\n    TMP_FAAS_DOCUMENT_NAME = \"faas.document.name\";\n    TMP_FAAS_TIME = \"faas.time\";\n    TMP_FAAS_CRON = \"faas.cron\";\n    TMP_FAAS_COLDSTART = \"faas.coldstart\";\n    TMP_FAAS_INVOKED_NAME = \"faas.invoked_name\";\n    TMP_FAAS_INVOKED_PROVIDER = \"faas.invoked_provider\";\n    TMP_FAAS_INVOKED_REGION = \"faas.invoked_region\";\n    TMP_NET_TRANSPORT = \"net.transport\";\n    TMP_NET_PEER_IP = \"net.peer.ip\";\n    TMP_NET_PEER_PORT = \"net.peer.port\";\n    TMP_NET_PEER_NAME = \"net.peer.name\";\n    TMP_NET_HOST_IP = \"net.host.ip\";\n    TMP_NET_HOST_PORT = \"net.host.port\";\n    TMP_NET_HOST_NAME = \"net.host.name\";\n    TMP_NET_HOST_CONNECTION_TYPE = \"net.host.connection.type\";\n    TMP_NET_HOST_CONNECTION_SUBTYPE = \"net.host.connection.subtype\";\n    TMP_NET_HOST_CARRIER_NAME = \"net.host.carrier.name\";\n    TMP_NET_HOST_CARRIER_MCC = \"net.host.carrier.mcc\";\n    TMP_NET_HOST_CARRIER_MNC = \"net.host.carrier.mnc\";\n    TMP_NET_HOST_CARRIER_ICC = \"net.host.carrier.icc\";\n    TMP_PEER_SERVICE = \"peer.service\";\n    TMP_ENDUSER_ID = \"enduser.id\";\n    TMP_ENDUSER_ROLE = \"enduser.role\";\n    TMP_ENDUSER_SCOPE = \"enduser.scope\";\n    TMP_THREAD_ID = \"thread.id\";\n    TMP_THREAD_NAME = \"thread.name\";\n    TMP_CODE_FUNCTION = \"code.function\";\n    TMP_CODE_NAMESPACE = \"code.namespace\";\n    TMP_CODE_FILEPATH = \"code.filepath\";\n    TMP_CODE_LINENO = \"code.lineno\";\n    TMP_HTTP_METHOD = \"http.method\";\n    TMP_HTTP_URL = \"http.url\";\n    TMP_HTTP_TARGET = \"http.target\";\n    TMP_HTTP_HOST = \"http.host\";\n    TMP_HTTP_SCHEME = \"http.scheme\";\n    TMP_HTTP_STATUS_CODE = \"http.status_code\";\n    TMP_HTTP_FLAVOR = \"http.flavor\";\n    TMP_HTTP_USER_AGENT = \"http.user_agent\";\n    TMP_HTTP_REQUEST_CONTENT_LENGTH = \"http.request_content_length\";\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = \"http.request_content_length_uncompressed\";\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH = \"http.response_content_length\";\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = \"http.response_content_length_uncompressed\";\n    TMP_HTTP_SERVER_NAME = \"http.server_name\";\n    TMP_HTTP_ROUTE = \"http.route\";\n    TMP_HTTP_CLIENT_IP = \"http.client_ip\";\n    TMP_AWS_DYNAMODB_TABLE_NAMES = \"aws.dynamodb.table_names\";\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = \"aws.dynamodb.consumed_capacity\";\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = \"aws.dynamodb.item_collection_metrics\";\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = \"aws.dynamodb.provisioned_read_capacity\";\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = \"aws.dynamodb.provisioned_write_capacity\";\n    TMP_AWS_DYNAMODB_CONSISTENT_READ = \"aws.dynamodb.consistent_read\";\n    TMP_AWS_DYNAMODB_PROJECTION = \"aws.dynamodb.projection\";\n    TMP_AWS_DYNAMODB_LIMIT = \"aws.dynamodb.limit\";\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = \"aws.dynamodb.attributes_to_get\";\n    TMP_AWS_DYNAMODB_INDEX_NAME = \"aws.dynamodb.index_name\";\n    TMP_AWS_DYNAMODB_SELECT = \"aws.dynamodb.select\";\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = \"aws.dynamodb.global_secondary_indexes\";\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = \"aws.dynamodb.local_secondary_indexes\";\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = \"aws.dynamodb.exclusive_start_table\";\n    TMP_AWS_DYNAMODB_TABLE_COUNT = \"aws.dynamodb.table_count\";\n    TMP_AWS_DYNAMODB_SCAN_FORWARD = \"aws.dynamodb.scan_forward\";\n    TMP_AWS_DYNAMODB_SEGMENT = \"aws.dynamodb.segment\";\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = \"aws.dynamodb.total_segments\";\n    TMP_AWS_DYNAMODB_COUNT = \"aws.dynamodb.count\";\n    TMP_AWS_DYNAMODB_SCANNED_COUNT = \"aws.dynamodb.scanned_count\";\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = \"aws.dynamodb.attribute_definitions\";\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = \"aws.dynamodb.global_secondary_index_updates\";\n    TMP_MESSAGING_SYSTEM = \"messaging.system\";\n    TMP_MESSAGING_DESTINATION = \"messaging.destination\";\n    TMP_MESSAGING_DESTINATION_KIND = \"messaging.destination_kind\";\n    TMP_MESSAGING_TEMP_DESTINATION = \"messaging.temp_destination\";\n    TMP_MESSAGING_PROTOCOL = \"messaging.protocol\";\n    TMP_MESSAGING_PROTOCOL_VERSION = \"messaging.protocol_version\";\n    TMP_MESSAGING_URL = \"messaging.url\";\n    TMP_MESSAGING_MESSAGE_ID = \"messaging.message_id\";\n    TMP_MESSAGING_CONVERSATION_ID = \"messaging.conversation_id\";\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = \"messaging.message_payload_size_bytes\";\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = \"messaging.message_payload_compressed_size_bytes\";\n    TMP_MESSAGING_OPERATION = \"messaging.operation\";\n    TMP_MESSAGING_CONSUMER_ID = \"messaging.consumer_id\";\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY = \"messaging.rabbitmq.routing_key\";\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY = \"messaging.kafka.message_key\";\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP = \"messaging.kafka.consumer_group\";\n    TMP_MESSAGING_KAFKA_CLIENT_ID = \"messaging.kafka.client_id\";\n    TMP_MESSAGING_KAFKA_PARTITION = \"messaging.kafka.partition\";\n    TMP_MESSAGING_KAFKA_TOMBSTONE = \"messaging.kafka.tombstone\";\n    TMP_RPC_SYSTEM = \"rpc.system\";\n    TMP_RPC_SERVICE = \"rpc.service\";\n    TMP_RPC_METHOD = \"rpc.method\";\n    TMP_RPC_GRPC_STATUS_CODE = \"rpc.grpc.status_code\";\n    TMP_RPC_JSONRPC_VERSION = \"rpc.jsonrpc.version\";\n    TMP_RPC_JSONRPC_REQUEST_ID = \"rpc.jsonrpc.request_id\";\n    TMP_RPC_JSONRPC_ERROR_CODE = \"rpc.jsonrpc.error_code\";\n    TMP_RPC_JSONRPC_ERROR_MESSAGE = \"rpc.jsonrpc.error_message\";\n    TMP_MESSAGE_TYPE = \"message.type\";\n    TMP_MESSAGE_ID = \"message.id\";\n    TMP_MESSAGE_COMPRESSED_SIZE = \"message.compressed_size\";\n    TMP_MESSAGE_UNCOMPRESSED_SIZE = \"message.uncompressed_size\";\n    SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n    SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n    SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n    SEMATTRS_DB_USER = TMP_DB_USER;\n    SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n    SEMATTRS_DB_NAME = TMP_DB_NAME;\n    SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n    SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n    SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n    SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n    SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n    SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n    SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n    SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n    SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n    SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;\n    SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;\n    SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n    SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n    SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n    SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n    SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n    SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n    SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n    SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n    SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n    SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n    SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n    SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n    SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n    SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n    SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n    SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n    SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n    SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n    SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n    SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n    SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n    SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n    SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n    SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n    SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n    SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n    SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n    SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n    SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;\n    SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n    SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n    SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n    SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n    SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n    SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n    SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n    SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n    SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n    SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n    SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n    SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n    SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n    SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n    SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n    SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n    SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n    SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n    SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n    SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n    SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n    SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n    SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;\n    SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n    SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n    SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n    SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n    SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n    SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n    SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n    SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n    SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n    SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n    SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n    SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;\n    SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n    SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n    SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n    SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n    SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n    SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n    SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n    SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n    SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n    SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n    SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n    SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n    SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n    SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;\n    SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n    SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n    SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n    SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n    SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;\n    SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;\n    SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n    SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;\n    SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n    SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n    SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n    SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n    SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n    SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n    SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n    SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n    SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n    SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n    SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n    SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n    SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n    SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n    SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n    SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n    SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n    SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n    SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n    SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n    SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n    SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n    SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n    SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n    SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n    SemanticAttributes = /* @__PURE__ */ createConstMap([\n      TMP_AWS_LAMBDA_INVOKED_ARN,\n      TMP_DB_SYSTEM,\n      TMP_DB_CONNECTION_STRING,\n      TMP_DB_USER,\n      TMP_DB_JDBC_DRIVER_CLASSNAME,\n      TMP_DB_NAME,\n      TMP_DB_STATEMENT,\n      TMP_DB_OPERATION,\n      TMP_DB_MSSQL_INSTANCE_NAME,\n      TMP_DB_CASSANDRA_KEYSPACE,\n      TMP_DB_CASSANDRA_PAGE_SIZE,\n      TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n      TMP_DB_CASSANDRA_TABLE,\n      TMP_DB_CASSANDRA_IDEMPOTENCE,\n      TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n      TMP_DB_CASSANDRA_COORDINATOR_ID,\n      TMP_DB_CASSANDRA_COORDINATOR_DC,\n      TMP_DB_HBASE_NAMESPACE,\n      TMP_DB_REDIS_DATABASE_INDEX,\n      TMP_DB_MONGODB_COLLECTION,\n      TMP_DB_SQL_TABLE,\n      TMP_EXCEPTION_TYPE,\n      TMP_EXCEPTION_MESSAGE,\n      TMP_EXCEPTION_STACKTRACE,\n      TMP_EXCEPTION_ESCAPED,\n      TMP_FAAS_TRIGGER,\n      TMP_FAAS_EXECUTION,\n      TMP_FAAS_DOCUMENT_COLLECTION,\n      TMP_FAAS_DOCUMENT_OPERATION,\n      TMP_FAAS_DOCUMENT_TIME,\n      TMP_FAAS_DOCUMENT_NAME,\n      TMP_FAAS_TIME,\n      TMP_FAAS_CRON,\n      TMP_FAAS_COLDSTART,\n      TMP_FAAS_INVOKED_NAME,\n      TMP_FAAS_INVOKED_PROVIDER,\n      TMP_FAAS_INVOKED_REGION,\n      TMP_NET_TRANSPORT,\n      TMP_NET_PEER_IP,\n      TMP_NET_PEER_PORT,\n      TMP_NET_PEER_NAME,\n      TMP_NET_HOST_IP,\n      TMP_NET_HOST_PORT,\n      TMP_NET_HOST_NAME,\n      TMP_NET_HOST_CONNECTION_TYPE,\n      TMP_NET_HOST_CONNECTION_SUBTYPE,\n      TMP_NET_HOST_CARRIER_NAME,\n      TMP_NET_HOST_CARRIER_MCC,\n      TMP_NET_HOST_CARRIER_MNC,\n      TMP_NET_HOST_CARRIER_ICC,\n      TMP_PEER_SERVICE,\n      TMP_ENDUSER_ID,\n      TMP_ENDUSER_ROLE,\n      TMP_ENDUSER_SCOPE,\n      TMP_THREAD_ID,\n      TMP_THREAD_NAME,\n      TMP_CODE_FUNCTION,\n      TMP_CODE_NAMESPACE,\n      TMP_CODE_FILEPATH,\n      TMP_CODE_LINENO,\n      TMP_HTTP_METHOD,\n      TMP_HTTP_URL,\n      TMP_HTTP_TARGET,\n      TMP_HTTP_HOST,\n      TMP_HTTP_SCHEME,\n      TMP_HTTP_STATUS_CODE,\n      TMP_HTTP_FLAVOR,\n      TMP_HTTP_USER_AGENT,\n      TMP_HTTP_REQUEST_CONTENT_LENGTH,\n      TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n      TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n      TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n      TMP_HTTP_SERVER_NAME,\n      TMP_HTTP_ROUTE,\n      TMP_HTTP_CLIENT_IP,\n      TMP_AWS_DYNAMODB_TABLE_NAMES,\n      TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n      TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n      TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n      TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n      TMP_AWS_DYNAMODB_CONSISTENT_READ,\n      TMP_AWS_DYNAMODB_PROJECTION,\n      TMP_AWS_DYNAMODB_LIMIT,\n      TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n      TMP_AWS_DYNAMODB_INDEX_NAME,\n      TMP_AWS_DYNAMODB_SELECT,\n      TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n      TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n      TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n      TMP_AWS_DYNAMODB_TABLE_COUNT,\n      TMP_AWS_DYNAMODB_SCAN_FORWARD,\n      TMP_AWS_DYNAMODB_SEGMENT,\n      TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n      TMP_AWS_DYNAMODB_COUNT,\n      TMP_AWS_DYNAMODB_SCANNED_COUNT,\n      TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n      TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n      TMP_MESSAGING_SYSTEM,\n      TMP_MESSAGING_DESTINATION,\n      TMP_MESSAGING_DESTINATION_KIND,\n      TMP_MESSAGING_TEMP_DESTINATION,\n      TMP_MESSAGING_PROTOCOL,\n      TMP_MESSAGING_PROTOCOL_VERSION,\n      TMP_MESSAGING_URL,\n      TMP_MESSAGING_MESSAGE_ID,\n      TMP_MESSAGING_CONVERSATION_ID,\n      TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n      TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n      TMP_MESSAGING_OPERATION,\n      TMP_MESSAGING_CONSUMER_ID,\n      TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n      TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n      TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n      TMP_MESSAGING_KAFKA_CLIENT_ID,\n      TMP_MESSAGING_KAFKA_PARTITION,\n      TMP_MESSAGING_KAFKA_TOMBSTONE,\n      TMP_RPC_SYSTEM,\n      TMP_RPC_SERVICE,\n      TMP_RPC_METHOD,\n      TMP_RPC_GRPC_STATUS_CODE,\n      TMP_RPC_JSONRPC_VERSION,\n      TMP_RPC_JSONRPC_REQUEST_ID,\n      TMP_RPC_JSONRPC_ERROR_CODE,\n      TMP_RPC_JSONRPC_ERROR_MESSAGE,\n      TMP_MESSAGE_TYPE,\n      TMP_MESSAGE_ID,\n      TMP_MESSAGE_COMPRESSED_SIZE,\n      TMP_MESSAGE_UNCOMPRESSED_SIZE\n    ]);\n    TMP_DBSYSTEMVALUES_OTHER_SQL = \"other_sql\";\n    TMP_DBSYSTEMVALUES_MSSQL = \"mssql\";\n    TMP_DBSYSTEMVALUES_MYSQL = \"mysql\";\n    TMP_DBSYSTEMVALUES_ORACLE = \"oracle\";\n    TMP_DBSYSTEMVALUES_DB2 = \"db2\";\n    TMP_DBSYSTEMVALUES_POSTGRESQL = \"postgresql\";\n    TMP_DBSYSTEMVALUES_REDSHIFT = \"redshift\";\n    TMP_DBSYSTEMVALUES_HIVE = \"hive\";\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE = \"cloudscape\";\n    TMP_DBSYSTEMVALUES_HSQLDB = \"hsqldb\";\n    TMP_DBSYSTEMVALUES_PROGRESS = \"progress\";\n    TMP_DBSYSTEMVALUES_MAXDB = \"maxdb\";\n    TMP_DBSYSTEMVALUES_HANADB = \"hanadb\";\n    TMP_DBSYSTEMVALUES_INGRES = \"ingres\";\n    TMP_DBSYSTEMVALUES_FIRSTSQL = \"firstsql\";\n    TMP_DBSYSTEMVALUES_EDB = \"edb\";\n    TMP_DBSYSTEMVALUES_CACHE = \"cache\";\n    TMP_DBSYSTEMVALUES_ADABAS = \"adabas\";\n    TMP_DBSYSTEMVALUES_FIREBIRD = \"firebird\";\n    TMP_DBSYSTEMVALUES_DERBY = \"derby\";\n    TMP_DBSYSTEMVALUES_FILEMAKER = \"filemaker\";\n    TMP_DBSYSTEMVALUES_INFORMIX = \"informix\";\n    TMP_DBSYSTEMVALUES_INSTANTDB = \"instantdb\";\n    TMP_DBSYSTEMVALUES_INTERBASE = \"interbase\";\n    TMP_DBSYSTEMVALUES_MARIADB = \"mariadb\";\n    TMP_DBSYSTEMVALUES_NETEZZA = \"netezza\";\n    TMP_DBSYSTEMVALUES_PERVASIVE = \"pervasive\";\n    TMP_DBSYSTEMVALUES_POINTBASE = \"pointbase\";\n    TMP_DBSYSTEMVALUES_SQLITE = \"sqlite\";\n    TMP_DBSYSTEMVALUES_SYBASE = \"sybase\";\n    TMP_DBSYSTEMVALUES_TERADATA = \"teradata\";\n    TMP_DBSYSTEMVALUES_VERTICA = \"vertica\";\n    TMP_DBSYSTEMVALUES_H2 = \"h2\";\n    TMP_DBSYSTEMVALUES_COLDFUSION = \"coldfusion\";\n    TMP_DBSYSTEMVALUES_CASSANDRA = \"cassandra\";\n    TMP_DBSYSTEMVALUES_HBASE = \"hbase\";\n    TMP_DBSYSTEMVALUES_MONGODB = \"mongodb\";\n    TMP_DBSYSTEMVALUES_REDIS = \"redis\";\n    TMP_DBSYSTEMVALUES_COUCHBASE = \"couchbase\";\n    TMP_DBSYSTEMVALUES_COUCHDB = \"couchdb\";\n    TMP_DBSYSTEMVALUES_COSMOSDB = \"cosmosdb\";\n    TMP_DBSYSTEMVALUES_DYNAMODB = \"dynamodb\";\n    TMP_DBSYSTEMVALUES_NEO4J = \"neo4j\";\n    TMP_DBSYSTEMVALUES_GEODE = \"geode\";\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH = \"elasticsearch\";\n    TMP_DBSYSTEMVALUES_MEMCACHED = \"memcached\";\n    TMP_DBSYSTEMVALUES_COCKROACHDB = \"cockroachdb\";\n    DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n    DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n    DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n    DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n    DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n    DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n    DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n    DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n    DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n    DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n    DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n    DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n    DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n    DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n    DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n    DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n    DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n    DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n    DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n    DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n    DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n    DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n    DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n    DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n    DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n    DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n    DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n    DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n    DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n    DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n    DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n    DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n    DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n    DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n    DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n    DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n    DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n    DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n    DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n    DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n    DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n    DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n    DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n    DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n    DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n    DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n    DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n    DbSystemValues = /* @__PURE__ */ createConstMap([\n      TMP_DBSYSTEMVALUES_OTHER_SQL,\n      TMP_DBSYSTEMVALUES_MSSQL,\n      TMP_DBSYSTEMVALUES_MYSQL,\n      TMP_DBSYSTEMVALUES_ORACLE,\n      TMP_DBSYSTEMVALUES_DB2,\n      TMP_DBSYSTEMVALUES_POSTGRESQL,\n      TMP_DBSYSTEMVALUES_REDSHIFT,\n      TMP_DBSYSTEMVALUES_HIVE,\n      TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n      TMP_DBSYSTEMVALUES_HSQLDB,\n      TMP_DBSYSTEMVALUES_PROGRESS,\n      TMP_DBSYSTEMVALUES_MAXDB,\n      TMP_DBSYSTEMVALUES_HANADB,\n      TMP_DBSYSTEMVALUES_INGRES,\n      TMP_DBSYSTEMVALUES_FIRSTSQL,\n      TMP_DBSYSTEMVALUES_EDB,\n      TMP_DBSYSTEMVALUES_CACHE,\n      TMP_DBSYSTEMVALUES_ADABAS,\n      TMP_DBSYSTEMVALUES_FIREBIRD,\n      TMP_DBSYSTEMVALUES_DERBY,\n      TMP_DBSYSTEMVALUES_FILEMAKER,\n      TMP_DBSYSTEMVALUES_INFORMIX,\n      TMP_DBSYSTEMVALUES_INSTANTDB,\n      TMP_DBSYSTEMVALUES_INTERBASE,\n      TMP_DBSYSTEMVALUES_MARIADB,\n      TMP_DBSYSTEMVALUES_NETEZZA,\n      TMP_DBSYSTEMVALUES_PERVASIVE,\n      TMP_DBSYSTEMVALUES_POINTBASE,\n      TMP_DBSYSTEMVALUES_SQLITE,\n      TMP_DBSYSTEMVALUES_SYBASE,\n      TMP_DBSYSTEMVALUES_TERADATA,\n      TMP_DBSYSTEMVALUES_VERTICA,\n      TMP_DBSYSTEMVALUES_H2,\n      TMP_DBSYSTEMVALUES_COLDFUSION,\n      TMP_DBSYSTEMVALUES_CASSANDRA,\n      TMP_DBSYSTEMVALUES_HBASE,\n      TMP_DBSYSTEMVALUES_MONGODB,\n      TMP_DBSYSTEMVALUES_REDIS,\n      TMP_DBSYSTEMVALUES_COUCHBASE,\n      TMP_DBSYSTEMVALUES_COUCHDB,\n      TMP_DBSYSTEMVALUES_COSMOSDB,\n      TMP_DBSYSTEMVALUES_DYNAMODB,\n      TMP_DBSYSTEMVALUES_NEO4J,\n      TMP_DBSYSTEMVALUES_GEODE,\n      TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n      TMP_DBSYSTEMVALUES_MEMCACHED,\n      TMP_DBSYSTEMVALUES_COCKROACHDB\n    ]);\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = \"all\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = \"each_quorum\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = \"quorum\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = \"local_quorum\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = \"one\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = \"two\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = \"three\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = \"local_one\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = \"any\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = \"serial\";\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = \"local_serial\";\n    DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n    DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n    DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n    DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n    DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n    DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n    DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n    DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n    DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n    DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n    DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n    DbCassandraConsistencyLevelValues = /* @__PURE__ */ createConstMap([\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n      TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL\n    ]);\n    TMP_FAASTRIGGERVALUES_DATASOURCE = \"datasource\";\n    TMP_FAASTRIGGERVALUES_HTTP = \"http\";\n    TMP_FAASTRIGGERVALUES_PUBSUB = \"pubsub\";\n    TMP_FAASTRIGGERVALUES_TIMER = \"timer\";\n    TMP_FAASTRIGGERVALUES_OTHER = \"other\";\n    FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n    FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n    FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n    FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n    FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n    FaasTriggerValues = /* @__PURE__ */ createConstMap([\n      TMP_FAASTRIGGERVALUES_DATASOURCE,\n      TMP_FAASTRIGGERVALUES_HTTP,\n      TMP_FAASTRIGGERVALUES_PUBSUB,\n      TMP_FAASTRIGGERVALUES_TIMER,\n      TMP_FAASTRIGGERVALUES_OTHER\n    ]);\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = \"insert\";\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = \"edit\";\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = \"delete\";\n    FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n    FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n    FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n    FaasDocumentOperationValues = /* @__PURE__ */ createConstMap([\n      TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n      TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n      TMP_FAASDOCUMENTOPERATIONVALUES_DELETE\n    ]);\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = \"alibaba_cloud\";\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS = \"aws\";\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE = \"azure\";\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP = \"gcp\";\n    FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n    FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n    FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n    FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n    FaasInvokedProviderValues = /* @__PURE__ */ createConstMap([\n      TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n      TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n      TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n      TMP_FAASINVOKEDPROVIDERVALUES_GCP\n    ]);\n    TMP_NETTRANSPORTVALUES_IP_TCP = \"ip_tcp\";\n    TMP_NETTRANSPORTVALUES_IP_UDP = \"ip_udp\";\n    TMP_NETTRANSPORTVALUES_IP = \"ip\";\n    TMP_NETTRANSPORTVALUES_UNIX = \"unix\";\n    TMP_NETTRANSPORTVALUES_PIPE = \"pipe\";\n    TMP_NETTRANSPORTVALUES_INPROC = \"inproc\";\n    TMP_NETTRANSPORTVALUES_OTHER = \"other\";\n    NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n    NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n    NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n    NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n    NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n    NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n    NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n    NetTransportValues = /* @__PURE__ */ createConstMap([\n      TMP_NETTRANSPORTVALUES_IP_TCP,\n      TMP_NETTRANSPORTVALUES_IP_UDP,\n      TMP_NETTRANSPORTVALUES_IP,\n      TMP_NETTRANSPORTVALUES_UNIX,\n      TMP_NETTRANSPORTVALUES_PIPE,\n      TMP_NETTRANSPORTVALUES_INPROC,\n      TMP_NETTRANSPORTVALUES_OTHER\n    ]);\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = \"wifi\";\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = \"wired\";\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = \"cell\";\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = \"unavailable\";\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = \"unknown\";\n    NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n    NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n    NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n    NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n    NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n    NetHostConnectionTypeValues = /* @__PURE__ */ createConstMap([\n      TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n      TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n      TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n      TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n      TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN\n    ]);\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = \"gprs\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = \"edge\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = \"umts\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = \"cdma\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = \"evdo_0\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = \"evdo_a\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = \"cdma2000_1xrtt\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = \"hsdpa\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = \"hsupa\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = \"hspa\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = \"iden\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = \"evdo_b\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = \"lte\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = \"ehrpd\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = \"hspap\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = \"gsm\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = \"td_scdma\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = \"iwlan\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = \"nr\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = \"nrnsa\";\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = \"lte_ca\";\n    NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n    NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n    NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n    NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n    NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n    NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n    NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n    NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n    NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n    NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n    NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n    NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n    NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n    NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n    NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n    NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n    NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n    NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n    NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n    NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n    NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n    NetHostConnectionSubtypeValues = /* @__PURE__ */ createConstMap([\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n      TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA\n    ]);\n    TMP_HTTPFLAVORVALUES_HTTP_1_0 = \"1.0\";\n    TMP_HTTPFLAVORVALUES_HTTP_1_1 = \"1.1\";\n    TMP_HTTPFLAVORVALUES_HTTP_2_0 = \"2.0\";\n    TMP_HTTPFLAVORVALUES_SPDY = \"SPDY\";\n    TMP_HTTPFLAVORVALUES_QUIC = \"QUIC\";\n    HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n    HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n    HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n    HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n    HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n    HttpFlavorValues = {\n      HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n      HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n      HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n      SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n      QUIC: TMP_HTTPFLAVORVALUES_QUIC\n    };\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = \"queue\";\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = \"topic\";\n    MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n    MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n    MessagingDestinationKindValues = /* @__PURE__ */ createConstMap([\n      TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n      TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC\n    ]);\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE = \"receive\";\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS = \"process\";\n    MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n    MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n    MessagingOperationValues = /* @__PURE__ */ createConstMap([\n      TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n      TMP_MESSAGINGOPERATIONVALUES_PROCESS\n    ]);\n    TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\n    TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\n    TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\n    TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\n    TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\n    TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\n    TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\n    TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\n    TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\n    TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\n    TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\n    TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\n    TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\n    TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\n    TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\n    TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\n    TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n    RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n    RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n    RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n    RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n    RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n    RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n    RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n    RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n    RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n    RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n    RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n    RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n    RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n    RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n    RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n    RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n    RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n    RpcGrpcStatusCodeValues = {\n      OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n      CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n      UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n      INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n      DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n      NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n      ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n      PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n      RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n      FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n      ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n      OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n      UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n      INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n      UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n      DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n      UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED\n    };\n    TMP_MESSAGETYPEVALUES_SENT = \"SENT\";\n    TMP_MESSAGETYPEVALUES_RECEIVED = \"RECEIVED\";\n    MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n    MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n    MessageTypeValues = /* @__PURE__ */ createConstMap([\n      TMP_MESSAGETYPEVALUES_SENT,\n      TMP_MESSAGETYPEVALUES_RECEIVED\n    ]);\n  }\n});\n\n// node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js\nvar init_trace2 = __esm({\n  \"node_modules/@opentelemetry/semantic-conventions/build/esm/trace/index.js\"() {\n    init_SemanticAttributes();\n  }\n});\n\n// node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\nvar TMP_CLOUD_PROVIDER, TMP_CLOUD_ACCOUNT_ID, TMP_CLOUD_REGION, TMP_CLOUD_AVAILABILITY_ZONE, TMP_CLOUD_PLATFORM, TMP_AWS_ECS_CONTAINER_ARN, TMP_AWS_ECS_CLUSTER_ARN, TMP_AWS_ECS_LAUNCHTYPE, TMP_AWS_ECS_TASK_ARN, TMP_AWS_ECS_TASK_FAMILY, TMP_AWS_ECS_TASK_REVISION, TMP_AWS_EKS_CLUSTER_ARN, TMP_AWS_LOG_GROUP_NAMES, TMP_AWS_LOG_GROUP_ARNS, TMP_AWS_LOG_STREAM_NAMES, TMP_AWS_LOG_STREAM_ARNS, TMP_CONTAINER_NAME, TMP_CONTAINER_ID, TMP_CONTAINER_RUNTIME, TMP_CONTAINER_IMAGE_NAME, TMP_CONTAINER_IMAGE_TAG, TMP_DEPLOYMENT_ENVIRONMENT, TMP_DEVICE_ID, TMP_DEVICE_MODEL_IDENTIFIER, TMP_DEVICE_MODEL_NAME, TMP_FAAS_NAME, TMP_FAAS_ID, TMP_FAAS_VERSION, TMP_FAAS_INSTANCE, TMP_FAAS_MAX_MEMORY, TMP_HOST_ID, TMP_HOST_NAME, TMP_HOST_TYPE, TMP_HOST_ARCH, TMP_HOST_IMAGE_NAME, TMP_HOST_IMAGE_ID, TMP_HOST_IMAGE_VERSION, TMP_K8S_CLUSTER_NAME, TMP_K8S_NODE_NAME, TMP_K8S_NODE_UID, TMP_K8S_NAMESPACE_NAME, TMP_K8S_POD_UID, TMP_K8S_POD_NAME, TMP_K8S_CONTAINER_NAME, TMP_K8S_REPLICASET_UID, TMP_K8S_REPLICASET_NAME, TMP_K8S_DEPLOYMENT_UID, TMP_K8S_DEPLOYMENT_NAME, TMP_K8S_STATEFULSET_UID, TMP_K8S_STATEFULSET_NAME, TMP_K8S_DAEMONSET_UID, TMP_K8S_DAEMONSET_NAME, TMP_K8S_JOB_UID, TMP_K8S_JOB_NAME, TMP_K8S_CRONJOB_UID, TMP_K8S_CRONJOB_NAME, TMP_OS_TYPE, TMP_OS_DESCRIPTION, TMP_OS_NAME, TMP_OS_VERSION, TMP_PROCESS_PID, TMP_PROCESS_EXECUTABLE_NAME, TMP_PROCESS_EXECUTABLE_PATH, TMP_PROCESS_COMMAND, TMP_PROCESS_COMMAND_LINE, TMP_PROCESS_COMMAND_ARGS, TMP_PROCESS_OWNER, TMP_PROCESS_RUNTIME_NAME, TMP_PROCESS_RUNTIME_VERSION, TMP_PROCESS_RUNTIME_DESCRIPTION, TMP_SERVICE_NAME, TMP_SERVICE_NAMESPACE, TMP_SERVICE_INSTANCE_ID, TMP_SERVICE_VERSION, TMP_TELEMETRY_SDK_NAME, TMP_TELEMETRY_SDK_LANGUAGE, TMP_TELEMETRY_SDK_VERSION, TMP_TELEMETRY_AUTO_VERSION, TMP_WEBENGINE_NAME, TMP_WEBENGINE_VERSION, TMP_WEBENGINE_DESCRIPTION, SEMRESATTRS_CLOUD_PROVIDER, SEMRESATTRS_CLOUD_ACCOUNT_ID, SEMRESATTRS_CLOUD_REGION, SEMRESATTRS_CLOUD_AVAILABILITY_ZONE, SEMRESATTRS_CLOUD_PLATFORM, SEMRESATTRS_AWS_ECS_CONTAINER_ARN, SEMRESATTRS_AWS_ECS_CLUSTER_ARN, SEMRESATTRS_AWS_ECS_LAUNCHTYPE, SEMRESATTRS_AWS_ECS_TASK_ARN, SEMRESATTRS_AWS_ECS_TASK_FAMILY, SEMRESATTRS_AWS_ECS_TASK_REVISION, SEMRESATTRS_AWS_EKS_CLUSTER_ARN, SEMRESATTRS_AWS_LOG_GROUP_NAMES, SEMRESATTRS_AWS_LOG_GROUP_ARNS, SEMRESATTRS_AWS_LOG_STREAM_NAMES, SEMRESATTRS_AWS_LOG_STREAM_ARNS, SEMRESATTRS_CONTAINER_NAME, SEMRESATTRS_CONTAINER_ID, SEMRESATTRS_CONTAINER_RUNTIME, SEMRESATTRS_CONTAINER_IMAGE_NAME, SEMRESATTRS_CONTAINER_IMAGE_TAG, SEMRESATTRS_DEPLOYMENT_ENVIRONMENT, SEMRESATTRS_DEVICE_ID, SEMRESATTRS_DEVICE_MODEL_IDENTIFIER, SEMRESATTRS_DEVICE_MODEL_NAME, SEMRESATTRS_FAAS_NAME, SEMRESATTRS_FAAS_ID, SEMRESATTRS_FAAS_VERSION, SEMRESATTRS_FAAS_INSTANCE, SEMRESATTRS_FAAS_MAX_MEMORY, SEMRESATTRS_HOST_ID, SEMRESATTRS_HOST_NAME, SEMRESATTRS_HOST_TYPE, SEMRESATTRS_HOST_ARCH, SEMRESATTRS_HOST_IMAGE_NAME, SEMRESATTRS_HOST_IMAGE_ID, SEMRESATTRS_HOST_IMAGE_VERSION, SEMRESATTRS_K8S_CLUSTER_NAME, SEMRESATTRS_K8S_NODE_NAME, SEMRESATTRS_K8S_NODE_UID, SEMRESATTRS_K8S_NAMESPACE_NAME, SEMRESATTRS_K8S_POD_UID, SEMRESATTRS_K8S_POD_NAME, SEMRESATTRS_K8S_CONTAINER_NAME, SEMRESATTRS_K8S_REPLICASET_UID, SEMRESATTRS_K8S_REPLICASET_NAME, SEMRESATTRS_K8S_DEPLOYMENT_UID, SEMRESATTRS_K8S_DEPLOYMENT_NAME, SEMRESATTRS_K8S_STATEFULSET_UID, SEMRESATTRS_K8S_STATEFULSET_NAME, SEMRESATTRS_K8S_DAEMONSET_UID, SEMRESATTRS_K8S_DAEMONSET_NAME, SEMRESATTRS_K8S_JOB_UID, SEMRESATTRS_K8S_JOB_NAME, SEMRESATTRS_K8S_CRONJOB_UID, SEMRESATTRS_K8S_CRONJOB_NAME, SEMRESATTRS_OS_TYPE, SEMRESATTRS_OS_DESCRIPTION, SEMRESATTRS_OS_NAME, SEMRESATTRS_OS_VERSION, SEMRESATTRS_PROCESS_PID, SEMRESATTRS_PROCESS_EXECUTABLE_NAME, SEMRESATTRS_PROCESS_EXECUTABLE_PATH, SEMRESATTRS_PROCESS_COMMAND, SEMRESATTRS_PROCESS_COMMAND_LINE, SEMRESATTRS_PROCESS_COMMAND_ARGS, SEMRESATTRS_PROCESS_OWNER, SEMRESATTRS_PROCESS_RUNTIME_NAME, SEMRESATTRS_PROCESS_RUNTIME_VERSION, SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION, SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_SERVICE_NAMESPACE, SEMRESATTRS_SERVICE_INSTANCE_ID, SEMRESATTRS_SERVICE_VERSION, SEMRESATTRS_TELEMETRY_SDK_NAME, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, SEMRESATTRS_TELEMETRY_SDK_VERSION, SEMRESATTRS_TELEMETRY_AUTO_VERSION, SEMRESATTRS_WEBENGINE_NAME, SEMRESATTRS_WEBENGINE_VERSION, SEMRESATTRS_WEBENGINE_DESCRIPTION, SemanticResourceAttributes, TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD, TMP_CLOUDPROVIDERVALUES_AWS, TMP_CLOUDPROVIDERVALUES_AZURE, TMP_CLOUDPROVIDERVALUES_GCP, CLOUDPROVIDERVALUES_ALIBABA_CLOUD, CLOUDPROVIDERVALUES_AWS, CLOUDPROVIDERVALUES_AZURE, CLOUDPROVIDERVALUES_GCP, CloudProviderValues, TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS, TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC, TMP_CLOUDPLATFORMVALUES_AWS_EC2, TMP_CLOUDPLATFORMVALUES_AWS_ECS, TMP_CLOUDPLATFORMVALUES_AWS_EKS, TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA, TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK, TMP_CLOUDPLATFORMVALUES_AZURE_VM, TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES, TMP_CLOUDPLATFORMVALUES_AZURE_AKS, TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS, TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE, TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE, TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN, TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE, TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS, TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE, CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS, CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC, CLOUDPLATFORMVALUES_AWS_EC2, CLOUDPLATFORMVALUES_AWS_ECS, CLOUDPLATFORMVALUES_AWS_EKS, CLOUDPLATFORMVALUES_AWS_LAMBDA, CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK, CLOUDPLATFORMVALUES_AZURE_VM, CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES, CLOUDPLATFORMVALUES_AZURE_AKS, CLOUDPLATFORMVALUES_AZURE_FUNCTIONS, CLOUDPLATFORMVALUES_AZURE_APP_SERVICE, CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE, CLOUDPLATFORMVALUES_GCP_CLOUD_RUN, CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE, CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS, CLOUDPLATFORMVALUES_GCP_APP_ENGINE, CloudPlatformValues, TMP_AWSECSLAUNCHTYPEVALUES_EC2, TMP_AWSECSLAUNCHTYPEVALUES_FARGATE, AWSECSLAUNCHTYPEVALUES_EC2, AWSECSLAUNCHTYPEVALUES_FARGATE, AwsEcsLaunchtypeValues, TMP_HOSTARCHVALUES_AMD64, TMP_HOSTARCHVALUES_ARM32, TMP_HOSTARCHVALUES_ARM64, TMP_HOSTARCHVALUES_IA64, TMP_HOSTARCHVALUES_PPC32, TMP_HOSTARCHVALUES_PPC64, TMP_HOSTARCHVALUES_X86, HOSTARCHVALUES_AMD64, HOSTARCHVALUES_ARM32, HOSTARCHVALUES_ARM64, HOSTARCHVALUES_IA64, HOSTARCHVALUES_PPC32, HOSTARCHVALUES_PPC64, HOSTARCHVALUES_X86, HostArchValues, TMP_OSTYPEVALUES_WINDOWS, TMP_OSTYPEVALUES_LINUX, TMP_OSTYPEVALUES_DARWIN, TMP_OSTYPEVALUES_FREEBSD, TMP_OSTYPEVALUES_NETBSD, TMP_OSTYPEVALUES_OPENBSD, TMP_OSTYPEVALUES_DRAGONFLYBSD, TMP_OSTYPEVALUES_HPUX, TMP_OSTYPEVALUES_AIX, TMP_OSTYPEVALUES_SOLARIS, TMP_OSTYPEVALUES_Z_OS, OSTYPEVALUES_WINDOWS, OSTYPEVALUES_LINUX, OSTYPEVALUES_DARWIN, OSTYPEVALUES_FREEBSD, OSTYPEVALUES_NETBSD, OSTYPEVALUES_OPENBSD, OSTYPEVALUES_DRAGONFLYBSD, OSTYPEVALUES_HPUX, OSTYPEVALUES_AIX, OSTYPEVALUES_SOLARIS, OSTYPEVALUES_Z_OS, OsTypeValues, TMP_TELEMETRYSDKLANGUAGEVALUES_CPP, TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET, TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG, TMP_TELEMETRYSDKLANGUAGEVALUES_GO, TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA, TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS, TMP_TELEMETRYSDKLANGUAGEVALUES_PHP, TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON, TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY, TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS, TELEMETRYSDKLANGUAGEVALUES_CPP, TELEMETRYSDKLANGUAGEVALUES_DOTNET, TELEMETRYSDKLANGUAGEVALUES_ERLANG, TELEMETRYSDKLANGUAGEVALUES_GO, TELEMETRYSDKLANGUAGEVALUES_JAVA, TELEMETRYSDKLANGUAGEVALUES_NODEJS, TELEMETRYSDKLANGUAGEVALUES_PHP, TELEMETRYSDKLANGUAGEVALUES_PYTHON, TELEMETRYSDKLANGUAGEVALUES_RUBY, TELEMETRYSDKLANGUAGEVALUES_WEBJS, TelemetrySdkLanguageValues;\nvar init_SemanticResourceAttributes = __esm({\n  \"node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\"() {\n    init_utils4();\n    TMP_CLOUD_PROVIDER = \"cloud.provider\";\n    TMP_CLOUD_ACCOUNT_ID = \"cloud.account.id\";\n    TMP_CLOUD_REGION = \"cloud.region\";\n    TMP_CLOUD_AVAILABILITY_ZONE = \"cloud.availability_zone\";\n    TMP_CLOUD_PLATFORM = \"cloud.platform\";\n    TMP_AWS_ECS_CONTAINER_ARN = \"aws.ecs.container.arn\";\n    TMP_AWS_ECS_CLUSTER_ARN = \"aws.ecs.cluster.arn\";\n    TMP_AWS_ECS_LAUNCHTYPE = \"aws.ecs.launchtype\";\n    TMP_AWS_ECS_TASK_ARN = \"aws.ecs.task.arn\";\n    TMP_AWS_ECS_TASK_FAMILY = \"aws.ecs.task.family\";\n    TMP_AWS_ECS_TASK_REVISION = \"aws.ecs.task.revision\";\n    TMP_AWS_EKS_CLUSTER_ARN = \"aws.eks.cluster.arn\";\n    TMP_AWS_LOG_GROUP_NAMES = \"aws.log.group.names\";\n    TMP_AWS_LOG_GROUP_ARNS = \"aws.log.group.arns\";\n    TMP_AWS_LOG_STREAM_NAMES = \"aws.log.stream.names\";\n    TMP_AWS_LOG_STREAM_ARNS = \"aws.log.stream.arns\";\n    TMP_CONTAINER_NAME = \"container.name\";\n    TMP_CONTAINER_ID = \"container.id\";\n    TMP_CONTAINER_RUNTIME = \"container.runtime\";\n    TMP_CONTAINER_IMAGE_NAME = \"container.image.name\";\n    TMP_CONTAINER_IMAGE_TAG = \"container.image.tag\";\n    TMP_DEPLOYMENT_ENVIRONMENT = \"deployment.environment\";\n    TMP_DEVICE_ID = \"device.id\";\n    TMP_DEVICE_MODEL_IDENTIFIER = \"device.model.identifier\";\n    TMP_DEVICE_MODEL_NAME = \"device.model.name\";\n    TMP_FAAS_NAME = \"faas.name\";\n    TMP_FAAS_ID = \"faas.id\";\n    TMP_FAAS_VERSION = \"faas.version\";\n    TMP_FAAS_INSTANCE = \"faas.instance\";\n    TMP_FAAS_MAX_MEMORY = \"faas.max_memory\";\n    TMP_HOST_ID = \"host.id\";\n    TMP_HOST_NAME = \"host.name\";\n    TMP_HOST_TYPE = \"host.type\";\n    TMP_HOST_ARCH = \"host.arch\";\n    TMP_HOST_IMAGE_NAME = \"host.image.name\";\n    TMP_HOST_IMAGE_ID = \"host.image.id\";\n    TMP_HOST_IMAGE_VERSION = \"host.image.version\";\n    TMP_K8S_CLUSTER_NAME = \"k8s.cluster.name\";\n    TMP_K8S_NODE_NAME = \"k8s.node.name\";\n    TMP_K8S_NODE_UID = \"k8s.node.uid\";\n    TMP_K8S_NAMESPACE_NAME = \"k8s.namespace.name\";\n    TMP_K8S_POD_UID = \"k8s.pod.uid\";\n    TMP_K8S_POD_NAME = \"k8s.pod.name\";\n    TMP_K8S_CONTAINER_NAME = \"k8s.container.name\";\n    TMP_K8S_REPLICASET_UID = \"k8s.replicaset.uid\";\n    TMP_K8S_REPLICASET_NAME = \"k8s.replicaset.name\";\n    TMP_K8S_DEPLOYMENT_UID = \"k8s.deployment.uid\";\n    TMP_K8S_DEPLOYMENT_NAME = \"k8s.deployment.name\";\n    TMP_K8S_STATEFULSET_UID = \"k8s.statefulset.uid\";\n    TMP_K8S_STATEFULSET_NAME = \"k8s.statefulset.name\";\n    TMP_K8S_DAEMONSET_UID = \"k8s.daemonset.uid\";\n    TMP_K8S_DAEMONSET_NAME = \"k8s.daemonset.name\";\n    TMP_K8S_JOB_UID = \"k8s.job.uid\";\n    TMP_K8S_JOB_NAME = \"k8s.job.name\";\n    TMP_K8S_CRONJOB_UID = \"k8s.cronjob.uid\";\n    TMP_K8S_CRONJOB_NAME = \"k8s.cronjob.name\";\n    TMP_OS_TYPE = \"os.type\";\n    TMP_OS_DESCRIPTION = \"os.description\";\n    TMP_OS_NAME = \"os.name\";\n    TMP_OS_VERSION = \"os.version\";\n    TMP_PROCESS_PID = \"process.pid\";\n    TMP_PROCESS_EXECUTABLE_NAME = \"process.executable.name\";\n    TMP_PROCESS_EXECUTABLE_PATH = \"process.executable.path\";\n    TMP_PROCESS_COMMAND = \"process.command\";\n    TMP_PROCESS_COMMAND_LINE = \"process.command_line\";\n    TMP_PROCESS_COMMAND_ARGS = \"process.command_args\";\n    TMP_PROCESS_OWNER = \"process.owner\";\n    TMP_PROCESS_RUNTIME_NAME = \"process.runtime.name\";\n    TMP_PROCESS_RUNTIME_VERSION = \"process.runtime.version\";\n    TMP_PROCESS_RUNTIME_DESCRIPTION = \"process.runtime.description\";\n    TMP_SERVICE_NAME = \"service.name\";\n    TMP_SERVICE_NAMESPACE = \"service.namespace\";\n    TMP_SERVICE_INSTANCE_ID = \"service.instance.id\";\n    TMP_SERVICE_VERSION = \"service.version\";\n    TMP_TELEMETRY_SDK_NAME = \"telemetry.sdk.name\";\n    TMP_TELEMETRY_SDK_LANGUAGE = \"telemetry.sdk.language\";\n    TMP_TELEMETRY_SDK_VERSION = \"telemetry.sdk.version\";\n    TMP_TELEMETRY_AUTO_VERSION = \"telemetry.auto.version\";\n    TMP_WEBENGINE_NAME = \"webengine.name\";\n    TMP_WEBENGINE_VERSION = \"webengine.version\";\n    TMP_WEBENGINE_DESCRIPTION = \"webengine.description\";\n    SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n    SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n    SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n    SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n    SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n    SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n    SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n    SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n    SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n    SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n    SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n    SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n    SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n    SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n    SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n    SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n    SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n    SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n    SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n    SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n    SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n    SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n    SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n    SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n    SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n    SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n    SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n    SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n    SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n    SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n    SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n    SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n    SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n    SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n    SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n    SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n    SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n    SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n    SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n    SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n    SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n    SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n    SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n    SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n    SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n    SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n    SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n    SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n    SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n    SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n    SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n    SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n    SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n    SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n    SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n    SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n    SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n    SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n    SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n    SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n    SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n    SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n    SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n    SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n    SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n    SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n    SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n    SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n    SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n    SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n    SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n    SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n    SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n    SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n    SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n    SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n    SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n    SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n    SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n    SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n    SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n    SemanticResourceAttributes = /* @__PURE__ */ createConstMap([\n      TMP_CLOUD_PROVIDER,\n      TMP_CLOUD_ACCOUNT_ID,\n      TMP_CLOUD_REGION,\n      TMP_CLOUD_AVAILABILITY_ZONE,\n      TMP_CLOUD_PLATFORM,\n      TMP_AWS_ECS_CONTAINER_ARN,\n      TMP_AWS_ECS_CLUSTER_ARN,\n      TMP_AWS_ECS_LAUNCHTYPE,\n      TMP_AWS_ECS_TASK_ARN,\n      TMP_AWS_ECS_TASK_FAMILY,\n      TMP_AWS_ECS_TASK_REVISION,\n      TMP_AWS_EKS_CLUSTER_ARN,\n      TMP_AWS_LOG_GROUP_NAMES,\n      TMP_AWS_LOG_GROUP_ARNS,\n      TMP_AWS_LOG_STREAM_NAMES,\n      TMP_AWS_LOG_STREAM_ARNS,\n      TMP_CONTAINER_NAME,\n      TMP_CONTAINER_ID,\n      TMP_CONTAINER_RUNTIME,\n      TMP_CONTAINER_IMAGE_NAME,\n      TMP_CONTAINER_IMAGE_TAG,\n      TMP_DEPLOYMENT_ENVIRONMENT,\n      TMP_DEVICE_ID,\n      TMP_DEVICE_MODEL_IDENTIFIER,\n      TMP_DEVICE_MODEL_NAME,\n      TMP_FAAS_NAME,\n      TMP_FAAS_ID,\n      TMP_FAAS_VERSION,\n      TMP_FAAS_INSTANCE,\n      TMP_FAAS_MAX_MEMORY,\n      TMP_HOST_ID,\n      TMP_HOST_NAME,\n      TMP_HOST_TYPE,\n      TMP_HOST_ARCH,\n      TMP_HOST_IMAGE_NAME,\n      TMP_HOST_IMAGE_ID,\n      TMP_HOST_IMAGE_VERSION,\n      TMP_K8S_CLUSTER_NAME,\n      TMP_K8S_NODE_NAME,\n      TMP_K8S_NODE_UID,\n      TMP_K8S_NAMESPACE_NAME,\n      TMP_K8S_POD_UID,\n      TMP_K8S_POD_NAME,\n      TMP_K8S_CONTAINER_NAME,\n      TMP_K8S_REPLICASET_UID,\n      TMP_K8S_REPLICASET_NAME,\n      TMP_K8S_DEPLOYMENT_UID,\n      TMP_K8S_DEPLOYMENT_NAME,\n      TMP_K8S_STATEFULSET_UID,\n      TMP_K8S_STATEFULSET_NAME,\n      TMP_K8S_DAEMONSET_UID,\n      TMP_K8S_DAEMONSET_NAME,\n      TMP_K8S_JOB_UID,\n      TMP_K8S_JOB_NAME,\n      TMP_K8S_CRONJOB_UID,\n      TMP_K8S_CRONJOB_NAME,\n      TMP_OS_TYPE,\n      TMP_OS_DESCRIPTION,\n      TMP_OS_NAME,\n      TMP_OS_VERSION,\n      TMP_PROCESS_PID,\n      TMP_PROCESS_EXECUTABLE_NAME,\n      TMP_PROCESS_EXECUTABLE_PATH,\n      TMP_PROCESS_COMMAND,\n      TMP_PROCESS_COMMAND_LINE,\n      TMP_PROCESS_COMMAND_ARGS,\n      TMP_PROCESS_OWNER,\n      TMP_PROCESS_RUNTIME_NAME,\n      TMP_PROCESS_RUNTIME_VERSION,\n      TMP_PROCESS_RUNTIME_DESCRIPTION,\n      TMP_SERVICE_NAME,\n      TMP_SERVICE_NAMESPACE,\n      TMP_SERVICE_INSTANCE_ID,\n      TMP_SERVICE_VERSION,\n      TMP_TELEMETRY_SDK_NAME,\n      TMP_TELEMETRY_SDK_LANGUAGE,\n      TMP_TELEMETRY_SDK_VERSION,\n      TMP_TELEMETRY_AUTO_VERSION,\n      TMP_WEBENGINE_NAME,\n      TMP_WEBENGINE_VERSION,\n      TMP_WEBENGINE_DESCRIPTION\n    ]);\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = \"alibaba_cloud\";\n    TMP_CLOUDPROVIDERVALUES_AWS = \"aws\";\n    TMP_CLOUDPROVIDERVALUES_AZURE = \"azure\";\n    TMP_CLOUDPROVIDERVALUES_GCP = \"gcp\";\n    CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n    CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n    CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n    CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n    CloudProviderValues = /* @__PURE__ */ createConstMap([\n      TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n      TMP_CLOUDPROVIDERVALUES_AWS,\n      TMP_CLOUDPROVIDERVALUES_AZURE,\n      TMP_CLOUDPROVIDERVALUES_GCP\n    ]);\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = \"alibaba_cloud_ecs\";\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = \"alibaba_cloud_fc\";\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2 = \"aws_ec2\";\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS = \"aws_ecs\";\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS = \"aws_eks\";\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = \"aws_lambda\";\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = \"aws_elastic_beanstalk\";\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM = \"azure_vm\";\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = \"azure_container_instances\";\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS = \"azure_aks\";\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = \"azure_functions\";\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = \"azure_app_service\";\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = \"gcp_compute_engine\";\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = \"gcp_cloud_run\";\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = \"gcp_kubernetes_engine\";\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = \"gcp_cloud_functions\";\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = \"gcp_app_engine\";\n    CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n    CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n    CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n    CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n    CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n    CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n    CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n    CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n    CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n    CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n    CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n    CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n    CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n    CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n    CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n    CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n    CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n    CloudPlatformValues = /* @__PURE__ */ createConstMap([\n      TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n      TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n      TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n      TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n      TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n      TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n      TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n      TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n      TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n      TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n      TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n      TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n      TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n      TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n      TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n      TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n      TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE\n    ]);\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2 = \"ec2\";\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = \"fargate\";\n    AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n    AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n    AwsEcsLaunchtypeValues = /* @__PURE__ */ createConstMap([\n      TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n      TMP_AWSECSLAUNCHTYPEVALUES_FARGATE\n    ]);\n    TMP_HOSTARCHVALUES_AMD64 = \"amd64\";\n    TMP_HOSTARCHVALUES_ARM32 = \"arm32\";\n    TMP_HOSTARCHVALUES_ARM64 = \"arm64\";\n    TMP_HOSTARCHVALUES_IA64 = \"ia64\";\n    TMP_HOSTARCHVALUES_PPC32 = \"ppc32\";\n    TMP_HOSTARCHVALUES_PPC64 = \"ppc64\";\n    TMP_HOSTARCHVALUES_X86 = \"x86\";\n    HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n    HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n    HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n    HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n    HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n    HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n    HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n    HostArchValues = /* @__PURE__ */ createConstMap([\n      TMP_HOSTARCHVALUES_AMD64,\n      TMP_HOSTARCHVALUES_ARM32,\n      TMP_HOSTARCHVALUES_ARM64,\n      TMP_HOSTARCHVALUES_IA64,\n      TMP_HOSTARCHVALUES_PPC32,\n      TMP_HOSTARCHVALUES_PPC64,\n      TMP_HOSTARCHVALUES_X86\n    ]);\n    TMP_OSTYPEVALUES_WINDOWS = \"windows\";\n    TMP_OSTYPEVALUES_LINUX = \"linux\";\n    TMP_OSTYPEVALUES_DARWIN = \"darwin\";\n    TMP_OSTYPEVALUES_FREEBSD = \"freebsd\";\n    TMP_OSTYPEVALUES_NETBSD = \"netbsd\";\n    TMP_OSTYPEVALUES_OPENBSD = \"openbsd\";\n    TMP_OSTYPEVALUES_DRAGONFLYBSD = \"dragonflybsd\";\n    TMP_OSTYPEVALUES_HPUX = \"hpux\";\n    TMP_OSTYPEVALUES_AIX = \"aix\";\n    TMP_OSTYPEVALUES_SOLARIS = \"solaris\";\n    TMP_OSTYPEVALUES_Z_OS = \"z_os\";\n    OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n    OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n    OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n    OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n    OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n    OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n    OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n    OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n    OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n    OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n    OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n    OsTypeValues = /* @__PURE__ */ createConstMap([\n      TMP_OSTYPEVALUES_WINDOWS,\n      TMP_OSTYPEVALUES_LINUX,\n      TMP_OSTYPEVALUES_DARWIN,\n      TMP_OSTYPEVALUES_FREEBSD,\n      TMP_OSTYPEVALUES_NETBSD,\n      TMP_OSTYPEVALUES_OPENBSD,\n      TMP_OSTYPEVALUES_DRAGONFLYBSD,\n      TMP_OSTYPEVALUES_HPUX,\n      TMP_OSTYPEVALUES_AIX,\n      TMP_OSTYPEVALUES_SOLARIS,\n      TMP_OSTYPEVALUES_Z_OS\n    ]);\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = \"cpp\";\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = \"dotnet\";\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = \"erlang\";\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO = \"go\";\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = \"java\";\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = \"nodejs\";\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = \"php\";\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = \"python\";\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = \"ruby\";\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = \"webjs\";\n    TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n    TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n    TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n    TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n    TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n    TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n    TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n    TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n    TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n    TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n    TelemetrySdkLanguageValues = /* @__PURE__ */ createConstMap([\n      TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n      TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n      TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n      TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n      TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n      TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n      TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n      TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n      TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n      TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS\n    ]);\n  }\n});\n\n// node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js\nvar init_resource = __esm({\n  \"node_modules/@opentelemetry/semantic-conventions/build/esm/resource/index.js\"() {\n    init_SemanticResourceAttributes();\n  }\n});\n\n// node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\nvar esm_exports2 = {};\n__export(esm_exports2, {\n  AWSECSLAUNCHTYPEVALUES_EC2: () => AWSECSLAUNCHTYPEVALUES_EC2,\n  AWSECSLAUNCHTYPEVALUES_FARGATE: () => AWSECSLAUNCHTYPEVALUES_FARGATE,\n  AwsEcsLaunchtypeValues: () => AwsEcsLaunchtypeValues,\n  CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS: () => CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n  CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC: () => CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n  CLOUDPLATFORMVALUES_AWS_EC2: () => CLOUDPLATFORMVALUES_AWS_EC2,\n  CLOUDPLATFORMVALUES_AWS_ECS: () => CLOUDPLATFORMVALUES_AWS_ECS,\n  CLOUDPLATFORMVALUES_AWS_EKS: () => CLOUDPLATFORMVALUES_AWS_EKS,\n  CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK: () => CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n  CLOUDPLATFORMVALUES_AWS_LAMBDA: () => CLOUDPLATFORMVALUES_AWS_LAMBDA,\n  CLOUDPLATFORMVALUES_AZURE_AKS: () => CLOUDPLATFORMVALUES_AZURE_AKS,\n  CLOUDPLATFORMVALUES_AZURE_APP_SERVICE: () => CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n  CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES: () => CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n  CLOUDPLATFORMVALUES_AZURE_FUNCTIONS: () => CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n  CLOUDPLATFORMVALUES_AZURE_VM: () => CLOUDPLATFORMVALUES_AZURE_VM,\n  CLOUDPLATFORMVALUES_GCP_APP_ENGINE: () => CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n  CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS: () => CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n  CLOUDPLATFORMVALUES_GCP_CLOUD_RUN: () => CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n  CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE: () => CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n  CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE: () => CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n  CLOUDPROVIDERVALUES_ALIBABA_CLOUD: () => CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n  CLOUDPROVIDERVALUES_AWS: () => CLOUDPROVIDERVALUES_AWS,\n  CLOUDPROVIDERVALUES_AZURE: () => CLOUDPROVIDERVALUES_AZURE,\n  CLOUDPROVIDERVALUES_GCP: () => CLOUDPROVIDERVALUES_GCP,\n  CloudPlatformValues: () => CloudPlatformValues,\n  CloudProviderValues: () => CloudProviderValues,\n  DBCASSANDRACONSISTENCYLEVELVALUES_ALL: () => DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n  DBCASSANDRACONSISTENCYLEVELVALUES_ANY: () => DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n  DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM: () => DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n  DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE: () => DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n  DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM: () => DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n  DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL: () => DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n  DBCASSANDRACONSISTENCYLEVELVALUES_ONE: () => DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n  DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM: () => DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n  DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL: () => DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n  DBCASSANDRACONSISTENCYLEVELVALUES_THREE: () => DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n  DBCASSANDRACONSISTENCYLEVELVALUES_TWO: () => DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n  DBSYSTEMVALUES_ADABAS: () => DBSYSTEMVALUES_ADABAS,\n  DBSYSTEMVALUES_CACHE: () => DBSYSTEMVALUES_CACHE,\n  DBSYSTEMVALUES_CASSANDRA: () => DBSYSTEMVALUES_CASSANDRA,\n  DBSYSTEMVALUES_CLOUDSCAPE: () => DBSYSTEMVALUES_CLOUDSCAPE,\n  DBSYSTEMVALUES_COCKROACHDB: () => DBSYSTEMVALUES_COCKROACHDB,\n  DBSYSTEMVALUES_COLDFUSION: () => DBSYSTEMVALUES_COLDFUSION,\n  DBSYSTEMVALUES_COSMOSDB: () => DBSYSTEMVALUES_COSMOSDB,\n  DBSYSTEMVALUES_COUCHBASE: () => DBSYSTEMVALUES_COUCHBASE,\n  DBSYSTEMVALUES_COUCHDB: () => DBSYSTEMVALUES_COUCHDB,\n  DBSYSTEMVALUES_DB2: () => DBSYSTEMVALUES_DB2,\n  DBSYSTEMVALUES_DERBY: () => DBSYSTEMVALUES_DERBY,\n  DBSYSTEMVALUES_DYNAMODB: () => DBSYSTEMVALUES_DYNAMODB,\n  DBSYSTEMVALUES_EDB: () => DBSYSTEMVALUES_EDB,\n  DBSYSTEMVALUES_ELASTICSEARCH: () => DBSYSTEMVALUES_ELASTICSEARCH,\n  DBSYSTEMVALUES_FILEMAKER: () => DBSYSTEMVALUES_FILEMAKER,\n  DBSYSTEMVALUES_FIREBIRD: () => DBSYSTEMVALUES_FIREBIRD,\n  DBSYSTEMVALUES_FIRSTSQL: () => DBSYSTEMVALUES_FIRSTSQL,\n  DBSYSTEMVALUES_GEODE: () => DBSYSTEMVALUES_GEODE,\n  DBSYSTEMVALUES_H2: () => DBSYSTEMVALUES_H2,\n  DBSYSTEMVALUES_HANADB: () => DBSYSTEMVALUES_HANADB,\n  DBSYSTEMVALUES_HBASE: () => DBSYSTEMVALUES_HBASE,\n  DBSYSTEMVALUES_HIVE: () => DBSYSTEMVALUES_HIVE,\n  DBSYSTEMVALUES_HSQLDB: () => DBSYSTEMVALUES_HSQLDB,\n  DBSYSTEMVALUES_INFORMIX: () => DBSYSTEMVALUES_INFORMIX,\n  DBSYSTEMVALUES_INGRES: () => DBSYSTEMVALUES_INGRES,\n  DBSYSTEMVALUES_INSTANTDB: () => DBSYSTEMVALUES_INSTANTDB,\n  DBSYSTEMVALUES_INTERBASE: () => DBSYSTEMVALUES_INTERBASE,\n  DBSYSTEMVALUES_MARIADB: () => DBSYSTEMVALUES_MARIADB,\n  DBSYSTEMVALUES_MAXDB: () => DBSYSTEMVALUES_MAXDB,\n  DBSYSTEMVALUES_MEMCACHED: () => DBSYSTEMVALUES_MEMCACHED,\n  DBSYSTEMVALUES_MONGODB: () => DBSYSTEMVALUES_MONGODB,\n  DBSYSTEMVALUES_MSSQL: () => DBSYSTEMVALUES_MSSQL,\n  DBSYSTEMVALUES_MYSQL: () => DBSYSTEMVALUES_MYSQL,\n  DBSYSTEMVALUES_NEO4J: () => DBSYSTEMVALUES_NEO4J,\n  DBSYSTEMVALUES_NETEZZA: () => DBSYSTEMVALUES_NETEZZA,\n  DBSYSTEMVALUES_ORACLE: () => DBSYSTEMVALUES_ORACLE,\n  DBSYSTEMVALUES_OTHER_SQL: () => DBSYSTEMVALUES_OTHER_SQL,\n  DBSYSTEMVALUES_PERVASIVE: () => DBSYSTEMVALUES_PERVASIVE,\n  DBSYSTEMVALUES_POINTBASE: () => DBSYSTEMVALUES_POINTBASE,\n  DBSYSTEMVALUES_POSTGRESQL: () => DBSYSTEMVALUES_POSTGRESQL,\n  DBSYSTEMVALUES_PROGRESS: () => DBSYSTEMVALUES_PROGRESS,\n  DBSYSTEMVALUES_REDIS: () => DBSYSTEMVALUES_REDIS,\n  DBSYSTEMVALUES_REDSHIFT: () => DBSYSTEMVALUES_REDSHIFT,\n  DBSYSTEMVALUES_SQLITE: () => DBSYSTEMVALUES_SQLITE,\n  DBSYSTEMVALUES_SYBASE: () => DBSYSTEMVALUES_SYBASE,\n  DBSYSTEMVALUES_TERADATA: () => DBSYSTEMVALUES_TERADATA,\n  DBSYSTEMVALUES_VERTICA: () => DBSYSTEMVALUES_VERTICA,\n  DbCassandraConsistencyLevelValues: () => DbCassandraConsistencyLevelValues,\n  DbSystemValues: () => DbSystemValues,\n  FAASDOCUMENTOPERATIONVALUES_DELETE: () => FAASDOCUMENTOPERATIONVALUES_DELETE,\n  FAASDOCUMENTOPERATIONVALUES_EDIT: () => FAASDOCUMENTOPERATIONVALUES_EDIT,\n  FAASDOCUMENTOPERATIONVALUES_INSERT: () => FAASDOCUMENTOPERATIONVALUES_INSERT,\n  FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD: () => FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n  FAASINVOKEDPROVIDERVALUES_AWS: () => FAASINVOKEDPROVIDERVALUES_AWS,\n  FAASINVOKEDPROVIDERVALUES_AZURE: () => FAASINVOKEDPROVIDERVALUES_AZURE,\n  FAASINVOKEDPROVIDERVALUES_GCP: () => FAASINVOKEDPROVIDERVALUES_GCP,\n  FAASTRIGGERVALUES_DATASOURCE: () => FAASTRIGGERVALUES_DATASOURCE,\n  FAASTRIGGERVALUES_HTTP: () => FAASTRIGGERVALUES_HTTP,\n  FAASTRIGGERVALUES_OTHER: () => FAASTRIGGERVALUES_OTHER,\n  FAASTRIGGERVALUES_PUBSUB: () => FAASTRIGGERVALUES_PUBSUB,\n  FAASTRIGGERVALUES_TIMER: () => FAASTRIGGERVALUES_TIMER,\n  FaasDocumentOperationValues: () => FaasDocumentOperationValues,\n  FaasInvokedProviderValues: () => FaasInvokedProviderValues,\n  FaasTriggerValues: () => FaasTriggerValues,\n  HOSTARCHVALUES_AMD64: () => HOSTARCHVALUES_AMD64,\n  HOSTARCHVALUES_ARM32: () => HOSTARCHVALUES_ARM32,\n  HOSTARCHVALUES_ARM64: () => HOSTARCHVALUES_ARM64,\n  HOSTARCHVALUES_IA64: () => HOSTARCHVALUES_IA64,\n  HOSTARCHVALUES_PPC32: () => HOSTARCHVALUES_PPC32,\n  HOSTARCHVALUES_PPC64: () => HOSTARCHVALUES_PPC64,\n  HOSTARCHVALUES_X86: () => HOSTARCHVALUES_X86,\n  HTTPFLAVORVALUES_HTTP_1_0: () => HTTPFLAVORVALUES_HTTP_1_0,\n  HTTPFLAVORVALUES_HTTP_1_1: () => HTTPFLAVORVALUES_HTTP_1_1,\n  HTTPFLAVORVALUES_HTTP_2_0: () => HTTPFLAVORVALUES_HTTP_2_0,\n  HTTPFLAVORVALUES_QUIC: () => HTTPFLAVORVALUES_QUIC,\n  HTTPFLAVORVALUES_SPDY: () => HTTPFLAVORVALUES_SPDY,\n  HostArchValues: () => HostArchValues,\n  HttpFlavorValues: () => HttpFlavorValues,\n  MESSAGETYPEVALUES_RECEIVED: () => MESSAGETYPEVALUES_RECEIVED,\n  MESSAGETYPEVALUES_SENT: () => MESSAGETYPEVALUES_SENT,\n  MESSAGINGDESTINATIONKINDVALUES_QUEUE: () => MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n  MESSAGINGDESTINATIONKINDVALUES_TOPIC: () => MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n  MESSAGINGOPERATIONVALUES_PROCESS: () => MESSAGINGOPERATIONVALUES_PROCESS,\n  MESSAGINGOPERATIONVALUES_RECEIVE: () => MESSAGINGOPERATIONVALUES_RECEIVE,\n  MessageTypeValues: () => MessageTypeValues,\n  MessagingDestinationKindValues: () => MessagingDestinationKindValues,\n  MessagingOperationValues: () => MessagingOperationValues,\n  NETHOSTCONNECTIONSUBTYPEVALUES_CDMA: () => NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n  NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT: () => NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n  NETHOSTCONNECTIONSUBTYPEVALUES_EDGE: () => NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n  NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD: () => NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n  NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0: () => NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n  NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A: () => NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n  NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B: () => NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n  NETHOSTCONNECTIONSUBTYPEVALUES_GPRS: () => NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n  NETHOSTCONNECTIONSUBTYPEVALUES_GSM: () => NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n  NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA: () => NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n  NETHOSTCONNECTIONSUBTYPEVALUES_HSPA: () => NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n  NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP: () => NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n  NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA: () => NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n  NETHOSTCONNECTIONSUBTYPEVALUES_IDEN: () => NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n  NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN: () => NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n  NETHOSTCONNECTIONSUBTYPEVALUES_LTE: () => NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n  NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA: () => NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n  NETHOSTCONNECTIONSUBTYPEVALUES_NR: () => NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n  NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA: () => NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n  NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA: () => NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n  NETHOSTCONNECTIONSUBTYPEVALUES_UMTS: () => NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n  NETHOSTCONNECTIONTYPEVALUES_CELL: () => NETHOSTCONNECTIONTYPEVALUES_CELL,\n  NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE: () => NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n  NETHOSTCONNECTIONTYPEVALUES_UNKNOWN: () => NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n  NETHOSTCONNECTIONTYPEVALUES_WIFI: () => NETHOSTCONNECTIONTYPEVALUES_WIFI,\n  NETHOSTCONNECTIONTYPEVALUES_WIRED: () => NETHOSTCONNECTIONTYPEVALUES_WIRED,\n  NETTRANSPORTVALUES_INPROC: () => NETTRANSPORTVALUES_INPROC,\n  NETTRANSPORTVALUES_IP: () => NETTRANSPORTVALUES_IP,\n  NETTRANSPORTVALUES_IP_TCP: () => NETTRANSPORTVALUES_IP_TCP,\n  NETTRANSPORTVALUES_IP_UDP: () => NETTRANSPORTVALUES_IP_UDP,\n  NETTRANSPORTVALUES_OTHER: () => NETTRANSPORTVALUES_OTHER,\n  NETTRANSPORTVALUES_PIPE: () => NETTRANSPORTVALUES_PIPE,\n  NETTRANSPORTVALUES_UNIX: () => NETTRANSPORTVALUES_UNIX,\n  NetHostConnectionSubtypeValues: () => NetHostConnectionSubtypeValues,\n  NetHostConnectionTypeValues: () => NetHostConnectionTypeValues,\n  NetTransportValues: () => NetTransportValues,\n  OSTYPEVALUES_AIX: () => OSTYPEVALUES_AIX,\n  OSTYPEVALUES_DARWIN: () => OSTYPEVALUES_DARWIN,\n  OSTYPEVALUES_DRAGONFLYBSD: () => OSTYPEVALUES_DRAGONFLYBSD,\n  OSTYPEVALUES_FREEBSD: () => OSTYPEVALUES_FREEBSD,\n  OSTYPEVALUES_HPUX: () => OSTYPEVALUES_HPUX,\n  OSTYPEVALUES_LINUX: () => OSTYPEVALUES_LINUX,\n  OSTYPEVALUES_NETBSD: () => OSTYPEVALUES_NETBSD,\n  OSTYPEVALUES_OPENBSD: () => OSTYPEVALUES_OPENBSD,\n  OSTYPEVALUES_SOLARIS: () => OSTYPEVALUES_SOLARIS,\n  OSTYPEVALUES_WINDOWS: () => OSTYPEVALUES_WINDOWS,\n  OSTYPEVALUES_Z_OS: () => OSTYPEVALUES_Z_OS,\n  OsTypeValues: () => OsTypeValues,\n  RPCGRPCSTATUSCODEVALUES_ABORTED: () => RPCGRPCSTATUSCODEVALUES_ABORTED,\n  RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS: () => RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n  RPCGRPCSTATUSCODEVALUES_CANCELLED: () => RPCGRPCSTATUSCODEVALUES_CANCELLED,\n  RPCGRPCSTATUSCODEVALUES_DATA_LOSS: () => RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n  RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED: () => RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n  RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION: () => RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n  RPCGRPCSTATUSCODEVALUES_INTERNAL: () => RPCGRPCSTATUSCODEVALUES_INTERNAL,\n  RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT: () => RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n  RPCGRPCSTATUSCODEVALUES_NOT_FOUND: () => RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n  RPCGRPCSTATUSCODEVALUES_OK: () => RPCGRPCSTATUSCODEVALUES_OK,\n  RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE: () => RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n  RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED: () => RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n  RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED: () => RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n  RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED: () => RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n  RPCGRPCSTATUSCODEVALUES_UNAVAILABLE: () => RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n  RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED: () => RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n  RPCGRPCSTATUSCODEVALUES_UNKNOWN: () => RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n  RpcGrpcStatusCodeValues: () => RpcGrpcStatusCodeValues,\n  SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET: () => SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n  SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: () => SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n  SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ: () => SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ,\n  SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY: () => SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY,\n  SEMATTRS_AWS_DYNAMODB_COUNT: () => SEMATTRS_AWS_DYNAMODB_COUNT,\n  SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE: () => SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n  SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: () => SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n  SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: () => SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n  SEMATTRS_AWS_DYNAMODB_INDEX_NAME: () => SEMATTRS_AWS_DYNAMODB_INDEX_NAME,\n  SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS: () => SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n  SEMATTRS_AWS_DYNAMODB_LIMIT: () => SEMATTRS_AWS_DYNAMODB_LIMIT,\n  SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: () => SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n  SEMATTRS_AWS_DYNAMODB_PROJECTION: () => SEMATTRS_AWS_DYNAMODB_PROJECTION,\n  SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: () => SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n  SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: () => SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n  SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT: () => SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT,\n  SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD: () => SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD,\n  SEMATTRS_AWS_DYNAMODB_SEGMENT: () => SEMATTRS_AWS_DYNAMODB_SEGMENT,\n  SEMATTRS_AWS_DYNAMODB_SELECT: () => SEMATTRS_AWS_DYNAMODB_SELECT,\n  SEMATTRS_AWS_DYNAMODB_TABLE_COUNT: () => SEMATTRS_AWS_DYNAMODB_TABLE_COUNT,\n  SEMATTRS_AWS_DYNAMODB_TABLE_NAMES: () => SEMATTRS_AWS_DYNAMODB_TABLE_NAMES,\n  SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS: () => SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS,\n  SEMATTRS_AWS_LAMBDA_INVOKED_ARN: () => SEMATTRS_AWS_LAMBDA_INVOKED_ARN,\n  SEMATTRS_CODE_FILEPATH: () => SEMATTRS_CODE_FILEPATH,\n  SEMATTRS_CODE_FUNCTION: () => SEMATTRS_CODE_FUNCTION,\n  SEMATTRS_CODE_LINENO: () => SEMATTRS_CODE_LINENO,\n  SEMATTRS_CODE_NAMESPACE: () => SEMATTRS_CODE_NAMESPACE,\n  SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL: () => SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL,\n  SEMATTRS_DB_CASSANDRA_COORDINATOR_DC: () => SEMATTRS_DB_CASSANDRA_COORDINATOR_DC,\n  SEMATTRS_DB_CASSANDRA_COORDINATOR_ID: () => SEMATTRS_DB_CASSANDRA_COORDINATOR_ID,\n  SEMATTRS_DB_CASSANDRA_IDEMPOTENCE: () => SEMATTRS_DB_CASSANDRA_IDEMPOTENCE,\n  SEMATTRS_DB_CASSANDRA_KEYSPACE: () => SEMATTRS_DB_CASSANDRA_KEYSPACE,\n  SEMATTRS_DB_CASSANDRA_PAGE_SIZE: () => SEMATTRS_DB_CASSANDRA_PAGE_SIZE,\n  SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: () => SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n  SEMATTRS_DB_CASSANDRA_TABLE: () => SEMATTRS_DB_CASSANDRA_TABLE,\n  SEMATTRS_DB_CONNECTION_STRING: () => SEMATTRS_DB_CONNECTION_STRING,\n  SEMATTRS_DB_HBASE_NAMESPACE: () => SEMATTRS_DB_HBASE_NAMESPACE,\n  SEMATTRS_DB_JDBC_DRIVER_CLASSNAME: () => SEMATTRS_DB_JDBC_DRIVER_CLASSNAME,\n  SEMATTRS_DB_MONGODB_COLLECTION: () => SEMATTRS_DB_MONGODB_COLLECTION,\n  SEMATTRS_DB_MSSQL_INSTANCE_NAME: () => SEMATTRS_DB_MSSQL_INSTANCE_NAME,\n  SEMATTRS_DB_NAME: () => SEMATTRS_DB_NAME,\n  SEMATTRS_DB_OPERATION: () => SEMATTRS_DB_OPERATION,\n  SEMATTRS_DB_REDIS_DATABASE_INDEX: () => SEMATTRS_DB_REDIS_DATABASE_INDEX,\n  SEMATTRS_DB_SQL_TABLE: () => SEMATTRS_DB_SQL_TABLE,\n  SEMATTRS_DB_STATEMENT: () => SEMATTRS_DB_STATEMENT,\n  SEMATTRS_DB_SYSTEM: () => SEMATTRS_DB_SYSTEM,\n  SEMATTRS_DB_USER: () => SEMATTRS_DB_USER,\n  SEMATTRS_ENDUSER_ID: () => SEMATTRS_ENDUSER_ID,\n  SEMATTRS_ENDUSER_ROLE: () => SEMATTRS_ENDUSER_ROLE,\n  SEMATTRS_ENDUSER_SCOPE: () => SEMATTRS_ENDUSER_SCOPE,\n  SEMATTRS_EXCEPTION_ESCAPED: () => SEMATTRS_EXCEPTION_ESCAPED,\n  SEMATTRS_EXCEPTION_MESSAGE: () => SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_STACKTRACE: () => SEMATTRS_EXCEPTION_STACKTRACE,\n  SEMATTRS_EXCEPTION_TYPE: () => SEMATTRS_EXCEPTION_TYPE,\n  SEMATTRS_FAAS_COLDSTART: () => SEMATTRS_FAAS_COLDSTART,\n  SEMATTRS_FAAS_CRON: () => SEMATTRS_FAAS_CRON,\n  SEMATTRS_FAAS_DOCUMENT_COLLECTION: () => SEMATTRS_FAAS_DOCUMENT_COLLECTION,\n  SEMATTRS_FAAS_DOCUMENT_NAME: () => SEMATTRS_FAAS_DOCUMENT_NAME,\n  SEMATTRS_FAAS_DOCUMENT_OPERATION: () => SEMATTRS_FAAS_DOCUMENT_OPERATION,\n  SEMATTRS_FAAS_DOCUMENT_TIME: () => SEMATTRS_FAAS_DOCUMENT_TIME,\n  SEMATTRS_FAAS_EXECUTION: () => SEMATTRS_FAAS_EXECUTION,\n  SEMATTRS_FAAS_INVOKED_NAME: () => SEMATTRS_FAAS_INVOKED_NAME,\n  SEMATTRS_FAAS_INVOKED_PROVIDER: () => SEMATTRS_FAAS_INVOKED_PROVIDER,\n  SEMATTRS_FAAS_INVOKED_REGION: () => SEMATTRS_FAAS_INVOKED_REGION,\n  SEMATTRS_FAAS_TIME: () => SEMATTRS_FAAS_TIME,\n  SEMATTRS_FAAS_TRIGGER: () => SEMATTRS_FAAS_TRIGGER,\n  SEMATTRS_HTTP_CLIENT_IP: () => SEMATTRS_HTTP_CLIENT_IP,\n  SEMATTRS_HTTP_FLAVOR: () => SEMATTRS_HTTP_FLAVOR,\n  SEMATTRS_HTTP_HOST: () => SEMATTRS_HTTP_HOST,\n  SEMATTRS_HTTP_METHOD: () => SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH: () => SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH,\n  SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: () => SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n  SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH: () => SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH,\n  SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: () => SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n  SEMATTRS_HTTP_ROUTE: () => SEMATTRS_HTTP_ROUTE,\n  SEMATTRS_HTTP_SCHEME: () => SEMATTRS_HTTP_SCHEME,\n  SEMATTRS_HTTP_SERVER_NAME: () => SEMATTRS_HTTP_SERVER_NAME,\n  SEMATTRS_HTTP_STATUS_CODE: () => SEMATTRS_HTTP_STATUS_CODE,\n  SEMATTRS_HTTP_TARGET: () => SEMATTRS_HTTP_TARGET,\n  SEMATTRS_HTTP_URL: () => SEMATTRS_HTTP_URL,\n  SEMATTRS_HTTP_USER_AGENT: () => SEMATTRS_HTTP_USER_AGENT,\n  SEMATTRS_MESSAGE_COMPRESSED_SIZE: () => SEMATTRS_MESSAGE_COMPRESSED_SIZE,\n  SEMATTRS_MESSAGE_ID: () => SEMATTRS_MESSAGE_ID,\n  SEMATTRS_MESSAGE_TYPE: () => SEMATTRS_MESSAGE_TYPE,\n  SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE: () => SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE,\n  SEMATTRS_MESSAGING_CONSUMER_ID: () => SEMATTRS_MESSAGING_CONSUMER_ID,\n  SEMATTRS_MESSAGING_CONVERSATION_ID: () => SEMATTRS_MESSAGING_CONVERSATION_ID,\n  SEMATTRS_MESSAGING_DESTINATION: () => SEMATTRS_MESSAGING_DESTINATION,\n  SEMATTRS_MESSAGING_DESTINATION_KIND: () => SEMATTRS_MESSAGING_DESTINATION_KIND,\n  SEMATTRS_MESSAGING_KAFKA_CLIENT_ID: () => SEMATTRS_MESSAGING_KAFKA_CLIENT_ID,\n  SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP: () => SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP,\n  SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY: () => SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY,\n  SEMATTRS_MESSAGING_KAFKA_PARTITION: () => SEMATTRS_MESSAGING_KAFKA_PARTITION,\n  SEMATTRS_MESSAGING_KAFKA_TOMBSTONE: () => SEMATTRS_MESSAGING_KAFKA_TOMBSTONE,\n  SEMATTRS_MESSAGING_MESSAGE_ID: () => SEMATTRS_MESSAGING_MESSAGE_ID,\n  SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: () => SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n  SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: () => SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n  SEMATTRS_MESSAGING_OPERATION: () => SEMATTRS_MESSAGING_OPERATION,\n  SEMATTRS_MESSAGING_PROTOCOL: () => SEMATTRS_MESSAGING_PROTOCOL,\n  SEMATTRS_MESSAGING_PROTOCOL_VERSION: () => SEMATTRS_MESSAGING_PROTOCOL_VERSION,\n  SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY: () => SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY,\n  SEMATTRS_MESSAGING_SYSTEM: () => SEMATTRS_MESSAGING_SYSTEM,\n  SEMATTRS_MESSAGING_TEMP_DESTINATION: () => SEMATTRS_MESSAGING_TEMP_DESTINATION,\n  SEMATTRS_MESSAGING_URL: () => SEMATTRS_MESSAGING_URL,\n  SEMATTRS_NET_HOST_CARRIER_ICC: () => SEMATTRS_NET_HOST_CARRIER_ICC,\n  SEMATTRS_NET_HOST_CARRIER_MCC: () => SEMATTRS_NET_HOST_CARRIER_MCC,\n  SEMATTRS_NET_HOST_CARRIER_MNC: () => SEMATTRS_NET_HOST_CARRIER_MNC,\n  SEMATTRS_NET_HOST_CARRIER_NAME: () => SEMATTRS_NET_HOST_CARRIER_NAME,\n  SEMATTRS_NET_HOST_CONNECTION_SUBTYPE: () => SEMATTRS_NET_HOST_CONNECTION_SUBTYPE,\n  SEMATTRS_NET_HOST_CONNECTION_TYPE: () => SEMATTRS_NET_HOST_CONNECTION_TYPE,\n  SEMATTRS_NET_HOST_IP: () => SEMATTRS_NET_HOST_IP,\n  SEMATTRS_NET_HOST_NAME: () => SEMATTRS_NET_HOST_NAME,\n  SEMATTRS_NET_HOST_PORT: () => SEMATTRS_NET_HOST_PORT,\n  SEMATTRS_NET_PEER_IP: () => SEMATTRS_NET_PEER_IP,\n  SEMATTRS_NET_PEER_NAME: () => SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_PORT: () => SEMATTRS_NET_PEER_PORT,\n  SEMATTRS_NET_TRANSPORT: () => SEMATTRS_NET_TRANSPORT,\n  SEMATTRS_PEER_SERVICE: () => SEMATTRS_PEER_SERVICE,\n  SEMATTRS_RPC_GRPC_STATUS_CODE: () => SEMATTRS_RPC_GRPC_STATUS_CODE,\n  SEMATTRS_RPC_JSONRPC_ERROR_CODE: () => SEMATTRS_RPC_JSONRPC_ERROR_CODE,\n  SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE: () => SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE,\n  SEMATTRS_RPC_JSONRPC_REQUEST_ID: () => SEMATTRS_RPC_JSONRPC_REQUEST_ID,\n  SEMATTRS_RPC_JSONRPC_VERSION: () => SEMATTRS_RPC_JSONRPC_VERSION,\n  SEMATTRS_RPC_METHOD: () => SEMATTRS_RPC_METHOD,\n  SEMATTRS_RPC_SERVICE: () => SEMATTRS_RPC_SERVICE,\n  SEMATTRS_RPC_SYSTEM: () => SEMATTRS_RPC_SYSTEM,\n  SEMATTRS_THREAD_ID: () => SEMATTRS_THREAD_ID,\n  SEMATTRS_THREAD_NAME: () => SEMATTRS_THREAD_NAME,\n  SEMRESATTRS_AWS_ECS_CLUSTER_ARN: () => SEMRESATTRS_AWS_ECS_CLUSTER_ARN,\n  SEMRESATTRS_AWS_ECS_CONTAINER_ARN: () => SEMRESATTRS_AWS_ECS_CONTAINER_ARN,\n  SEMRESATTRS_AWS_ECS_LAUNCHTYPE: () => SEMRESATTRS_AWS_ECS_LAUNCHTYPE,\n  SEMRESATTRS_AWS_ECS_TASK_ARN: () => SEMRESATTRS_AWS_ECS_TASK_ARN,\n  SEMRESATTRS_AWS_ECS_TASK_FAMILY: () => SEMRESATTRS_AWS_ECS_TASK_FAMILY,\n  SEMRESATTRS_AWS_ECS_TASK_REVISION: () => SEMRESATTRS_AWS_ECS_TASK_REVISION,\n  SEMRESATTRS_AWS_EKS_CLUSTER_ARN: () => SEMRESATTRS_AWS_EKS_CLUSTER_ARN,\n  SEMRESATTRS_AWS_LOG_GROUP_ARNS: () => SEMRESATTRS_AWS_LOG_GROUP_ARNS,\n  SEMRESATTRS_AWS_LOG_GROUP_NAMES: () => SEMRESATTRS_AWS_LOG_GROUP_NAMES,\n  SEMRESATTRS_AWS_LOG_STREAM_ARNS: () => SEMRESATTRS_AWS_LOG_STREAM_ARNS,\n  SEMRESATTRS_AWS_LOG_STREAM_NAMES: () => SEMRESATTRS_AWS_LOG_STREAM_NAMES,\n  SEMRESATTRS_CLOUD_ACCOUNT_ID: () => SEMRESATTRS_CLOUD_ACCOUNT_ID,\n  SEMRESATTRS_CLOUD_AVAILABILITY_ZONE: () => SEMRESATTRS_CLOUD_AVAILABILITY_ZONE,\n  SEMRESATTRS_CLOUD_PLATFORM: () => SEMRESATTRS_CLOUD_PLATFORM,\n  SEMRESATTRS_CLOUD_PROVIDER: () => SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CLOUD_REGION: () => SEMRESATTRS_CLOUD_REGION,\n  SEMRESATTRS_CONTAINER_ID: () => SEMRESATTRS_CONTAINER_ID,\n  SEMRESATTRS_CONTAINER_IMAGE_NAME: () => SEMRESATTRS_CONTAINER_IMAGE_NAME,\n  SEMRESATTRS_CONTAINER_IMAGE_TAG: () => SEMRESATTRS_CONTAINER_IMAGE_TAG,\n  SEMRESATTRS_CONTAINER_NAME: () => SEMRESATTRS_CONTAINER_NAME,\n  SEMRESATTRS_CONTAINER_RUNTIME: () => SEMRESATTRS_CONTAINER_RUNTIME,\n  SEMRESATTRS_DEPLOYMENT_ENVIRONMENT: () => SEMRESATTRS_DEPLOYMENT_ENVIRONMENT,\n  SEMRESATTRS_DEVICE_ID: () => SEMRESATTRS_DEVICE_ID,\n  SEMRESATTRS_DEVICE_MODEL_IDENTIFIER: () => SEMRESATTRS_DEVICE_MODEL_IDENTIFIER,\n  SEMRESATTRS_DEVICE_MODEL_NAME: () => SEMRESATTRS_DEVICE_MODEL_NAME,\n  SEMRESATTRS_FAAS_ID: () => SEMRESATTRS_FAAS_ID,\n  SEMRESATTRS_FAAS_INSTANCE: () => SEMRESATTRS_FAAS_INSTANCE,\n  SEMRESATTRS_FAAS_MAX_MEMORY: () => SEMRESATTRS_FAAS_MAX_MEMORY,\n  SEMRESATTRS_FAAS_NAME: () => SEMRESATTRS_FAAS_NAME,\n  SEMRESATTRS_FAAS_VERSION: () => SEMRESATTRS_FAAS_VERSION,\n  SEMRESATTRS_HOST_ARCH: () => SEMRESATTRS_HOST_ARCH,\n  SEMRESATTRS_HOST_ID: () => SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_HOST_IMAGE_ID: () => SEMRESATTRS_HOST_IMAGE_ID,\n  SEMRESATTRS_HOST_IMAGE_NAME: () => SEMRESATTRS_HOST_IMAGE_NAME,\n  SEMRESATTRS_HOST_IMAGE_VERSION: () => SEMRESATTRS_HOST_IMAGE_VERSION,\n  SEMRESATTRS_HOST_NAME: () => SEMRESATTRS_HOST_NAME,\n  SEMRESATTRS_HOST_TYPE: () => SEMRESATTRS_HOST_TYPE,\n  SEMRESATTRS_K8S_CLUSTER_NAME: () => SEMRESATTRS_K8S_CLUSTER_NAME,\n  SEMRESATTRS_K8S_CONTAINER_NAME: () => SEMRESATTRS_K8S_CONTAINER_NAME,\n  SEMRESATTRS_K8S_CRONJOB_NAME: () => SEMRESATTRS_K8S_CRONJOB_NAME,\n  SEMRESATTRS_K8S_CRONJOB_UID: () => SEMRESATTRS_K8S_CRONJOB_UID,\n  SEMRESATTRS_K8S_DAEMONSET_NAME: () => SEMRESATTRS_K8S_DAEMONSET_NAME,\n  SEMRESATTRS_K8S_DAEMONSET_UID: () => SEMRESATTRS_K8S_DAEMONSET_UID,\n  SEMRESATTRS_K8S_DEPLOYMENT_NAME: () => SEMRESATTRS_K8S_DEPLOYMENT_NAME,\n  SEMRESATTRS_K8S_DEPLOYMENT_UID: () => SEMRESATTRS_K8S_DEPLOYMENT_UID,\n  SEMRESATTRS_K8S_JOB_NAME: () => SEMRESATTRS_K8S_JOB_NAME,\n  SEMRESATTRS_K8S_JOB_UID: () => SEMRESATTRS_K8S_JOB_UID,\n  SEMRESATTRS_K8S_NAMESPACE_NAME: () => SEMRESATTRS_K8S_NAMESPACE_NAME,\n  SEMRESATTRS_K8S_NODE_NAME: () => SEMRESATTRS_K8S_NODE_NAME,\n  SEMRESATTRS_K8S_NODE_UID: () => SEMRESATTRS_K8S_NODE_UID,\n  SEMRESATTRS_K8S_POD_NAME: () => SEMRESATTRS_K8S_POD_NAME,\n  SEMRESATTRS_K8S_POD_UID: () => SEMRESATTRS_K8S_POD_UID,\n  SEMRESATTRS_K8S_REPLICASET_NAME: () => SEMRESATTRS_K8S_REPLICASET_NAME,\n  SEMRESATTRS_K8S_REPLICASET_UID: () => SEMRESATTRS_K8S_REPLICASET_UID,\n  SEMRESATTRS_K8S_STATEFULSET_NAME: () => SEMRESATTRS_K8S_STATEFULSET_NAME,\n  SEMRESATTRS_K8S_STATEFULSET_UID: () => SEMRESATTRS_K8S_STATEFULSET_UID,\n  SEMRESATTRS_OS_DESCRIPTION: () => SEMRESATTRS_OS_DESCRIPTION,\n  SEMRESATTRS_OS_NAME: () => SEMRESATTRS_OS_NAME,\n  SEMRESATTRS_OS_TYPE: () => SEMRESATTRS_OS_TYPE,\n  SEMRESATTRS_OS_VERSION: () => SEMRESATTRS_OS_VERSION,\n  SEMRESATTRS_PROCESS_COMMAND: () => SEMRESATTRS_PROCESS_COMMAND,\n  SEMRESATTRS_PROCESS_COMMAND_ARGS: () => SEMRESATTRS_PROCESS_COMMAND_ARGS,\n  SEMRESATTRS_PROCESS_COMMAND_LINE: () => SEMRESATTRS_PROCESS_COMMAND_LINE,\n  SEMRESATTRS_PROCESS_EXECUTABLE_NAME: () => SEMRESATTRS_PROCESS_EXECUTABLE_NAME,\n  SEMRESATTRS_PROCESS_EXECUTABLE_PATH: () => SEMRESATTRS_PROCESS_EXECUTABLE_PATH,\n  SEMRESATTRS_PROCESS_OWNER: () => SEMRESATTRS_PROCESS_OWNER,\n  SEMRESATTRS_PROCESS_PID: () => SEMRESATTRS_PROCESS_PID,\n  SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION: () => SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME: () => SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_VERSION: () => SEMRESATTRS_PROCESS_RUNTIME_VERSION,\n  SEMRESATTRS_SERVICE_INSTANCE_ID: () => SEMRESATTRS_SERVICE_INSTANCE_ID,\n  SEMRESATTRS_SERVICE_NAME: () => SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_SERVICE_NAMESPACE: () => SEMRESATTRS_SERVICE_NAMESPACE,\n  SEMRESATTRS_SERVICE_VERSION: () => SEMRESATTRS_SERVICE_VERSION,\n  SEMRESATTRS_TELEMETRY_AUTO_VERSION: () => SEMRESATTRS_TELEMETRY_AUTO_VERSION,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE: () => SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  SEMRESATTRS_TELEMETRY_SDK_NAME: () => SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION: () => SEMRESATTRS_TELEMETRY_SDK_VERSION,\n  SEMRESATTRS_WEBENGINE_DESCRIPTION: () => SEMRESATTRS_WEBENGINE_DESCRIPTION,\n  SEMRESATTRS_WEBENGINE_NAME: () => SEMRESATTRS_WEBENGINE_NAME,\n  SEMRESATTRS_WEBENGINE_VERSION: () => SEMRESATTRS_WEBENGINE_VERSION,\n  SemanticAttributes: () => SemanticAttributes,\n  SemanticResourceAttributes: () => SemanticResourceAttributes,\n  TELEMETRYSDKLANGUAGEVALUES_CPP: () => TELEMETRYSDKLANGUAGEVALUES_CPP,\n  TELEMETRYSDKLANGUAGEVALUES_DOTNET: () => TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n  TELEMETRYSDKLANGUAGEVALUES_ERLANG: () => TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n  TELEMETRYSDKLANGUAGEVALUES_GO: () => TELEMETRYSDKLANGUAGEVALUES_GO,\n  TELEMETRYSDKLANGUAGEVALUES_JAVA: () => TELEMETRYSDKLANGUAGEVALUES_JAVA,\n  TELEMETRYSDKLANGUAGEVALUES_NODEJS: () => TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n  TELEMETRYSDKLANGUAGEVALUES_PHP: () => TELEMETRYSDKLANGUAGEVALUES_PHP,\n  TELEMETRYSDKLANGUAGEVALUES_PYTHON: () => TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n  TELEMETRYSDKLANGUAGEVALUES_RUBY: () => TELEMETRYSDKLANGUAGEVALUES_RUBY,\n  TELEMETRYSDKLANGUAGEVALUES_WEBJS: () => TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n  TelemetrySdkLanguageValues: () => TelemetrySdkLanguageValues\n});\nvar init_esm2 = __esm({\n  \"node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\"() {\n    init_trace2();\n    init_resource();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js\nvar _a, SDK_INFO;\nvar init_sdk_info = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js\"() {\n    init_version2();\n    init_esm2();\n    SDK_INFO = (_a = {}, _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = \"opentelemetry\", _a[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = \"node\", _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = TelemetrySdkLanguageValues.NODEJS, _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = VERSION2, _a);\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js\nfunction unrefTimer(timer) {\n  timer.unref();\n}\nvar init_timer_util = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/node/index.js\nvar init_node2 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/node/index.js\"() {\n    init_environment2();\n    init_globalThis3();\n    init_hex_to_base64();\n    init_RandomIdGenerator();\n    init_performance();\n    init_sdk_info();\n    init_timer_util();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/platform/index.js\nvar init_platform2 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/platform/index.js\"() {\n    init_node2();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/common/time.js\nfunction millisToHrTime(epochMillis) {\n  var epochSeconds = epochMillis / 1e3;\n  var seconds = Math.trunc(epochSeconds);\n  var nanos = Math.round(epochMillis % 1e3 * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n  var timeOrigin = otperformance.timeOrigin;\n  if (typeof timeOrigin !== \"number\") {\n    var perf = otperformance;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\nfunction hrTime(performanceNow) {\n  var timeOrigin = millisToHrTime(getTimeOrigin());\n  var now = millisToHrTime(typeof performanceNow === \"number\" ? performanceNow : otperformance.now());\n  return addHrTimes(timeOrigin, now);\n}\nfunction timeInputToHrTime(time) {\n  if (isTimeInputHrTime(time)) {\n    return time;\n  } else if (typeof time === \"number\") {\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      return millisToHrTime(time);\n    }\n  } else if (time instanceof Date) {\n    return millisToHrTime(time.getTime());\n  } else {\n    throw TypeError(\"Invalid input type\");\n  }\n}\nfunction hrTimeDuration(startTime, endTime) {\n  var seconds = endTime[0] - startTime[0];\n  var nanos = endTime[1] - startTime[1];\n  if (nanos < 0) {\n    seconds -= 1;\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n  return [seconds, nanos];\n}\nfunction hrTimeToTimeStamp(time) {\n  var precision = NANOSECOND_DIGITS;\n  var tmp = \"\" + \"0\".repeat(precision) + time[1] + \"Z\";\n  var nanoString = tmp.substr(tmp.length - precision - 1);\n  var date = new Date(time[0] * 1e3).toISOString();\n  return date.replace(\"000Z\", nanoString);\n}\nfunction hrTimeToNanoseconds(time) {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\nfunction hrTimeToMilliseconds(time) {\n  return time[0] * 1e3 + time[1] / 1e6;\n}\nfunction hrTimeToMicroseconds(time) {\n  return time[0] * 1e6 + time[1] / 1e3;\n}\nfunction isTimeInputHrTime(value) {\n  return Array.isArray(value) && value.length === 2 && typeof value[0] === \"number\" && typeof value[1] === \"number\";\n}\nfunction isTimeInput(value) {\n  return isTimeInputHrTime(value) || typeof value === \"number\" || value instanceof Date;\n}\nfunction addHrTimes(time1, time2) {\n  var out = [time1[0] + time2[0], time1[1] + time2[1]];\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n  return out;\n}\nvar NANOSECOND_DIGITS, NANOSECOND_DIGITS_IN_MILLIS, MILLISECONDS_TO_NANOSECONDS, SECOND_TO_NANOSECONDS;\nvar init_time = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/common/time.js\"() {\n    init_platform2();\n    NANOSECOND_DIGITS = 9;\n    NANOSECOND_DIGITS_IN_MILLIS = 6;\n    MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\n    SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/common/types.js\nvar init_types2 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/common/types.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/ExportResult.js\nvar ExportResultCode;\nvar init_ExportResult = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/ExportResult.js\"() {\n    (function(ExportResultCode2) {\n      ExportResultCode2[ExportResultCode2[\"SUCCESS\"] = 0] = \"SUCCESS\";\n      ExportResultCode2[ExportResultCode2[\"FAILED\"] = 1] = \"FAILED\";\n    })(ExportResultCode || (ExportResultCode = {}));\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/propagation/composite.js\nvar __values3, CompositePropagator;\nvar init_composite = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/propagation/composite.js\"() {\n    init_esm();\n    __values3 = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n    CompositePropagator = /** @class */\n    function() {\n      function CompositePropagator2(config) {\n        if (config === void 0) {\n          config = {};\n        }\n        var _a2;\n        this._propagators = (_a2 = config.propagators) !== null && _a2 !== void 0 ? _a2 : [];\n        this._fields = Array.from(new Set(this._propagators.map(function(p) {\n          return typeof p.fields === \"function\" ? p.fields() : [];\n        }).reduce(function(x, y) {\n          return x.concat(y);\n        }, [])));\n      }\n      CompositePropagator2.prototype.inject = function(context2, carrier, setter) {\n        var e_1, _a2;\n        try {\n          for (var _b = __values3(this._propagators), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var propagator = _c.value;\n            try {\n              propagator.inject(context2, carrier, setter);\n            } catch (err) {\n              diag2.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = { error: e_1_1 };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a2 = _b.return))\n              _a2.call(_b);\n          } finally {\n            if (e_1)\n              throw e_1.error;\n          }\n        }\n      };\n      CompositePropagator2.prototype.extract = function(context2, carrier, getter) {\n        return this._propagators.reduce(function(ctx, propagator) {\n          try {\n            return propagator.extract(ctx, carrier, getter);\n          } catch (err) {\n            diag2.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n          }\n          return ctx;\n        }, context2);\n      };\n      CompositePropagator2.prototype.fields = function() {\n        return this._fields.slice();\n      };\n      return CompositePropagator2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/internal/validators.js\nfunction validateKey2(key) {\n  return VALID_KEY_REGEX2.test(key);\n}\nfunction validateValue2(value) {\n  return VALID_VALUE_BASE_REGEX2.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX2.test(value);\n}\nvar VALID_KEY_CHAR_RANGE2, VALID_KEY2, VALID_VENDOR_KEY2, VALID_KEY_REGEX2, VALID_VALUE_BASE_REGEX2, INVALID_VALUE_COMMA_EQUAL_REGEX2;\nvar init_validators = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/internal/validators.js\"() {\n    VALID_KEY_CHAR_RANGE2 = \"[_0-9a-z-*/]\";\n    VALID_KEY2 = \"[a-z]\" + VALID_KEY_CHAR_RANGE2 + \"{0,255}\";\n    VALID_VENDOR_KEY2 = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE2 + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE2 + \"{0,13}\";\n    VALID_KEY_REGEX2 = new RegExp(\"^(?:\" + VALID_KEY2 + \"|\" + VALID_VENDOR_KEY2 + \")$\");\n    VALID_VALUE_BASE_REGEX2 = /^[ -~]{0,255}[!-~]$/;\n    INVALID_VALUE_COMMA_EQUAL_REGEX2 = /,|=/;\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/trace/TraceState.js\nvar MAX_TRACE_STATE_ITEMS2, MAX_TRACE_STATE_LEN2, LIST_MEMBERS_SEPARATOR2, LIST_MEMBER_KEY_VALUE_SPLITTER2, TraceState;\nvar init_TraceState = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/trace/TraceState.js\"() {\n    init_validators();\n    MAX_TRACE_STATE_ITEMS2 = 32;\n    MAX_TRACE_STATE_LEN2 = 512;\n    LIST_MEMBERS_SEPARATOR2 = \",\";\n    LIST_MEMBER_KEY_VALUE_SPLITTER2 = \"=\";\n    TraceState = /** @class */\n    function() {\n      function TraceState2(rawTraceState) {\n        this._internalState = /* @__PURE__ */ new Map();\n        if (rawTraceState)\n          this._parse(rawTraceState);\n      }\n      TraceState2.prototype.set = function(key, value) {\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n          traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n      };\n      TraceState2.prototype.unset = function(key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n      };\n      TraceState2.prototype.get = function(key) {\n        return this._internalState.get(key);\n      };\n      TraceState2.prototype.serialize = function() {\n        var _this = this;\n        return this._keys().reduce(function(agg, key) {\n          agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER2 + _this.get(key));\n          return agg;\n        }, []).join(LIST_MEMBERS_SEPARATOR2);\n      };\n      TraceState2.prototype._parse = function(rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN2)\n          return;\n        this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR2).reverse().reduce(function(agg, part) {\n          var listMember = part.trim();\n          var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER2);\n          if (i !== -1) {\n            var key = listMember.slice(0, i);\n            var value = listMember.slice(i + 1, part.length);\n            if (validateKey2(key) && validateValue2(value)) {\n              agg.set(key, value);\n            } else {\n            }\n          }\n          return agg;\n        }, /* @__PURE__ */ new Map());\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS2) {\n          this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, MAX_TRACE_STATE_ITEMS2));\n        }\n      };\n      TraceState2.prototype._keys = function() {\n        return Array.from(this._internalState.keys()).reverse();\n      };\n      TraceState2.prototype._clone = function() {\n        var traceState = new TraceState2();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n      };\n      return TraceState2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js\nfunction parseTraceParent(traceParent) {\n  var match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match)\n    return null;\n  if (match[1] === \"00\" && match[5])\n    return null;\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16)\n  };\n}\nvar TRACE_PARENT_HEADER, TRACE_STATE_HEADER, VERSION3, VERSION_PART, TRACE_ID_PART, PARENT_ID_PART, FLAGS_PART, TRACE_PARENT_REGEX, W3CTraceContextPropagator;\nvar init_W3CTraceContextPropagator = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js\"() {\n    init_esm();\n    init_suppress_tracing();\n    init_TraceState();\n    TRACE_PARENT_HEADER = \"traceparent\";\n    TRACE_STATE_HEADER = \"tracestate\";\n    VERSION3 = \"00\";\n    VERSION_PART = \"(?!ff)[\\\\da-f]{2}\";\n    TRACE_ID_PART = \"(?![0]{32})[\\\\da-f]{32}\";\n    PARENT_ID_PART = \"(?![0]{16})[\\\\da-f]{16}\";\n    FLAGS_PART = \"[\\\\da-f]{2}\";\n    TRACE_PARENT_REGEX = new RegExp(\"^\\\\s?(\" + VERSION_PART + \")-(\" + TRACE_ID_PART + \")-(\" + PARENT_ID_PART + \")-(\" + FLAGS_PART + \")(-.*)?\\\\s?$\");\n    W3CTraceContextPropagator = /** @class */\n    function() {\n      function W3CTraceContextPropagator2() {\n      }\n      W3CTraceContextPropagator2.prototype.inject = function(context2, carrier, setter) {\n        var spanContext = trace.getSpanContext(context2);\n        if (!spanContext || isTracingSuppressed(context2) || !isSpanContextValid(spanContext))\n          return;\n        var traceParent = VERSION3 + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-0\" + Number(spanContext.traceFlags || TraceFlags.NONE).toString(16);\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n          setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n      };\n      W3CTraceContextPropagator2.prototype.extract = function(context2, carrier, getter) {\n        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n          return context2;\n        var traceParent = Array.isArray(traceParentHeader) ? traceParentHeader[0] : traceParentHeader;\n        if (typeof traceParent !== \"string\")\n          return context2;\n        var spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n          return context2;\n        spanContext.isRemote = true;\n        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n          var state = Array.isArray(traceStateHeader) ? traceStateHeader.join(\",\") : traceStateHeader;\n          spanContext.traceState = new TraceState(typeof state === \"string\" ? state : void 0);\n        }\n        return trace.setSpanContext(context2, spanContext);\n      };\n      W3CTraceContextPropagator2.prototype.fields = function() {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n      };\n      return W3CTraceContextPropagator2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/trace/IdGenerator.js\nvar init_IdGenerator = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/trace/IdGenerator.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js\nfunction setRPCMetadata(context2, meta) {\n  return context2.setValue(RPC_METADATA_KEY, meta);\n}\nfunction deleteRPCMetadata(context2) {\n  return context2.deleteValue(RPC_METADATA_KEY);\n}\nfunction getRPCMetadata(context2) {\n  return context2.getValue(RPC_METADATA_KEY);\n}\nvar RPC_METADATA_KEY, RPCType;\nvar init_rpc_metadata = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js\"() {\n    init_esm();\n    RPC_METADATA_KEY = createContextKey(\"OpenTelemetry SDK Context Key RPC_METADATA\");\n    (function(RPCType2) {\n      RPCType2[\"HTTP\"] = \"http\";\n    })(RPCType || (RPCType = {}));\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js\nvar AlwaysOffSampler;\nvar init_AlwaysOffSampler = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js\"() {\n    init_esm();\n    AlwaysOffSampler = /** @class */\n    function() {\n      function AlwaysOffSampler3() {\n      }\n      AlwaysOffSampler3.prototype.shouldSample = function() {\n        return {\n          decision: SamplingDecision.NOT_RECORD\n        };\n      };\n      AlwaysOffSampler3.prototype.toString = function() {\n        return \"AlwaysOffSampler\";\n      };\n      return AlwaysOffSampler3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js\nvar AlwaysOnSampler;\nvar init_AlwaysOnSampler = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js\"() {\n    init_esm();\n    AlwaysOnSampler = /** @class */\n    function() {\n      function AlwaysOnSampler3() {\n      }\n      AlwaysOnSampler3.prototype.shouldSample = function() {\n        return {\n          decision: SamplingDecision.RECORD_AND_SAMPLED\n        };\n      };\n      AlwaysOnSampler3.prototype.toString = function() {\n        return \"AlwaysOnSampler\";\n      };\n      return AlwaysOnSampler3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js\nvar ParentBasedSampler;\nvar init_ParentBasedSampler = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js\"() {\n    init_esm();\n    init_global_error_handler();\n    init_AlwaysOffSampler();\n    init_AlwaysOnSampler();\n    ParentBasedSampler = /** @class */\n    function() {\n      function ParentBasedSampler3(config) {\n        var _a2, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n          globalErrorHandler(new Error(\"ParentBasedSampler must have a root sampler configured\"));\n          this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled = (_a2 = config.remoteParentSampled) !== null && _a2 !== void 0 ? _a2 : new AlwaysOnSampler();\n        this._remoteParentNotSampled = (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n        this._localParentSampled = (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n        this._localParentNotSampled = (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n      }\n      ParentBasedSampler3.prototype.shouldSample = function(context2, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = trace.getSpanContext(context2);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n          return this._root.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n          if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._remoteParentSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n          }\n          return this._remoteParentNotSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n          return this._localParentSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n      };\n      ParentBasedSampler3.prototype.toString = function() {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n      };\n      return ParentBasedSampler3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js\nvar TraceIdRatioBasedSampler;\nvar init_TraceIdRatioBasedSampler = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js\"() {\n    init_esm();\n    TraceIdRatioBasedSampler = /** @class */\n    function() {\n      function TraceIdRatioBasedSampler3(_ratio) {\n        if (_ratio === void 0) {\n          _ratio = 0;\n        }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 4294967295);\n      }\n      TraceIdRatioBasedSampler3.prototype.shouldSample = function(context2, traceId) {\n        return {\n          decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD\n        };\n      };\n      TraceIdRatioBasedSampler3.prototype.toString = function() {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n      };\n      TraceIdRatioBasedSampler3.prototype._normalize = function(ratio) {\n        if (typeof ratio !== \"number\" || isNaN(ratio))\n          return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n      };\n      TraceIdRatioBasedSampler3.prototype._accumulate = function(traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n          var pos = i * 8;\n          var part = parseInt(traceId.slice(pos, pos + 8), 16);\n          accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n      };\n      return TraceIdRatioBasedSampler3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n  return typeof Ctor == \"function\" && Ctor instanceof Ctor && funcToString.call(Ctor) === objectCtorString;\n}\nfunction isObjectLike(value) {\n  return value != null && typeof value == \"object\";\n}\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === void 0 ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n  var unmasked = false;\n  try {\n    value[symToStringTag] = void 0;\n    unmasked = true;\n  } catch (e) {\n  }\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\nvar objectTag, nullTag, undefinedTag, funcProto, funcToString, objectCtorString, getPrototype, objectProto, hasOwnProperty, symToStringTag, nativeObjectToString;\nvar init_lodash_merge = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js\"() {\n    objectTag = \"[object Object]\";\n    nullTag = \"[object Null]\";\n    undefinedTag = \"[object Undefined]\";\n    funcProto = Function.prototype;\n    funcToString = funcProto.toString;\n    objectCtorString = funcToString.call(Object);\n    getPrototype = overArg(Object.getPrototypeOf, Object);\n    objectProto = Object.prototype;\n    hasOwnProperty = objectProto.hasOwnProperty;\n    symToStringTag = Symbol ? Symbol.toStringTag : void 0;\n    nativeObjectToString = objectProto.toString;\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/utils/merge.js\nfunction merge() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var result = args.shift();\n  var objects = /* @__PURE__ */ new WeakMap();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n  return result;\n}\nfunction takeValue(value) {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\nfunction mergeTwoObjects(one, two, level, objects) {\n  if (level === void 0) {\n    level = 0;\n  }\n  var result;\n  if (level > MAX_LEVEL) {\n    return void 0;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (var i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      var keys = Object.keys(two);\n      for (var i = 0, j = keys.length; i < j; i++) {\n        var key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      var keys = Object.keys(two);\n      for (var i = 0, j = keys.length; i < j; i++) {\n        var key = keys[i];\n        var twoValue = two[key];\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === \"undefined\") {\n            delete result[key];\n          } else {\n            result[key] = twoValue;\n          }\n        } else {\n          var obj1 = result[key];\n          var obj2 = twoValue;\n          if (wasObjectReferenced(one, key, objects) || wasObjectReferenced(two, key, objects)) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              var arr1 = objects.get(obj1) || [];\n              var arr2 = objects.get(obj2) || [];\n              arr1.push({ obj: one, key });\n              arr2.push({ obj: two, key });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n            result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n  return result;\n}\nfunction wasObjectReferenced(obj, key, objects) {\n  var arr = objects.get(obj[key]) || [];\n  for (var i = 0, j = arr.length; i < j; i++) {\n    var info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction isObject(value) {\n  return !isPrimitive(value) && !isArray(value) && !isFunction(value) && typeof value === \"object\";\n}\nfunction isPrimitive(value) {\n  return typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || typeof value === \"undefined\" || value instanceof Date || value instanceof RegExp || value === null;\n}\nfunction shouldMerge(one, two) {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n  return true;\n}\nvar MAX_LEVEL;\nvar init_merge = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/utils/merge.js\"() {\n    init_lodash_merge();\n    MAX_LEVEL = 20;\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/utils/timeout.js\nfunction callWithTimeout(promise, timeout) {\n  var timeoutHandle;\n  var timeoutPromise = new Promise(function timeoutFunction(_resolve, reject) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError(\"Operation timed out.\"));\n    }, timeout);\n  });\n  return Promise.race([promise, timeoutPromise]).then(function(result) {\n    clearTimeout(timeoutHandle);\n    return result;\n  }, function(reason) {\n    clearTimeout(timeoutHandle);\n    throw reason;\n  });\n}\nvar __extends2, TimeoutError;\nvar init_timeout = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/utils/timeout.js\"() {\n    __extends2 = function() {\n      var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {\n          d2.__proto__ = b2;\n        } || function(d2, b2) {\n          for (var p in b2)\n            if (Object.prototype.hasOwnProperty.call(b2, p))\n              d2[p] = b2[p];\n        };\n        return extendStatics(d, b);\n      };\n      return function(d, b) {\n        if (typeof b !== \"function\" && b !== null)\n          throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n          this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n    TimeoutError = /** @class */\n    function(_super) {\n      __extends2(TimeoutError2, _super);\n      function TimeoutError2(message) {\n        var _this = _super.call(this, message) || this;\n        Object.setPrototypeOf(_this, TimeoutError2.prototype);\n        return _this;\n      }\n      return TimeoutError2;\n    }(Error);\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/utils/url.js\nfunction urlMatches(url4, urlToMatch) {\n  if (typeof urlToMatch === \"string\") {\n    return url4 === urlToMatch;\n  } else {\n    return !!url4.match(urlToMatch);\n  }\n}\nfunction isUrlIgnored(url4, ignoredUrls) {\n  var e_1, _a2;\n  if (!ignoredUrls) {\n    return false;\n  }\n  try {\n    for (var ignoredUrls_1 = __values4(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()) {\n      var ignoreUrl = ignoredUrls_1_1.value;\n      if (urlMatches(url4, ignoreUrl)) {\n        return true;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = { error: e_1_1 };\n  } finally {\n    try {\n      if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a2 = ignoredUrls_1.return))\n        _a2.call(ignoredUrls_1);\n    } finally {\n      if (e_1)\n        throw e_1.error;\n    }\n  }\n  return false;\n}\nvar __values4;\nvar init_url = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/utils/url.js\"() {\n    __values4 = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/utils/wrap.js\nfunction isWrapped(func) {\n  return typeof func === \"function\" && typeof func.__original === \"function\" && typeof func.__unwrap === \"function\" && func.__wrapped === true;\n}\nvar init_wrap = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/utils/wrap.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/utils/promise.js\nvar Deferred;\nvar init_promise = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/utils/promise.js\"() {\n    Deferred = /** @class */\n    function() {\n      function Deferred2() {\n        var _this = this;\n        this._promise = new Promise(function(resolve, reject) {\n          _this._resolve = resolve;\n          _this._reject = reject;\n        });\n      }\n      Object.defineProperty(Deferred2.prototype, \"promise\", {\n        get: function() {\n          return this._promise;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      Deferred2.prototype.resolve = function(val) {\n        this._resolve(val);\n      };\n      Deferred2.prototype.reject = function(err) {\n        this._reject(err);\n      };\n      return Deferred2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/utils/callback.js\nvar __read8, __spreadArray5, BindOnceFuture;\nvar init_callback = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/utils/callback.js\"() {\n    init_promise();\n    __read8 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    __spreadArray5 = function(to, from, pack) {\n      if (pack || arguments.length === 2)\n        for (var i = 0, l = from.length, ar; i < l; i++) {\n          if (ar || !(i in from)) {\n            if (!ar)\n              ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n          }\n        }\n      return to.concat(ar || Array.prototype.slice.call(from));\n    };\n    BindOnceFuture = /** @class */\n    function() {\n      function BindOnceFuture2(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n        this._isCalled = false;\n        this._deferred = new Deferred();\n      }\n      Object.defineProperty(BindOnceFuture2.prototype, \"isCalled\", {\n        get: function() {\n          return this._isCalled;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(BindOnceFuture2.prototype, \"promise\", {\n        get: function() {\n          return this._deferred.promise;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      BindOnceFuture2.prototype.call = function() {\n        var _a2;\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        if (!this._isCalled) {\n          this._isCalled = true;\n          try {\n            Promise.resolve((_a2 = this._callback).call.apply(_a2, __spreadArray5([this._that], __read8(args), false))).then(function(val) {\n              return _this._deferred.resolve(val);\n            }, function(err) {\n              return _this._deferred.reject(err);\n            });\n          } catch (err) {\n            this._deferred.reject(err);\n          }\n        }\n        return this._deferred.promise;\n      };\n      return BindOnceFuture2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/internal/exporter.js\nfunction _export(exporter, arg) {\n  return new Promise(function(resolve) {\n    context.with(suppressTracing(context.active()), function() {\n      exporter.export(arg, function(result) {\n        resolve(result);\n      });\n    });\n  });\n}\nvar init_exporter = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/internal/exporter.js\"() {\n    init_esm();\n    init_suppress_tracing();\n  }\n});\n\n// node_modules/@opentelemetry/core/build/esm/index.js\nvar esm_exports3 = {};\n__export(esm_exports3, {\n  AlwaysOffSampler: () => AlwaysOffSampler,\n  AlwaysOnSampler: () => AlwaysOnSampler,\n  AnchoredClock: () => AnchoredClock,\n  BindOnceFuture: () => BindOnceFuture,\n  CompositePropagator: () => CompositePropagator,\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT: () => DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT: () => DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  DEFAULT_ENVIRONMENT: () => DEFAULT_ENVIRONMENT,\n  DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: () => DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: () => DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  ExportResultCode: () => ExportResultCode,\n  ParentBasedSampler: () => ParentBasedSampler,\n  RPCType: () => RPCType,\n  RandomIdGenerator: () => RandomIdGenerator,\n  SDK_INFO: () => SDK_INFO,\n  TRACE_PARENT_HEADER: () => TRACE_PARENT_HEADER,\n  TRACE_STATE_HEADER: () => TRACE_STATE_HEADER,\n  TimeoutError: () => TimeoutError,\n  TraceIdRatioBasedSampler: () => TraceIdRatioBasedSampler,\n  TraceState: () => TraceState,\n  TracesSamplerValues: () => TracesSamplerValues,\n  VERSION: () => VERSION2,\n  W3CBaggagePropagator: () => W3CBaggagePropagator,\n  W3CTraceContextPropagator: () => W3CTraceContextPropagator,\n  _globalThis: () => _globalThis3,\n  addHrTimes: () => addHrTimes,\n  baggageUtils: () => utils_exports,\n  callWithTimeout: () => callWithTimeout,\n  deleteRPCMetadata: () => deleteRPCMetadata,\n  getEnv: () => getEnv,\n  getEnvWithoutDefaults: () => getEnvWithoutDefaults,\n  getRPCMetadata: () => getRPCMetadata,\n  getTimeOrigin: () => getTimeOrigin,\n  globalErrorHandler: () => globalErrorHandler,\n  hexToBase64: () => hexToBase64,\n  hexToBinary: () => hexToBinary,\n  hrTime: () => hrTime,\n  hrTimeDuration: () => hrTimeDuration,\n  hrTimeToMicroseconds: () => hrTimeToMicroseconds,\n  hrTimeToMilliseconds: () => hrTimeToMilliseconds,\n  hrTimeToNanoseconds: () => hrTimeToNanoseconds,\n  hrTimeToTimeStamp: () => hrTimeToTimeStamp,\n  internal: () => internal,\n  isAttributeKey: () => isAttributeKey,\n  isAttributeValue: () => isAttributeValue,\n  isTimeInput: () => isTimeInput,\n  isTimeInputHrTime: () => isTimeInputHrTime,\n  isTracingSuppressed: () => isTracingSuppressed,\n  isUrlIgnored: () => isUrlIgnored,\n  isWrapped: () => isWrapped,\n  loggingErrorHandler: () => loggingErrorHandler,\n  merge: () => merge,\n  millisToHrTime: () => millisToHrTime,\n  otperformance: () => otperformance,\n  parseEnvironment: () => parseEnvironment,\n  parseTraceParent: () => parseTraceParent,\n  sanitizeAttributes: () => sanitizeAttributes,\n  setGlobalErrorHandler: () => setGlobalErrorHandler,\n  setRPCMetadata: () => setRPCMetadata,\n  suppressTracing: () => suppressTracing,\n  timeInputToHrTime: () => timeInputToHrTime,\n  unrefTimer: () => unrefTimer,\n  unsuppressTracing: () => unsuppressTracing,\n  urlMatches: () => urlMatches\n});\nvar internal;\nvar init_esm3 = __esm({\n  \"node_modules/@opentelemetry/core/build/esm/index.js\"() {\n    init_W3CBaggagePropagator();\n    init_anchored_clock();\n    init_attributes();\n    init_global_error_handler();\n    init_logging_error_handler();\n    init_time();\n    init_types2();\n    init_hex_to_binary();\n    init_ExportResult();\n    init_utils3();\n    init_platform2();\n    init_composite();\n    init_W3CTraceContextPropagator();\n    init_IdGenerator();\n    init_rpc_metadata();\n    init_AlwaysOffSampler();\n    init_AlwaysOnSampler();\n    init_ParentBasedSampler();\n    init_TraceIdRatioBasedSampler();\n    init_suppress_tracing();\n    init_TraceState();\n    init_environment();\n    init_merge();\n    init_sampling();\n    init_timeout();\n    init_url();\n    init_wrap();\n    init_callback();\n    init_version2();\n    init_exporter();\n    internal = {\n      _export\n    };\n  }\n});\n\n// node_modules/@opentelemetry/propagator-b3/build/esm/common.js\nvar B3_DEBUG_FLAG_KEY;\nvar init_common = __esm({\n  \"node_modules/@opentelemetry/propagator-b3/build/esm/common.js\"() {\n    init_esm();\n    B3_DEBUG_FLAG_KEY = createContextKey(\"OpenTelemetry Context Key B3 Debug Flag\");\n  }\n});\n\n// node_modules/@opentelemetry/propagator-b3/build/esm/constants.js\nvar B3_CONTEXT_HEADER, X_B3_TRACE_ID, X_B3_SPAN_ID, X_B3_SAMPLED, X_B3_PARENT_SPAN_ID, X_B3_FLAGS;\nvar init_constants2 = __esm({\n  \"node_modules/@opentelemetry/propagator-b3/build/esm/constants.js\"() {\n    B3_CONTEXT_HEADER = \"b3\";\n    X_B3_TRACE_ID = \"x-b3-traceid\";\n    X_B3_SPAN_ID = \"x-b3-spanid\";\n    X_B3_SAMPLED = \"x-b3-sampled\";\n    X_B3_PARENT_SPAN_ID = \"x-b3-parentspanid\";\n    X_B3_FLAGS = \"x-b3-flags\";\n  }\n});\n\n// node_modules/@opentelemetry/propagator-b3/build/esm/B3MultiPropagator.js\nfunction isValidSampledValue(sampled) {\n  return sampled === TraceFlags.SAMPLED || sampled === TraceFlags.NONE;\n}\nfunction parseHeader(header) {\n  return Array.isArray(header) ? header[0] : header;\n}\nfunction getHeaderValue(carrier, getter, key) {\n  var header = getter.get(carrier, key);\n  return parseHeader(header);\n}\nfunction getTraceId(carrier, getter) {\n  var traceId = getHeaderValue(carrier, getter, X_B3_TRACE_ID);\n  if (typeof traceId === \"string\") {\n    return traceId.padStart(32, \"0\");\n  }\n  return \"\";\n}\nfunction getSpanId(carrier, getter) {\n  var spanId = getHeaderValue(carrier, getter, X_B3_SPAN_ID);\n  if (typeof spanId === \"string\") {\n    return spanId;\n  }\n  return \"\";\n}\nfunction getDebug(carrier, getter) {\n  var debug = getHeaderValue(carrier, getter, X_B3_FLAGS);\n  return debug === \"1\" ? \"1\" : void 0;\n}\nfunction getTraceFlags(carrier, getter) {\n  var traceFlags = getHeaderValue(carrier, getter, X_B3_SAMPLED);\n  var debug = getDebug(carrier, getter);\n  if (debug === \"1\" || VALID_SAMPLED_VALUES.has(traceFlags)) {\n    return TraceFlags.SAMPLED;\n  }\n  if (traceFlags === void 0 || VALID_UNSAMPLED_VALUES.has(traceFlags)) {\n    return TraceFlags.NONE;\n  }\n  return;\n}\nvar VALID_SAMPLED_VALUES, VALID_UNSAMPLED_VALUES, B3MultiPropagator;\nvar init_B3MultiPropagator = __esm({\n  \"node_modules/@opentelemetry/propagator-b3/build/esm/B3MultiPropagator.js\"() {\n    init_esm();\n    init_esm3();\n    init_common();\n    init_constants2();\n    VALID_SAMPLED_VALUES = /* @__PURE__ */ new Set([true, \"true\", \"True\", \"1\", 1]);\n    VALID_UNSAMPLED_VALUES = /* @__PURE__ */ new Set([false, \"false\", \"False\", \"0\", 0]);\n    B3MultiPropagator = /** @class */\n    function() {\n      function B3MultiPropagator2() {\n      }\n      B3MultiPropagator2.prototype.inject = function(context2, carrier, setter) {\n        var spanContext = trace.getSpanContext(context2);\n        if (!spanContext || !isSpanContextValid(spanContext) || isTracingSuppressed(context2))\n          return;\n        var debug = context2.getValue(B3_DEBUG_FLAG_KEY);\n        setter.set(carrier, X_B3_TRACE_ID, spanContext.traceId);\n        setter.set(carrier, X_B3_SPAN_ID, spanContext.spanId);\n        if (debug === \"1\") {\n          setter.set(carrier, X_B3_FLAGS, debug);\n        } else if (spanContext.traceFlags !== void 0) {\n          setter.set(carrier, X_B3_SAMPLED, (TraceFlags.SAMPLED & spanContext.traceFlags) === TraceFlags.SAMPLED ? \"1\" : \"0\");\n        }\n      };\n      B3MultiPropagator2.prototype.extract = function(context2, carrier, getter) {\n        var traceId = getTraceId(carrier, getter);\n        var spanId = getSpanId(carrier, getter);\n        var traceFlags = getTraceFlags(carrier, getter);\n        var debug = getDebug(carrier, getter);\n        if (isValidTraceId(traceId) && isValidSpanId(spanId) && isValidSampledValue(traceFlags)) {\n          context2 = context2.setValue(B3_DEBUG_FLAG_KEY, debug);\n          return trace.setSpanContext(context2, {\n            traceId,\n            spanId,\n            isRemote: true,\n            traceFlags\n          });\n        }\n        return context2;\n      };\n      B3MultiPropagator2.prototype.fields = function() {\n        return [\n          X_B3_TRACE_ID,\n          X_B3_SPAN_ID,\n          X_B3_FLAGS,\n          X_B3_SAMPLED,\n          X_B3_PARENT_SPAN_ID\n        ];\n      };\n      return B3MultiPropagator2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/propagator-b3/build/esm/B3SinglePropagator.js\nfunction convertToTraceId128(traceId) {\n  return traceId.length === 32 ? traceId : \"\" + PADDING + traceId;\n}\nfunction convertToTraceFlags(samplingState) {\n  if (samplingState && SAMPLED_VALUES.has(samplingState)) {\n    return TraceFlags.SAMPLED;\n  }\n  return TraceFlags.NONE;\n}\nvar __read9, B3_CONTEXT_REGEX, PADDING, SAMPLED_VALUES, DEBUG_STATE, B3SinglePropagator;\nvar init_B3SinglePropagator = __esm({\n  \"node_modules/@opentelemetry/propagator-b3/build/esm/B3SinglePropagator.js\"() {\n    init_esm();\n    init_esm3();\n    init_common();\n    init_constants2();\n    __read9 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    B3_CONTEXT_REGEX = /((?:[0-9a-f]{16}){1,2})-([0-9a-f]{16})(?:-([01d](?![0-9a-f])))?(?:-([0-9a-f]{16}))?/;\n    PADDING = \"0\".repeat(16);\n    SAMPLED_VALUES = /* @__PURE__ */ new Set([\"d\", \"1\"]);\n    DEBUG_STATE = \"d\";\n    B3SinglePropagator = /** @class */\n    function() {\n      function B3SinglePropagator2() {\n      }\n      B3SinglePropagator2.prototype.inject = function(context2, carrier, setter) {\n        var spanContext = trace.getSpanContext(context2);\n        if (!spanContext || !isSpanContextValid(spanContext) || isTracingSuppressed(context2))\n          return;\n        var samplingState = context2.getValue(B3_DEBUG_FLAG_KEY) || spanContext.traceFlags & 1;\n        var value = spanContext.traceId + \"-\" + spanContext.spanId + \"-\" + samplingState;\n        setter.set(carrier, B3_CONTEXT_HEADER, value);\n      };\n      B3SinglePropagator2.prototype.extract = function(context2, carrier, getter) {\n        var header = getter.get(carrier, B3_CONTEXT_HEADER);\n        var b3Context = Array.isArray(header) ? header[0] : header;\n        if (typeof b3Context !== \"string\")\n          return context2;\n        var match = b3Context.match(B3_CONTEXT_REGEX);\n        if (!match)\n          return context2;\n        var _a2 = __read9(match, 4), extractedTraceId = _a2[1], spanId = _a2[2], samplingState = _a2[3];\n        var traceId = convertToTraceId128(extractedTraceId);\n        if (!isValidTraceId(traceId) || !isValidSpanId(spanId))\n          return context2;\n        var traceFlags = convertToTraceFlags(samplingState);\n        if (samplingState === DEBUG_STATE) {\n          context2 = context2.setValue(B3_DEBUG_FLAG_KEY, samplingState);\n        }\n        return trace.setSpanContext(context2, {\n          traceId,\n          spanId,\n          isRemote: true,\n          traceFlags\n        });\n      };\n      B3SinglePropagator2.prototype.fields = function() {\n        return [B3_CONTEXT_HEADER];\n      };\n      return B3SinglePropagator2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/propagator-b3/build/esm/types.js\nvar B3InjectEncoding;\nvar init_types3 = __esm({\n  \"node_modules/@opentelemetry/propagator-b3/build/esm/types.js\"() {\n    (function(B3InjectEncoding2) {\n      B3InjectEncoding2[B3InjectEncoding2[\"SINGLE_HEADER\"] = 0] = \"SINGLE_HEADER\";\n      B3InjectEncoding2[B3InjectEncoding2[\"MULTI_HEADER\"] = 1] = \"MULTI_HEADER\";\n    })(B3InjectEncoding || (B3InjectEncoding = {}));\n  }\n});\n\n// node_modules/@opentelemetry/propagator-b3/build/esm/B3Propagator.js\nvar B3Propagator;\nvar init_B3Propagator = __esm({\n  \"node_modules/@opentelemetry/propagator-b3/build/esm/B3Propagator.js\"() {\n    init_esm3();\n    init_B3MultiPropagator();\n    init_B3SinglePropagator();\n    init_constants2();\n    init_types3();\n    B3Propagator = /** @class */\n    function() {\n      function B3Propagator2(config) {\n        if (config === void 0) {\n          config = {};\n        }\n        this._b3MultiPropagator = new B3MultiPropagator();\n        this._b3SinglePropagator = new B3SinglePropagator();\n        if (config.injectEncoding === B3InjectEncoding.MULTI_HEADER) {\n          this._inject = this._b3MultiPropagator.inject;\n          this._fields = this._b3MultiPropagator.fields();\n        } else {\n          this._inject = this._b3SinglePropagator.inject;\n          this._fields = this._b3SinglePropagator.fields();\n        }\n      }\n      B3Propagator2.prototype.inject = function(context2, carrier, setter) {\n        if (isTracingSuppressed(context2)) {\n          return;\n        }\n        this._inject(context2, carrier, setter);\n      };\n      B3Propagator2.prototype.extract = function(context2, carrier, getter) {\n        var header = getter.get(carrier, B3_CONTEXT_HEADER);\n        var b3Context = Array.isArray(header) ? header[0] : header;\n        if (b3Context) {\n          return this._b3SinglePropagator.extract(context2, carrier, getter);\n        } else {\n          return this._b3MultiPropagator.extract(context2, carrier, getter);\n        }\n      };\n      B3Propagator2.prototype.fields = function() {\n        return this._fields;\n      };\n      return B3Propagator2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/propagator-b3/build/esm/index.js\nvar esm_exports4 = {};\n__export(esm_exports4, {\n  B3InjectEncoding: () => B3InjectEncoding,\n  B3Propagator: () => B3Propagator,\n  B3_CONTEXT_HEADER: () => B3_CONTEXT_HEADER,\n  X_B3_FLAGS: () => X_B3_FLAGS,\n  X_B3_PARENT_SPAN_ID: () => X_B3_PARENT_SPAN_ID,\n  X_B3_SAMPLED: () => X_B3_SAMPLED,\n  X_B3_SPAN_ID: () => X_B3_SPAN_ID,\n  X_B3_TRACE_ID: () => X_B3_TRACE_ID\n});\nvar init_esm4 = __esm({\n  \"node_modules/@opentelemetry/propagator-b3/build/esm/index.js\"() {\n    init_B3Propagator();\n    init_constants2();\n    init_types3();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js\nvar ExceptionEventName;\nvar init_enums = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js\"() {\n    ExceptionEventName = \"exception\";\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\nvar __values5, __read10, Span;\nvar init_Span = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\"() {\n    init_esm();\n    init_esm3();\n    init_esm2();\n    init_enums();\n    __values5 = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n    __read10 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    Span = /** @class */\n    function() {\n      function Span4(parentTracer, context2, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock, attributes) {\n        if (links === void 0) {\n          links = [];\n        }\n        this.attributes = {};\n        this.links = [];\n        this.events = [];\n        this._droppedAttributesCount = 0;\n        this._droppedEventsCount = 0;\n        this._droppedLinksCount = 0;\n        this.status = {\n          code: SpanStatusCode.UNSET\n        };\n        this.endTime = [0, 0];\n        this._ended = false;\n        this._duration = [-1, -1];\n        this.name = spanName;\n        this._spanContext = spanContext;\n        this.parentSpanId = parentSpanId;\n        this.kind = kind;\n        this.links = links;\n        var now = Date.now();\n        this._performanceStartTime = otperformance.now();\n        this._performanceOffset = now - (this._performanceStartTime + getTimeOrigin());\n        this._startTimeProvided = startTime != null;\n        this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);\n        this.resource = parentTracer.resource;\n        this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n        this._spanLimits = parentTracer.getSpanLimits();\n        this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;\n        if (attributes != null) {\n          this.setAttributes(attributes);\n        }\n        this._spanProcessor = parentTracer.getActiveSpanProcessor();\n        this._spanProcessor.onStart(this, context2);\n      }\n      Span4.prototype.spanContext = function() {\n        return this._spanContext;\n      };\n      Span4.prototype.setAttribute = function(key, value) {\n        if (value == null || this._isSpanEnded())\n          return this;\n        if (key.length === 0) {\n          diag2.warn(\"Invalid attribute key: \" + key);\n          return this;\n        }\n        if (!isAttributeValue(value)) {\n          diag2.warn(\"Invalid attribute value set for key: \" + key);\n          return this;\n        }\n        if (Object.keys(this.attributes).length >= this._spanLimits.attributeCountLimit && !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n          this._droppedAttributesCount++;\n          return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n      };\n      Span4.prototype.setAttributes = function(attributes) {\n        var e_1, _a2;\n        try {\n          for (var _b = __values5(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read10(_c.value, 2), k = _d[0], v = _d[1];\n            this.setAttribute(k, v);\n          }\n        } catch (e_1_1) {\n          e_1 = { error: e_1_1 };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a2 = _b.return))\n              _a2.call(_b);\n          } finally {\n            if (e_1)\n              throw e_1.error;\n          }\n        }\n        return this;\n      };\n      Span4.prototype.addEvent = function(name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n          return this;\n        if (this._spanLimits.eventCountLimit === 0) {\n          diag2.warn(\"No events allowed.\");\n          this._droppedEventsCount++;\n          return this;\n        }\n        if (this.events.length >= this._spanLimits.eventCountLimit) {\n          if (this._droppedEventsCount === 0) {\n            diag2.debug(\"Dropping extra events.\");\n          }\n          this.events.shift();\n          this._droppedEventsCount++;\n        }\n        if (isTimeInput(attributesOrStartTime)) {\n          if (!isTimeInput(timeStamp)) {\n            timeStamp = attributesOrStartTime;\n          }\n          attributesOrStartTime = void 0;\n        }\n        var attributes = sanitizeAttributes(attributesOrStartTime);\n        this.events.push({\n          name,\n          attributes,\n          time: this._getTime(timeStamp),\n          droppedAttributesCount: 0\n        });\n        return this;\n      };\n      Span4.prototype.setStatus = function(status) {\n        if (this._isSpanEnded())\n          return this;\n        this.status = status;\n        return this;\n      };\n      Span4.prototype.updateName = function(name) {\n        if (this._isSpanEnded())\n          return this;\n        this.name = name;\n        return this;\n      };\n      Span4.prototype.end = function(endTime) {\n        if (this._isSpanEnded()) {\n          diag2.error(this.name + \" \" + this._spanContext.traceId + \"-\" + this._spanContext.spanId + \" - You can only call end() on a span once.\");\n          return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = hrTimeDuration(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n          diag2.warn(\"Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.\", this.startTime, this.endTime);\n          this.endTime = this.startTime.slice();\n          this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n          diag2.warn(\"Dropped \" + this._droppedEventsCount + \" events because eventCountLimit reached\");\n        }\n        this._spanProcessor.onEnd(this);\n      };\n      Span4.prototype._getTime = function(inp) {\n        if (typeof inp === \"number\" && inp < otperformance.now()) {\n          return hrTime(inp + this._performanceOffset);\n        }\n        if (typeof inp === \"number\") {\n          return millisToHrTime(inp);\n        }\n        if (inp instanceof Date) {\n          return millisToHrTime(inp.getTime());\n        }\n        if (isTimeInputHrTime(inp)) {\n          return inp;\n        }\n        if (this._startTimeProvided) {\n          return millisToHrTime(Date.now());\n        }\n        var msDuration = otperformance.now() - this._performanceStartTime;\n        return addHrTimes(this.startTime, millisToHrTime(msDuration));\n      };\n      Span4.prototype.isRecording = function() {\n        return this._ended === false;\n      };\n      Span4.prototype.recordException = function(exception, time) {\n        var attributes = {};\n        if (typeof exception === \"string\") {\n          attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception;\n        } else if (exception) {\n          if (exception.code) {\n            attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.code.toString();\n          } else if (exception.name) {\n            attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.name;\n          }\n          if (exception.message) {\n            attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;\n          }\n          if (exception.stack) {\n            attributes[SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;\n          }\n        }\n        if (attributes[SemanticAttributes.EXCEPTION_TYPE] || attributes[SemanticAttributes.EXCEPTION_MESSAGE]) {\n          this.addEvent(ExceptionEventName, attributes, time);\n        } else {\n          diag2.warn(\"Failed to record an exception \" + exception);\n        }\n      };\n      Object.defineProperty(Span4.prototype, \"duration\", {\n        get: function() {\n          return this._duration;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(Span4.prototype, \"ended\", {\n        get: function() {\n          return this._ended;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(Span4.prototype, \"droppedAttributesCount\", {\n        get: function() {\n          return this._droppedAttributesCount;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(Span4.prototype, \"droppedEventsCount\", {\n        get: function() {\n          return this._droppedEventsCount;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      Object.defineProperty(Span4.prototype, \"droppedLinksCount\", {\n        get: function() {\n          return this._droppedLinksCount;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      Span4.prototype._isSpanEnded = function() {\n        if (this._ended) {\n          diag2.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n        }\n        return this._ended;\n      };\n      Span4.prototype._truncateToLimitUtil = function(value, limit) {\n        if (value.length <= limit) {\n          return value;\n        }\n        return value.substr(0, limit);\n      };\n      Span4.prototype._truncateToSize = function(value) {\n        var _this = this;\n        var limit = this._attributeValueLengthLimit;\n        if (limit <= 0) {\n          diag2.warn(\"Attribute value limit must be positive, got \" + limit);\n          return value;\n        }\n        if (typeof value === \"string\") {\n          return this._truncateToLimitUtil(value, limit);\n        }\n        if (Array.isArray(value)) {\n          return value.map(function(val) {\n            return typeof val === \"string\" ? _this._truncateToLimitUtil(val, limit) : val;\n          });\n        }\n        return value;\n      };\n      return Span4;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\nvar SamplingDecision2;\nvar init_Sampler = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\"() {\n    (function(SamplingDecision3) {\n      SamplingDecision3[SamplingDecision3[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n      SamplingDecision3[SamplingDecision3[\"RECORD\"] = 1] = \"RECORD\";\n      SamplingDecision3[SamplingDecision3[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n    })(SamplingDecision2 || (SamplingDecision2 = {}));\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\nvar AlwaysOffSampler2;\nvar init_AlwaysOffSampler2 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\"() {\n    init_Sampler();\n    AlwaysOffSampler2 = /** @class */\n    function() {\n      function AlwaysOffSampler3() {\n      }\n      AlwaysOffSampler3.prototype.shouldSample = function() {\n        return {\n          decision: SamplingDecision2.NOT_RECORD\n        };\n      };\n      AlwaysOffSampler3.prototype.toString = function() {\n        return \"AlwaysOffSampler\";\n      };\n      return AlwaysOffSampler3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\nvar AlwaysOnSampler2;\nvar init_AlwaysOnSampler2 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\"() {\n    init_Sampler();\n    AlwaysOnSampler2 = /** @class */\n    function() {\n      function AlwaysOnSampler3() {\n      }\n      AlwaysOnSampler3.prototype.shouldSample = function() {\n        return {\n          decision: SamplingDecision2.RECORD_AND_SAMPLED\n        };\n      };\n      AlwaysOnSampler3.prototype.toString = function() {\n        return \"AlwaysOnSampler\";\n      };\n      return AlwaysOnSampler3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\nvar ParentBasedSampler2;\nvar init_ParentBasedSampler2 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\"() {\n    init_esm();\n    init_esm3();\n    init_AlwaysOffSampler2();\n    init_AlwaysOnSampler2();\n    ParentBasedSampler2 = /** @class */\n    function() {\n      function ParentBasedSampler3(config) {\n        var _a2, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n          globalErrorHandler(new Error(\"ParentBasedSampler must have a root sampler configured\"));\n          this._root = new AlwaysOnSampler2();\n        }\n        this._remoteParentSampled = (_a2 = config.remoteParentSampled) !== null && _a2 !== void 0 ? _a2 : new AlwaysOnSampler2();\n        this._remoteParentNotSampled = (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler2();\n        this._localParentSampled = (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler2();\n        this._localParentNotSampled = (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler2();\n      }\n      ParentBasedSampler3.prototype.shouldSample = function(context2, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = trace.getSpanContext(context2);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n          return this._root.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n          if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._remoteParentSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n          }\n          return this._remoteParentNotSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n          return this._localParentSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context2, traceId, spanName, spanKind, attributes, links);\n      };\n      ParentBasedSampler3.prototype.toString = function() {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n      };\n      return ParentBasedSampler3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\nvar TraceIdRatioBasedSampler2;\nvar init_TraceIdRatioBasedSampler2 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\"() {\n    init_esm();\n    init_Sampler();\n    TraceIdRatioBasedSampler2 = /** @class */\n    function() {\n      function TraceIdRatioBasedSampler3(_ratio) {\n        if (_ratio === void 0) {\n          _ratio = 0;\n        }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 4294967295);\n      }\n      TraceIdRatioBasedSampler3.prototype.shouldSample = function(context2, traceId) {\n        return {\n          decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound ? SamplingDecision2.RECORD_AND_SAMPLED : SamplingDecision2.NOT_RECORD\n        };\n      };\n      TraceIdRatioBasedSampler3.prototype.toString = function() {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n      };\n      TraceIdRatioBasedSampler3.prototype._normalize = function(ratio) {\n        if (typeof ratio !== \"number\" || isNaN(ratio))\n          return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n      };\n      TraceIdRatioBasedSampler3.prototype._accumulate = function(traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n          var pos = i * 8;\n          var part = parseInt(traceId.slice(pos, pos + 8), 16);\n          accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n      };\n      return TraceIdRatioBasedSampler3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\nfunction loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 3e4,\n    generalLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT\n    },\n    spanLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT\n    }\n  };\n}\nfunction buildSamplerFromEnv(environment) {\n  if (environment === void 0) {\n    environment = getEnv();\n  }\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler2();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler2();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler2({\n        root: new AlwaysOnSampler2()\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler2({\n        root: new AlwaysOffSampler2()\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler2(getSamplerProbabilityFromEnv(environment));\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler2({\n        root: new TraceIdRatioBasedSampler2(getSamplerProbabilityFromEnv(environment))\n      });\n    default:\n      diag2.error('OTEL_TRACES_SAMPLER value \"' + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + '\".');\n      return new AlwaysOnSampler2();\n  }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n  if (environment.OTEL_TRACES_SAMPLER_ARG === void 0 || environment.OTEL_TRACES_SAMPLER_ARG === \"\") {\n    diag2.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n  if (isNaN(probability)) {\n    diag2.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  if (probability < 0 || probability > 1) {\n    diag2.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n    return DEFAULT_RATIO;\n  }\n  return probability;\n}\nvar env, FALLBACK_OTEL_TRACES_SAMPLER, DEFAULT_RATIO;\nvar init_config = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\"() {\n    init_esm();\n    init_esm3();\n    init_AlwaysOffSampler2();\n    init_AlwaysOnSampler2();\n    init_ParentBasedSampler2();\n    init_TraceIdRatioBasedSampler2();\n    env = getEnv();\n    FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\n    DEFAULT_RATIO = 1;\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\nfunction mergeConfig(userConfig) {\n  var perInstanceDefaults = {\n    sampler: buildSamplerFromEnv()\n  };\n  var DEFAULT_CONFIG = loadDefaultConfig();\n  var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n  target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n  target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n  return target;\n}\nfunction reconfigureLimits(userConfig) {\n  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n  var spanLimits = Object.assign({}, userConfig.spanLimits);\n  var parsedEnvConfig = getEnvWithoutDefaults();\n  spanLimits.attributeCountLimit = (_f = (_e = (_d = (_b = (_a2 = userConfig.spanLimits) === null || _a2 === void 0 ? void 0 : _a2.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n  spanLimits.attributeValueLengthLimit = (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n  return Object.assign({}, userConfig, { spanLimits });\n}\nvar init_utility = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\"() {\n    init_config();\n    init_esm3();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js\nvar BatchSpanProcessorBase;\nvar init_BatchSpanProcessorBase = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js\"() {\n    init_esm();\n    init_esm3();\n    BatchSpanProcessorBase = /** @class */\n    function() {\n      function BatchSpanProcessorBase2(_exporter, config) {\n        this._exporter = _exporter;\n        this._isExporting = false;\n        this._finishedSpans = [];\n        this._droppedSpansCount = 0;\n        var env3 = getEnv();\n        this._maxExportBatchSize = typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === \"number\" ? config.maxExportBatchSize : env3.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize = typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === \"number\" ? config.maxQueueSize : env3.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis = typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === \"number\" ? config.scheduledDelayMillis : env3.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis = typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === \"number\" ? config.exportTimeoutMillis : env3.OTEL_BSP_EXPORT_TIMEOUT;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n          diag2.warn(\"BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize\");\n          this._maxExportBatchSize = this._maxQueueSize;\n        }\n      }\n      BatchSpanProcessorBase2.prototype.forceFlush = function() {\n        if (this._shutdownOnce.isCalled) {\n          return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n      };\n      BatchSpanProcessorBase2.prototype.onStart = function(_span, _parentContext) {\n      };\n      BatchSpanProcessorBase2.prototype.onEnd = function(span) {\n        if (this._shutdownOnce.isCalled) {\n          return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n          return;\n        }\n        this._addToBuffer(span);\n      };\n      BatchSpanProcessorBase2.prototype.shutdown = function() {\n        return this._shutdownOnce.call();\n      };\n      BatchSpanProcessorBase2.prototype._shutdown = function() {\n        var _this = this;\n        return Promise.resolve().then(function() {\n          return _this.onShutdown();\n        }).then(function() {\n          return _this._flushAll();\n        }).then(function() {\n          return _this._exporter.shutdown();\n        });\n      };\n      BatchSpanProcessorBase2.prototype._addToBuffer = function(span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n          if (this._droppedSpansCount === 0) {\n            diag2.debug(\"maxQueueSize reached, dropping spans\");\n          }\n          this._droppedSpansCount++;\n          return;\n        }\n        if (this._droppedSpansCount > 0) {\n          diag2.warn(\"Dropped \" + this._droppedSpansCount + \" spans because maxQueueSize reached\");\n          this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n      };\n      BatchSpanProcessorBase2.prototype._flushAll = function() {\n        var _this = this;\n        return new Promise(function(resolve, reject) {\n          var promises = [];\n          var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n          for (var i = 0, j = count; i < j; i++) {\n            promises.push(_this._flushOneBatch());\n          }\n          Promise.all(promises).then(function() {\n            resolve();\n          }).catch(reject);\n        });\n      };\n      BatchSpanProcessorBase2.prototype._flushOneBatch = function() {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n          return Promise.resolve();\n        }\n        return new Promise(function(resolve, reject) {\n          var timer = setTimeout(function() {\n            reject(new Error(\"Timeout\"));\n          }, _this._exportTimeoutMillis);\n          context.with(suppressTracing(context.active()), function() {\n            var spans;\n            if (_this._finishedSpans.length <= _this._maxExportBatchSize) {\n              spans = _this._finishedSpans;\n              _this._finishedSpans = [];\n            } else {\n              spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);\n            }\n            var doExport = function() {\n              return _this._exporter.export(spans, function(result) {\n                var _a2;\n                clearTimeout(timer);\n                if (result.code === ExportResultCode.SUCCESS) {\n                  resolve();\n                } else {\n                  reject((_a2 = result.error) !== null && _a2 !== void 0 ? _a2 : new Error(\"BatchSpanProcessor: span export failed\"));\n                }\n              });\n            };\n            var pendingResources = null;\n            for (var i = 0, len = spans.length; i < len; i++) {\n              var span = spans[i];\n              if (span.resource.asyncAttributesPending && span.resource.waitForAsyncAttributes) {\n                pendingResources !== null && pendingResources !== void 0 ? pendingResources : pendingResources = [];\n                pendingResources.push(span.resource.waitForAsyncAttributes());\n              }\n            }\n            if (pendingResources === null) {\n              doExport();\n            } else {\n              Promise.all(pendingResources).then(doExport, function(err) {\n                globalErrorHandler(err);\n                reject(err);\n              });\n            }\n          });\n        });\n      };\n      BatchSpanProcessorBase2.prototype._maybeStartTimer = function() {\n        var _this = this;\n        if (this._isExporting)\n          return;\n        var flush = function() {\n          _this._isExporting = true;\n          _this._flushOneBatch().finally(function() {\n            _this._isExporting = false;\n            if (_this._finishedSpans.length > 0) {\n              _this._clearTimer();\n              _this._maybeStartTimer();\n            }\n          }).catch(function(e) {\n            _this._isExporting = false;\n            globalErrorHandler(e);\n          });\n        };\n        if (this._finishedSpans.length >= this._maxExportBatchSize) {\n          return flush();\n        }\n        if (this._timer !== void 0)\n          return;\n        this._timer = setTimeout(function() {\n          return flush();\n        }, this._scheduledDelayMillis);\n        unrefTimer(this._timer);\n      };\n      BatchSpanProcessorBase2.prototype._clearTimer = function() {\n        if (this._timer !== void 0) {\n          clearTimeout(this._timer);\n          this._timer = void 0;\n        }\n      };\n      return BatchSpanProcessorBase2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js\nvar __extends3, BatchSpanProcessor;\nvar init_BatchSpanProcessor = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js\"() {\n    init_BatchSpanProcessorBase();\n    __extends3 = function() {\n      var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {\n          d2.__proto__ = b2;\n        } || function(d2, b2) {\n          for (var p in b2)\n            if (Object.prototype.hasOwnProperty.call(b2, p))\n              d2[p] = b2[p];\n        };\n        return extendStatics(d, b);\n      };\n      return function(d, b) {\n        if (typeof b !== \"function\" && b !== null)\n          throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n          this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n    BatchSpanProcessor = /** @class */\n    function(_super) {\n      __extends3(BatchSpanProcessor3, _super);\n      function BatchSpanProcessor3() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      BatchSpanProcessor3.prototype.onShutdown = function() {\n      };\n      return BatchSpanProcessor3;\n    }(BatchSpanProcessorBase);\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js\nfunction getIdGenerator2(bytes) {\n  return function generateId() {\n    for (var i = 0; i < bytes / 4; i++) {\n      SHARED_BUFFER2.writeUInt32BE(Math.random() * Math.pow(2, 32) >>> 0, i * 4);\n    }\n    for (var i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER2[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER2[bytes - 1] = 1;\n      }\n    }\n    return SHARED_BUFFER2.toString(\"hex\", 0, bytes);\n  };\n}\nvar SPAN_ID_BYTES2, TRACE_ID_BYTES2, RandomIdGenerator2, SHARED_BUFFER2;\nvar init_RandomIdGenerator2 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js\"() {\n    SPAN_ID_BYTES2 = 8;\n    TRACE_ID_BYTES2 = 16;\n    RandomIdGenerator2 = /** @class */\n    function() {\n      function RandomIdGenerator3() {\n        this.generateTraceId = getIdGenerator2(TRACE_ID_BYTES2);\n        this.generateSpanId = getIdGenerator2(SPAN_ID_BYTES2);\n      }\n      return RandomIdGenerator3;\n    }();\n    SHARED_BUFFER2 = Buffer.allocUnsafe(TRACE_ID_BYTES2);\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/index.js\nvar init_node3 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/index.js\"() {\n    init_BatchSpanProcessor();\n    init_RandomIdGenerator2();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/index.js\nvar init_platform3 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/index.js\"() {\n    init_node3();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\nvar Tracer;\nvar init_Tracer = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\"() {\n    init_esm();\n    init_esm3();\n    init_Span();\n    init_utility();\n    init_platform3();\n    Tracer = /** @class */\n    function() {\n      function Tracer2(instrumentationLibrary, config, _tracerProvider) {\n        this._tracerProvider = _tracerProvider;\n        var localConfig = mergeConfig(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new RandomIdGenerator2();\n        this.resource = _tracerProvider.resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n      }\n      Tracer2.prototype.startSpan = function(name, options, context2) {\n        var _a2, _b, _c;\n        if (options === void 0) {\n          options = {};\n        }\n        if (context2 === void 0) {\n          context2 = context.active();\n        }\n        if (options.root) {\n          context2 = trace.deleteSpan(context2);\n        }\n        var parentSpan = trace.getSpan(context2);\n        if (isTracingSuppressed(context2)) {\n          diag2.debug(\"Instrumentation suppressed, returning Noop Span\");\n          var nonRecordingSpan = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);\n          return nonRecordingSpan;\n        }\n        var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();\n        var spanId = this._idGenerator.generateSpanId();\n        var traceId;\n        var traceState;\n        var parentSpanId;\n        if (!parentSpanContext || !trace.isSpanContextValid(parentSpanContext)) {\n          traceId = this._idGenerator.generateTraceId();\n        } else {\n          traceId = parentSpanContext.traceId;\n          traceState = parentSpanContext.traceState;\n          parentSpanId = parentSpanContext.spanId;\n        }\n        var spanKind = (_a2 = options.kind) !== null && _a2 !== void 0 ? _a2 : SpanKind.INTERNAL;\n        var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function(link) {\n          return {\n            context: link.context,\n            attributes: sanitizeAttributes(link.attributes)\n          };\n        });\n        var attributes = sanitizeAttributes(options.attributes);\n        var samplingResult = this._sampler.shouldSample(context2, traceId, name, spanKind, attributes, links);\n        traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;\n        var traceFlags = samplingResult.decision === SamplingDecision.RECORD_AND_SAMPLED ? TraceFlags.SAMPLED : TraceFlags.NONE;\n        var spanContext = { traceId, spanId, traceFlags, traceState };\n        if (samplingResult.decision === SamplingDecision.NOT_RECORD) {\n          diag2.debug(\"Recording is off, propagating context in a non-recording span\");\n          var nonRecordingSpan = trace.wrapSpanContext(spanContext);\n          return nonRecordingSpan;\n        }\n        var initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n        var span = new Span(this, context2, name, spanContext, spanKind, parentSpanId, links, options.startTime, void 0, initAttributes);\n        return span;\n      };\n      Tracer2.prototype.startActiveSpan = function(name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n          return;\n        } else if (arguments.length === 2) {\n          fn = arg2;\n        } else if (arguments.length === 3) {\n          opts = arg2;\n          fn = arg3;\n        } else {\n          opts = arg2;\n          ctx = arg3;\n          fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = trace.setSpan(parentContext, span);\n        return context.with(contextWithSpanSet, fn, void 0, span);\n      };\n      Tracer2.prototype.getGeneralLimits = function() {\n        return this._generalLimits;\n      };\n      Tracer2.prototype.getSpanLimits = function() {\n        return this._spanLimits;\n      };\n      Tracer2.prototype.getActiveSpanProcessor = function() {\n        return this._tracerProvider.getActiveSpanProcessor();\n      };\n      return Tracer2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js\nfunction defaultServiceName() {\n  return \"unknown_service:\" + process.argv0;\n}\nvar init_default_service_name = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/utils.js\nvar normalizeArch, normalizeType;\nvar init_utils5 = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/utils.js\"() {\n    normalizeArch = function(nodeArchString) {\n      switch (nodeArchString) {\n        case \"arm\":\n          return \"arm32\";\n        case \"ppc\":\n          return \"ppc32\";\n        case \"x64\":\n          return \"amd64\";\n        default:\n          return nodeArchString;\n      }\n    };\n    normalizeType = function(nodePlatform) {\n      switch (nodePlatform) {\n        case \"sunos\":\n          return \"solaris\";\n        case \"win32\":\n          return \"windows\";\n        default:\n          return nodePlatform;\n      }\n    };\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/execAsync.js\nvar child_process, util, execAsync;\nvar init_execAsync = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/execAsync.js\"() {\n    child_process = __toESM(__webpack_require__(/*! child_process */ \"child_process\"));\n    util = __toESM(__webpack_require__(/*! util */ \"util\"));\n    execAsync = util.promisify(child_process.exec);\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-darwin.js\nvar getMachineId_darwin_exports = {};\n__export(getMachineId_darwin_exports, {\n  getMachineId: () => getMachineId\n});\nfunction getMachineId() {\n  return __awaiter(this, void 0, void 0, function() {\n    var result, idLine, parts, e_1;\n    return __generator(this, function(_a2) {\n      switch (_a2.label) {\n        case 0:\n          _a2.trys.push([0, 2, , 3]);\n          return [4, execAsync('ioreg -rd1 -c \"IOPlatformExpertDevice\"')];\n        case 1:\n          result = _a2.sent();\n          idLine = result.stdout.split(\"\\n\").find(function(line) {\n            return line.includes(\"IOPlatformUUID\");\n          });\n          if (!idLine) {\n            return [2, \"\"];\n          }\n          parts = idLine.split('\" = \"');\n          if (parts.length === 2) {\n            return [2, parts[1].slice(0, -1)];\n          }\n          return [3, 3];\n        case 2:\n          e_1 = _a2.sent();\n          diag2.debug(\"error reading machine id: \" + e_1);\n          return [3, 3];\n        case 3:\n          return [2, \"\"];\n      }\n    });\n  });\n}\nvar __awaiter, __generator;\nvar init_getMachineId_darwin = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-darwin.js\"() {\n    init_execAsync();\n    init_esm();\n    __awaiter = function(thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n          resolve(value);\n        });\n      }\n      return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n    __generator = function(thisArg, body) {\n      var _ = { label: 0, sent: function() {\n        if (t[0] & 1)\n          throw t[1];\n        return t[1];\n      }, trys: [], ops: [] }, f, y, t, g;\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n      }), g;\n      function verb(n) {\n        return function(v) {\n          return step([n, v]);\n        };\n      }\n      function step(op) {\n        if (f)\n          throw new TypeError(\"Generator is already executing.\");\n        while (_)\n          try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n              return t;\n            if (y = 0, t)\n              op = [op[0] & 2, t.value];\n            switch (op[0]) {\n              case 0:\n              case 1:\n                t = op;\n                break;\n              case 4:\n                _.label++;\n                return { value: op[1], done: false };\n              case 5:\n                _.label++;\n                y = op[1];\n                op = [0];\n                continue;\n              case 7:\n                op = _.ops.pop();\n                _.trys.pop();\n                continue;\n              default:\n                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                  _ = 0;\n                  continue;\n                }\n                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                  _.label = op[1];\n                  break;\n                }\n                if (op[0] === 6 && _.label < t[1]) {\n                  _.label = t[1];\n                  t = op;\n                  break;\n                }\n                if (t && _.label < t[2]) {\n                  _.label = t[2];\n                  _.ops.push(op);\n                  break;\n                }\n                if (t[2])\n                  _.ops.pop();\n                _.trys.pop();\n                continue;\n            }\n            op = body.call(thisArg, _);\n          } catch (e) {\n            op = [6, e];\n            y = 0;\n          } finally {\n            f = t = 0;\n          }\n        if (op[0] & 5)\n          throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n      }\n    };\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-linux.js\nvar getMachineId_linux_exports = {};\n__export(getMachineId_linux_exports, {\n  getMachineId: () => getMachineId2\n});\nfunction getMachineId2() {\n  return __awaiter2(this, void 0, void 0, function() {\n    var paths, paths_1, paths_1_1, path3, result, e_1, e_2_1;\n    var e_2, _a2;\n    return __generator2(this, function(_b) {\n      switch (_b.label) {\n        case 0:\n          paths = [\"/etc/machine-id\", \"/var/lib/dbus/machine-id\"];\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 8, 9, 10]);\n          paths_1 = __values6(paths), paths_1_1 = paths_1.next();\n          _b.label = 2;\n        case 2:\n          if (!!paths_1_1.done)\n            return [3, 7];\n          path3 = paths_1_1.value;\n          _b.label = 3;\n        case 3:\n          _b.trys.push([3, 5, , 6]);\n          return [4, import_fs.promises.readFile(path3, { encoding: \"utf8\" })];\n        case 4:\n          result = _b.sent();\n          return [2, result.trim()];\n        case 5:\n          e_1 = _b.sent();\n          diag2.debug(\"error reading machine id: \" + e_1);\n          return [3, 6];\n        case 6:\n          paths_1_1 = paths_1.next();\n          return [3, 2];\n        case 7:\n          return [3, 10];\n        case 8:\n          e_2_1 = _b.sent();\n          e_2 = { error: e_2_1 };\n          return [3, 10];\n        case 9:\n          try {\n            if (paths_1_1 && !paths_1_1.done && (_a2 = paths_1.return))\n              _a2.call(paths_1);\n          } finally {\n            if (e_2)\n              throw e_2.error;\n          }\n          return [\n            7\n            /*endfinally*/\n          ];\n        case 10:\n          return [2, \"\"];\n      }\n    });\n  });\n}\nvar import_fs, __awaiter2, __generator2, __values6;\nvar init_getMachineId_linux = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-linux.js\"() {\n    import_fs = __webpack_require__(/*! fs */ \"fs\");\n    init_esm();\n    __awaiter2 = function(thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n          resolve(value);\n        });\n      }\n      return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n    __generator2 = function(thisArg, body) {\n      var _ = { label: 0, sent: function() {\n        if (t[0] & 1)\n          throw t[1];\n        return t[1];\n      }, trys: [], ops: [] }, f, y, t, g;\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n      }), g;\n      function verb(n) {\n        return function(v) {\n          return step([n, v]);\n        };\n      }\n      function step(op) {\n        if (f)\n          throw new TypeError(\"Generator is already executing.\");\n        while (_)\n          try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n              return t;\n            if (y = 0, t)\n              op = [op[0] & 2, t.value];\n            switch (op[0]) {\n              case 0:\n              case 1:\n                t = op;\n                break;\n              case 4:\n                _.label++;\n                return { value: op[1], done: false };\n              case 5:\n                _.label++;\n                y = op[1];\n                op = [0];\n                continue;\n              case 7:\n                op = _.ops.pop();\n                _.trys.pop();\n                continue;\n              default:\n                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                  _ = 0;\n                  continue;\n                }\n                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                  _.label = op[1];\n                  break;\n                }\n                if (op[0] === 6 && _.label < t[1]) {\n                  _.label = t[1];\n                  t = op;\n                  break;\n                }\n                if (t && _.label < t[2]) {\n                  _.label = t[2];\n                  _.ops.push(op);\n                  break;\n                }\n                if (t[2])\n                  _.ops.pop();\n                _.trys.pop();\n                continue;\n            }\n            op = body.call(thisArg, _);\n          } catch (e) {\n            op = [6, e];\n            y = 0;\n          } finally {\n            f = t = 0;\n          }\n        if (op[0] & 5)\n          throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n      }\n    };\n    __values6 = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-bsd.js\nvar getMachineId_bsd_exports = {};\n__export(getMachineId_bsd_exports, {\n  getMachineId: () => getMachineId3\n});\nfunction getMachineId3() {\n  return __awaiter3(this, void 0, void 0, function() {\n    var result, e_1, result, e_2;\n    return __generator3(this, function(_a2) {\n      switch (_a2.label) {\n        case 0:\n          _a2.trys.push([0, 2, , 3]);\n          return [4, import_fs2.promises.readFile(\"/etc/hostid\", { encoding: \"utf8\" })];\n        case 1:\n          result = _a2.sent();\n          return [2, result.trim()];\n        case 2:\n          e_1 = _a2.sent();\n          diag2.debug(\"error reading machine id: \" + e_1);\n          return [3, 3];\n        case 3:\n          _a2.trys.push([3, 5, , 6]);\n          return [4, execAsync(\"kenv -q smbios.system.uuid\")];\n        case 4:\n          result = _a2.sent();\n          return [2, result.stdout.trim()];\n        case 5:\n          e_2 = _a2.sent();\n          diag2.debug(\"error reading machine id: \" + e_2);\n          return [3, 6];\n        case 6:\n          return [2, \"\"];\n      }\n    });\n  });\n}\nvar import_fs2, __awaiter3, __generator3;\nvar init_getMachineId_bsd = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-bsd.js\"() {\n    import_fs2 = __webpack_require__(/*! fs */ \"fs\");\n    init_execAsync();\n    init_esm();\n    __awaiter3 = function(thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n          resolve(value);\n        });\n      }\n      return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n    __generator3 = function(thisArg, body) {\n      var _ = { label: 0, sent: function() {\n        if (t[0] & 1)\n          throw t[1];\n        return t[1];\n      }, trys: [], ops: [] }, f, y, t, g;\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n      }), g;\n      function verb(n) {\n        return function(v) {\n          return step([n, v]);\n        };\n      }\n      function step(op) {\n        if (f)\n          throw new TypeError(\"Generator is already executing.\");\n        while (_)\n          try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n              return t;\n            if (y = 0, t)\n              op = [op[0] & 2, t.value];\n            switch (op[0]) {\n              case 0:\n              case 1:\n                t = op;\n                break;\n              case 4:\n                _.label++;\n                return { value: op[1], done: false };\n              case 5:\n                _.label++;\n                y = op[1];\n                op = [0];\n                continue;\n              case 7:\n                op = _.ops.pop();\n                _.trys.pop();\n                continue;\n              default:\n                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                  _ = 0;\n                  continue;\n                }\n                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                  _.label = op[1];\n                  break;\n                }\n                if (op[0] === 6 && _.label < t[1]) {\n                  _.label = t[1];\n                  t = op;\n                  break;\n                }\n                if (t && _.label < t[2]) {\n                  _.label = t[2];\n                  _.ops.push(op);\n                  break;\n                }\n                if (t[2])\n                  _.ops.pop();\n                _.trys.pop();\n                continue;\n            }\n            op = body.call(thisArg, _);\n          } catch (e) {\n            op = [6, e];\n            y = 0;\n          } finally {\n            f = t = 0;\n          }\n        if (op[0] & 5)\n          throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n      }\n    };\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-win.js\nvar getMachineId_win_exports = {};\n__export(getMachineId_win_exports, {\n  getMachineId: () => getMachineId4\n});\nfunction getMachineId4() {\n  return __awaiter4(this, void 0, void 0, function() {\n    var args, command, result, parts, e_1;\n    return __generator4(this, function(_a2) {\n      switch (_a2.label) {\n        case 0:\n          args = \"QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography /v MachineGuid\";\n          command = \"%windir%\\\\System32\\\\REG.exe\";\n          if (process2.arch === \"ia32\" && \"PROCESSOR_ARCHITEW6432\" in process2.env) {\n            command = \"%windir%\\\\sysnative\\\\cmd.exe /c \" + command;\n          }\n          _a2.label = 1;\n        case 1:\n          _a2.trys.push([1, 3, , 4]);\n          return [4, execAsync(command + \" \" + args)];\n        case 2:\n          result = _a2.sent();\n          parts = result.stdout.split(\"REG_SZ\");\n          if (parts.length === 2) {\n            return [2, parts[1].trim()];\n          }\n          return [3, 4];\n        case 3:\n          e_1 = _a2.sent();\n          diag2.debug(\"error reading machine id: \" + e_1);\n          return [3, 4];\n        case 4:\n          return [2, \"\"];\n      }\n    });\n  });\n}\nvar process2, __awaiter4, __generator4;\nvar init_getMachineId_win = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-win.js\"() {\n    process2 = __toESM(__webpack_require__(/*! process */ \"process\"));\n    init_execAsync();\n    init_esm();\n    __awaiter4 = function(thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n          resolve(value);\n        });\n      }\n      return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n    __generator4 = function(thisArg, body) {\n      var _ = { label: 0, sent: function() {\n        if (t[0] & 1)\n          throw t[1];\n        return t[1];\n      }, trys: [], ops: [] }, f, y, t, g;\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n      }), g;\n      function verb(n) {\n        return function(v) {\n          return step([n, v]);\n        };\n      }\n      function step(op) {\n        if (f)\n          throw new TypeError(\"Generator is already executing.\");\n        while (_)\n          try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n              return t;\n            if (y = 0, t)\n              op = [op[0] & 2, t.value];\n            switch (op[0]) {\n              case 0:\n              case 1:\n                t = op;\n                break;\n              case 4:\n                _.label++;\n                return { value: op[1], done: false };\n              case 5:\n                _.label++;\n                y = op[1];\n                op = [0];\n                continue;\n              case 7:\n                op = _.ops.pop();\n                _.trys.pop();\n                continue;\n              default:\n                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                  _ = 0;\n                  continue;\n                }\n                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                  _.label = op[1];\n                  break;\n                }\n                if (op[0] === 6 && _.label < t[1]) {\n                  _.label = t[1];\n                  t = op;\n                  break;\n                }\n                if (t && _.label < t[2]) {\n                  _.label = t[2];\n                  _.ops.push(op);\n                  break;\n                }\n                if (t[2])\n                  _.ops.pop();\n                _.trys.pop();\n                continue;\n            }\n            op = body.call(thisArg, _);\n          } catch (e) {\n            op = [6, e];\n            y = 0;\n          } finally {\n            f = t = 0;\n          }\n        if (op[0] & 5)\n          throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n      }\n    };\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-unsupported.js\nvar getMachineId_unsupported_exports = {};\n__export(getMachineId_unsupported_exports, {\n  getMachineId: () => getMachineId5\n});\nfunction getMachineId5() {\n  return __awaiter5(this, void 0, void 0, function() {\n    return __generator5(this, function(_a2) {\n      diag2.debug(\"could not read machine-id: unsupported platform\");\n      return [2, \"\"];\n    });\n  });\n}\nvar __awaiter5, __generator5;\nvar init_getMachineId_unsupported = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId-unsupported.js\"() {\n    init_esm();\n    __awaiter5 = function(thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n          resolve(value);\n        });\n      }\n      return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n    __generator5 = function(thisArg, body) {\n      var _ = { label: 0, sent: function() {\n        if (t[0] & 1)\n          throw t[1];\n        return t[1];\n      }, trys: [], ops: [] }, f, y, t, g;\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n      }), g;\n      function verb(n) {\n        return function(v) {\n          return step([n, v]);\n        };\n      }\n      function step(op) {\n        if (f)\n          throw new TypeError(\"Generator is already executing.\");\n        while (_)\n          try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n              return t;\n            if (y = 0, t)\n              op = [op[0] & 2, t.value];\n            switch (op[0]) {\n              case 0:\n              case 1:\n                t = op;\n                break;\n              case 4:\n                _.label++;\n                return { value: op[1], done: false };\n              case 5:\n                _.label++;\n                y = op[1];\n                op = [0];\n                continue;\n              case 7:\n                op = _.ops.pop();\n                _.trys.pop();\n                continue;\n              default:\n                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                  _ = 0;\n                  continue;\n                }\n                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                  _.label = op[1];\n                  break;\n                }\n                if (op[0] === 6 && _.label < t[1]) {\n                  _.label = t[1];\n                  t = op;\n                  break;\n                }\n                if (t && _.label < t[2]) {\n                  _.label = t[2];\n                  _.ops.push(op);\n                  break;\n                }\n                if (t[2])\n                  _.ops.pop();\n                _.trys.pop();\n                continue;\n            }\n            op = body.call(thisArg, _);\n          } catch (e) {\n            op = [6, e];\n            y = 0;\n          } finally {\n            f = t = 0;\n          }\n        if (op[0] & 5)\n          throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n      }\n    };\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId.js\nvar process3, getMachineId6;\nvar init_getMachineId = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/machine-id/getMachineId.js\"() {\n    process3 = __toESM(__webpack_require__(/*! process */ \"process\"));\n    switch (process3.platform) {\n      case \"darwin\":\n        getMachineId6 = (init_getMachineId_darwin(), __toCommonJS(getMachineId_darwin_exports)).getMachineId;\n        break;\n      case \"linux\":\n        getMachineId6 = (init_getMachineId_linux(), __toCommonJS(getMachineId_linux_exports)).getMachineId;\n        break;\n      case \"freebsd\":\n        getMachineId6 = (init_getMachineId_bsd(), __toCommonJS(getMachineId_bsd_exports)).getMachineId;\n        break;\n      case \"win32\":\n        getMachineId6 = (init_getMachineId_win(), __toCommonJS(getMachineId_win_exports)).getMachineId;\n        break;\n      default:\n        getMachineId6 = (init_getMachineId_unsupported(), __toCommonJS(getMachineId_unsupported_exports)).getMachineId;\n    }\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/HostDetectorSync.js\nvar import_os, HostDetectorSync, hostDetectorSync;\nvar init_HostDetectorSync = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/HostDetectorSync.js\"() {\n    init_esm2();\n    init_Resource();\n    import_os = __webpack_require__(/*! os */ \"os\");\n    init_utils5();\n    init_getMachineId();\n    HostDetectorSync = /** @class */\n    function() {\n      function HostDetectorSync2() {\n      }\n      HostDetectorSync2.prototype.detect = function(_config) {\n        var _a2;\n        var attributes = (_a2 = {}, _a2[SemanticResourceAttributes.HOST_NAME] = (0, import_os.hostname)(), _a2[SemanticResourceAttributes.HOST_ARCH] = normalizeArch((0, import_os.arch)()), _a2);\n        return new Resource(attributes, this._getAsyncAttributes());\n      };\n      HostDetectorSync2.prototype._getAsyncAttributes = function() {\n        return getMachineId6().then(function(machineId) {\n          var attributes = {};\n          if (machineId) {\n            attributes[SemanticResourceAttributes.HOST_ID] = machineId;\n          }\n          return attributes;\n        });\n      };\n      return HostDetectorSync2;\n    }();\n    hostDetectorSync = new HostDetectorSync();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/HostDetector.js\nvar HostDetector, hostDetector;\nvar init_HostDetector = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/HostDetector.js\"() {\n    init_HostDetectorSync();\n    HostDetector = /** @class */\n    function() {\n      function HostDetector2() {\n      }\n      HostDetector2.prototype.detect = function(_config) {\n        return Promise.resolve(hostDetectorSync.detect(_config));\n      };\n      return HostDetector2;\n    }();\n    hostDetector = new HostDetector();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/OSDetectorSync.js\nvar import_os2, OSDetectorSync, osDetectorSync;\nvar init_OSDetectorSync = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/OSDetectorSync.js\"() {\n    init_esm2();\n    init_Resource();\n    import_os2 = __webpack_require__(/*! os */ \"os\");\n    init_utils5();\n    OSDetectorSync = /** @class */\n    function() {\n      function OSDetectorSync2() {\n      }\n      OSDetectorSync2.prototype.detect = function(_config) {\n        var _a2;\n        var attributes = (_a2 = {}, _a2[SemanticResourceAttributes.OS_TYPE] = normalizeType((0, import_os2.platform)()), _a2[SemanticResourceAttributes.OS_VERSION] = (0, import_os2.release)(), _a2);\n        return new Resource(attributes);\n      };\n      return OSDetectorSync2;\n    }();\n    osDetectorSync = new OSDetectorSync();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/OSDetector.js\nvar OSDetector, osDetector;\nvar init_OSDetector = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/OSDetector.js\"() {\n    init_OSDetectorSync();\n    OSDetector = /** @class */\n    function() {\n      function OSDetector2() {\n      }\n      OSDetector2.prototype.detect = function(_config) {\n        return Promise.resolve(osDetectorSync.detect(_config));\n      };\n      return OSDetector2;\n    }();\n    osDetector = new OSDetector();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/ProcessDetectorSync.js\nvar os, __read11, __spreadArray6, ProcessDetectorSync, processDetectorSync;\nvar init_ProcessDetectorSync = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/ProcessDetectorSync.js\"() {\n    init_esm();\n    init_esm2();\n    init_Resource();\n    os = __toESM(__webpack_require__(/*! os */ \"os\"));\n    __read11 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    __spreadArray6 = function(to, from, pack) {\n      if (pack || arguments.length === 2)\n        for (var i = 0, l = from.length, ar; i < l; i++) {\n          if (ar || !(i in from)) {\n            if (!ar)\n              ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n          }\n        }\n      return to.concat(ar || Array.prototype.slice.call(from));\n    };\n    ProcessDetectorSync = /** @class */\n    function() {\n      function ProcessDetectorSync2() {\n      }\n      ProcessDetectorSync2.prototype.detect = function(_config) {\n        var _a2;\n        var attributes = (_a2 = {}, _a2[SemanticResourceAttributes.PROCESS_PID] = process.pid, _a2[SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME] = process.title, _a2[SemanticResourceAttributes.PROCESS_EXECUTABLE_PATH] = process.execPath, _a2[SemanticResourceAttributes.PROCESS_COMMAND_ARGS] = __spreadArray6(__spreadArray6([\n          process.argv[0]\n        ], __read11(process.execArgv), false), __read11(process.argv.slice(1)), false), _a2[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = process.versions.node, _a2[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = \"nodejs\", _a2[SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = \"Node.js\", _a2);\n        if (process.argv.length > 1) {\n          attributes[SemanticResourceAttributes.PROCESS_COMMAND] = process.argv[1];\n        }\n        try {\n          var userInfo2 = os.userInfo();\n          attributes[SemanticResourceAttributes.PROCESS_OWNER] = userInfo2.username;\n        } catch (e) {\n          diag2.debug(\"error obtaining process owner: \" + e);\n        }\n        return new Resource(attributes);\n      };\n      return ProcessDetectorSync2;\n    }();\n    processDetectorSync = new ProcessDetectorSync();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/ProcessDetector.js\nvar ProcessDetector, processDetector;\nvar init_ProcessDetector = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/ProcessDetector.js\"() {\n    init_ProcessDetectorSync();\n    ProcessDetector = /** @class */\n    function() {\n      function ProcessDetector2() {\n      }\n      ProcessDetector2.prototype.detect = function(config) {\n        return Promise.resolve(processDetectorSync.detect(config));\n      };\n      return ProcessDetector2;\n    }();\n    processDetector = new ProcessDetector();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/node/index.js\nvar init_node4 = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/node/index.js\"() {\n    init_default_service_name();\n    init_HostDetector();\n    init_OSDetector();\n    init_HostDetectorSync();\n    init_OSDetectorSync();\n    init_ProcessDetector();\n    init_ProcessDetectorSync();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/platform/index.js\nvar init_platform4 = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/platform/index.js\"() {\n    init_node4();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/Resource.js\nvar __assign, __awaiter6, __generator6, __read12, Resource;\nvar init_Resource = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/Resource.js\"() {\n    init_esm();\n    init_esm2();\n    init_esm3();\n    init_platform4();\n    __assign = function() {\n      __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n              t[p] = s[p];\n        }\n        return t;\n      };\n      return __assign.apply(this, arguments);\n    };\n    __awaiter6 = function(thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n          resolve(value);\n        });\n      }\n      return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n    __generator6 = function(thisArg, body) {\n      var _ = { label: 0, sent: function() {\n        if (t[0] & 1)\n          throw t[1];\n        return t[1];\n      }, trys: [], ops: [] }, f, y, t, g;\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n      }), g;\n      function verb(n) {\n        return function(v) {\n          return step([n, v]);\n        };\n      }\n      function step(op) {\n        if (f)\n          throw new TypeError(\"Generator is already executing.\");\n        while (_)\n          try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n              return t;\n            if (y = 0, t)\n              op = [op[0] & 2, t.value];\n            switch (op[0]) {\n              case 0:\n              case 1:\n                t = op;\n                break;\n              case 4:\n                _.label++;\n                return { value: op[1], done: false };\n              case 5:\n                _.label++;\n                y = op[1];\n                op = [0];\n                continue;\n              case 7:\n                op = _.ops.pop();\n                _.trys.pop();\n                continue;\n              default:\n                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                  _ = 0;\n                  continue;\n                }\n                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                  _.label = op[1];\n                  break;\n                }\n                if (op[0] === 6 && _.label < t[1]) {\n                  _.label = t[1];\n                  t = op;\n                  break;\n                }\n                if (t && _.label < t[2]) {\n                  _.label = t[2];\n                  _.ops.push(op);\n                  break;\n                }\n                if (t[2])\n                  _.ops.pop();\n                _.trys.pop();\n                continue;\n            }\n            op = body.call(thisArg, _);\n          } catch (e) {\n            op = [6, e];\n            y = 0;\n          } finally {\n            f = t = 0;\n          }\n        if (op[0] & 5)\n          throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n      }\n    };\n    __read12 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    Resource = /** @class */\n    function() {\n      function Resource3(attributes, asyncAttributesPromise) {\n        var _this = this;\n        var _a2;\n        this._attributes = attributes;\n        this.asyncAttributesPending = asyncAttributesPromise != null;\n        this._syncAttributes = (_a2 = this._attributes) !== null && _a2 !== void 0 ? _a2 : {};\n        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function(asyncAttributes) {\n          _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n          _this.asyncAttributesPending = false;\n          return asyncAttributes;\n        }, function(err) {\n          diag2.debug(\"a resource's async attributes promise rejected: %s\", err);\n          _this.asyncAttributesPending = false;\n          return {};\n        });\n      }\n      Resource3.empty = function() {\n        return Resource3.EMPTY;\n      };\n      Resource3.default = function() {\n        var _a2;\n        return new Resource3((_a2 = {}, _a2[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(), _a2[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE], _a2[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME], _a2[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION], _a2));\n      };\n      Object.defineProperty(Resource3.prototype, \"attributes\", {\n        get: function() {\n          var _a2;\n          if (this.asyncAttributesPending) {\n            diag2.error(\"Accessing resource attributes before async attributes settled\");\n          }\n          return (_a2 = this._attributes) !== null && _a2 !== void 0 ? _a2 : {};\n        },\n        enumerable: false,\n        configurable: true\n      });\n      Resource3.prototype.waitForAsyncAttributes = function() {\n        return __awaiter6(this, void 0, void 0, function() {\n          return __generator6(this, function(_a2) {\n            switch (_a2.label) {\n              case 0:\n                if (!this.asyncAttributesPending)\n                  return [3, 2];\n                return [4, this._asyncAttributesPromise];\n              case 1:\n                _a2.sent();\n                _a2.label = 2;\n              case 2:\n                return [\n                  2\n                  /*return*/\n                ];\n            }\n          });\n        });\n      };\n      Resource3.prototype.merge = function(other) {\n        var _this = this;\n        var _a2;\n        if (!other)\n          return this;\n        var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), (_a2 = other._syncAttributes) !== null && _a2 !== void 0 ? _a2 : other.attributes);\n        if (!this._asyncAttributesPromise && !other._asyncAttributesPromise) {\n          return new Resource3(mergedSyncAttributes);\n        }\n        var mergedAttributesPromise = Promise.all([\n          this._asyncAttributesPromise,\n          other._asyncAttributesPromise\n        ]).then(function(_a3) {\n          var _b;\n          var _c = __read12(_a3, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];\n          return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), (_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes), otherAsyncAttributes);\n        });\n        return new Resource3(mergedSyncAttributes, mergedAttributesPromise);\n      };\n      Resource3.EMPTY = new Resource3({});\n      return Resource3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/IResource.js\nvar init_IResource = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/IResource.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/types.js\nvar init_types4 = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/types.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/config.js\nvar init_config2 = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/config.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetector.js\nvar BrowserDetector, browserDetector;\nvar init_BrowserDetector = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetector.js\"() {\n    init_esm5();\n    BrowserDetector = /** @class */\n    function() {\n      function BrowserDetector2() {\n      }\n      BrowserDetector2.prototype.detect = function(config) {\n        return Promise.resolve(browserDetectorSync.detect(config));\n      };\n      return BrowserDetector2;\n    }();\n    browserDetector = new BrowserDetector();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetectorSync.js\nvar __values7, __read13, EnvDetectorSync, envDetectorSync;\nvar init_EnvDetectorSync = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetectorSync.js\"() {\n    init_esm();\n    init_esm3();\n    init_esm2();\n    init_Resource();\n    __values7 = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n    __read13 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    EnvDetectorSync = /** @class */\n    function() {\n      function EnvDetectorSync2() {\n        this._MAX_LENGTH = 255;\n        this._COMMA_SEPARATOR = \",\";\n        this._LABEL_KEY_VALUE_SPLITTER = \"=\";\n        this._ERROR_MESSAGE_INVALID_CHARS = \"should be a ASCII string with a length greater than 0 and not exceed \" + this._MAX_LENGTH + \" characters.\";\n        this._ERROR_MESSAGE_INVALID_VALUE = \"should be a ASCII string with a length not exceed \" + this._MAX_LENGTH + \" characters.\";\n      }\n      EnvDetectorSync2.prototype.detect = function(_config) {\n        var attributes = {};\n        var env3 = getEnv();\n        var rawAttributes = env3.OTEL_RESOURCE_ATTRIBUTES;\n        var serviceName = env3.OTEL_SERVICE_NAME;\n        if (rawAttributes) {\n          try {\n            var parsedAttributes = this._parseResourceAttributes(rawAttributes);\n            Object.assign(attributes, parsedAttributes);\n          } catch (e) {\n            diag2.debug(\"EnvDetector failed: \" + e.message);\n          }\n        }\n        if (serviceName) {\n          attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n        }\n        return new Resource(attributes);\n      };\n      EnvDetectorSync2.prototype._parseResourceAttributes = function(rawEnvAttributes) {\n        var e_1, _a2;\n        if (!rawEnvAttributes)\n          return {};\n        var attributes = {};\n        var rawAttributes = rawEnvAttributes.split(this._COMMA_SEPARATOR, -1);\n        try {\n          for (var rawAttributes_1 = __values7(rawAttributes), rawAttributes_1_1 = rawAttributes_1.next(); !rawAttributes_1_1.done; rawAttributes_1_1 = rawAttributes_1.next()) {\n            var rawAttribute = rawAttributes_1_1.value;\n            var keyValuePair = rawAttribute.split(this._LABEL_KEY_VALUE_SPLITTER, -1);\n            if (keyValuePair.length !== 2) {\n              continue;\n            }\n            var _b = __read13(keyValuePair, 2), key = _b[0], value = _b[1];\n            key = key.trim();\n            value = value.trim().split(/^\"|\"$/).join(\"\");\n            if (!this._isValidAndNotEmpty(key)) {\n              throw new Error(\"Attribute key \" + this._ERROR_MESSAGE_INVALID_CHARS);\n            }\n            if (!this._isValid(value)) {\n              throw new Error(\"Attribute value \" + this._ERROR_MESSAGE_INVALID_VALUE);\n            }\n            attributes[key] = decodeURIComponent(value);\n          }\n        } catch (e_1_1) {\n          e_1 = { error: e_1_1 };\n        } finally {\n          try {\n            if (rawAttributes_1_1 && !rawAttributes_1_1.done && (_a2 = rawAttributes_1.return))\n              _a2.call(rawAttributes_1);\n          } finally {\n            if (e_1)\n              throw e_1.error;\n          }\n        }\n        return attributes;\n      };\n      EnvDetectorSync2.prototype._isValid = function(name) {\n        return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n      };\n      EnvDetectorSync2.prototype._isBaggageOctetString = function(str) {\n        for (var i = 0; i < str.length; i++) {\n          var ch = str.charCodeAt(i);\n          if (ch < 33 || ch === 44 || ch === 59 || ch === 92 || ch > 126) {\n            return false;\n          }\n        }\n        return true;\n      };\n      EnvDetectorSync2.prototype._isValidAndNotEmpty = function(str) {\n        return str.length > 0 && this._isValid(str);\n      };\n      return EnvDetectorSync2;\n    }();\n    envDetectorSync = new EnvDetectorSync();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js\nvar EnvDetector, envDetector;\nvar init_EnvDetector = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js\"() {\n    init_EnvDetectorSync();\n    EnvDetector = /** @class */\n    function() {\n      function EnvDetector2() {\n      }\n      EnvDetector2.prototype.detect = function(config) {\n        return Promise.resolve(envDetectorSync.detect(config));\n      };\n      return EnvDetector2;\n    }();\n    envDetector = new EnvDetector();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetectorSync.js\nvar __assign2, BrowserDetectorSync, browserDetectorSync;\nvar init_BrowserDetectorSync = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetectorSync.js\"() {\n    init_esm2();\n    init_esm5();\n    init_esm();\n    __assign2 = function() {\n      __assign2 = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n              t[p] = s[p];\n        }\n        return t;\n      };\n      return __assign2.apply(this, arguments);\n    };\n    BrowserDetectorSync = /** @class */\n    function() {\n      function BrowserDetectorSync2() {\n      }\n      BrowserDetectorSync2.prototype.detect = function(config) {\n        var _a2;\n        var isBrowser = typeof navigator !== \"undefined\";\n        if (!isBrowser) {\n          return Resource.empty();\n        }\n        var browserResource = (_a2 = {}, _a2[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = \"browser\", _a2[SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = \"Web Browser\", _a2[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = navigator.userAgent, _a2);\n        return this._getResourceAttributes(browserResource, config);\n      };\n      BrowserDetectorSync2.prototype._getResourceAttributes = function(browserResource, _config) {\n        if (browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === \"\") {\n          diag2.debug(\"BrowserDetector failed: Unable to find required browser resources. \");\n          return Resource.empty();\n        } else {\n          return new Resource(__assign2({}, browserResource));\n        }\n      };\n      return BrowserDetectorSync2;\n    }();\n    browserDetectorSync = new BrowserDetectorSync();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/detectors/index.js\nvar init_detectors = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/detectors/index.js\"() {\n    init_BrowserDetector();\n    init_EnvDetector();\n    init_BrowserDetectorSync();\n    init_EnvDetectorSync();\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/utils.js\nvar isPromiseLike;\nvar init_utils6 = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/utils.js\"() {\n    isPromiseLike = function(val) {\n      return val !== null && typeof val === \"object\" && typeof val.then === \"function\";\n    };\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/detect-resources.js\nvar __awaiter7, __generator7, detectResources, detectResourcesSync, logResources;\nvar init_detect_resources = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/detect-resources.js\"() {\n    init_Resource();\n    init_esm();\n    init_utils6();\n    __awaiter7 = function(thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n          resolve(value);\n        });\n      }\n      return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n    __generator7 = function(thisArg, body) {\n      var _ = { label: 0, sent: function() {\n        if (t[0] & 1)\n          throw t[1];\n        return t[1];\n      }, trys: [], ops: [] }, f, y, t, g;\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n      }), g;\n      function verb(n) {\n        return function(v) {\n          return step([n, v]);\n        };\n      }\n      function step(op) {\n        if (f)\n          throw new TypeError(\"Generator is already executing.\");\n        while (_)\n          try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n              return t;\n            if (y = 0, t)\n              op = [op[0] & 2, t.value];\n            switch (op[0]) {\n              case 0:\n              case 1:\n                t = op;\n                break;\n              case 4:\n                _.label++;\n                return { value: op[1], done: false };\n              case 5:\n                _.label++;\n                y = op[1];\n                op = [0];\n                continue;\n              case 7:\n                op = _.ops.pop();\n                _.trys.pop();\n                continue;\n              default:\n                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                  _ = 0;\n                  continue;\n                }\n                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                  _.label = op[1];\n                  break;\n                }\n                if (op[0] === 6 && _.label < t[1]) {\n                  _.label = t[1];\n                  t = op;\n                  break;\n                }\n                if (t && _.label < t[2]) {\n                  _.label = t[2];\n                  _.ops.push(op);\n                  break;\n                }\n                if (t[2])\n                  _.ops.pop();\n                _.trys.pop();\n                continue;\n            }\n            op = body.call(thisArg, _);\n          } catch (e) {\n            op = [6, e];\n            y = 0;\n          } finally {\n            f = t = 0;\n          }\n        if (op[0] & 5)\n          throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n      }\n    };\n    detectResources = function(config) {\n      if (config === void 0) {\n        config = {};\n      }\n      return __awaiter7(void 0, void 0, void 0, function() {\n        var resources;\n        return __generator7(this, function(_a2) {\n          switch (_a2.label) {\n            case 0:\n              return [4, Promise.all((config.detectors || []).map(function(d) {\n                return __awaiter7(void 0, void 0, void 0, function() {\n                  var resource, e_1;\n                  return __generator7(this, function(_a3) {\n                    switch (_a3.label) {\n                      case 0:\n                        _a3.trys.push([0, 2, , 3]);\n                        return [4, d.detect(config)];\n                      case 1:\n                        resource = _a3.sent();\n                        diag2.debug(d.constructor.name + \" found resource.\", resource);\n                        return [2, resource];\n                      case 2:\n                        e_1 = _a3.sent();\n                        diag2.debug(d.constructor.name + \" failed: \" + e_1.message);\n                        return [2, Resource.empty()];\n                      case 3:\n                        return [\n                          2\n                          /*return*/\n                        ];\n                    }\n                  });\n                });\n              }))];\n            case 1:\n              resources = _a2.sent();\n              logResources(resources);\n              return [2, resources.reduce(function(acc, resource) {\n                return acc.merge(resource);\n              }, Resource.empty())];\n          }\n        });\n      });\n    };\n    detectResourcesSync = function(config) {\n      var _a2;\n      if (config === void 0) {\n        config = {};\n      }\n      var resources = ((_a2 = config.detectors) !== null && _a2 !== void 0 ? _a2 : []).map(function(d) {\n        try {\n          var resourceOrPromise_1 = d.detect(config);\n          var resource_1;\n          if (isPromiseLike(resourceOrPromise_1)) {\n            var createPromise = function() {\n              return __awaiter7(void 0, void 0, void 0, function() {\n                var resolvedResource;\n                return __generator7(this, function(_a3) {\n                  switch (_a3.label) {\n                    case 0:\n                      return [4, resourceOrPromise_1];\n                    case 1:\n                      resolvedResource = _a3.sent();\n                      return [2, resolvedResource.attributes];\n                  }\n                });\n              });\n            };\n            resource_1 = new Resource({}, createPromise());\n          } else {\n            resource_1 = resourceOrPromise_1;\n          }\n          if (resource_1.waitForAsyncAttributes) {\n            void resource_1.waitForAsyncAttributes().then(function() {\n              return diag2.debug(d.constructor.name + \" found resource.\", resource_1);\n            });\n          } else {\n            diag2.debug(d.constructor.name + \" found resource.\", resource_1);\n          }\n          return resource_1;\n        } catch (e) {\n          diag2.error(d.constructor.name + \" failed: \" + e.message);\n          return Resource.empty();\n        }\n      });\n      var mergedResources = resources.reduce(function(acc, resource) {\n        return acc.merge(resource);\n      }, Resource.empty());\n      if (mergedResources.waitForAsyncAttributes) {\n        void mergedResources.waitForAsyncAttributes().then(function() {\n          logResources(resources);\n        });\n      }\n      return mergedResources;\n    };\n    logResources = function(resources) {\n      resources.forEach(function(resource) {\n        if (Object.keys(resource.attributes).length > 0) {\n          var resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n          diag2.verbose(resourceDebugString);\n        }\n      });\n    };\n  }\n});\n\n// node_modules/@opentelemetry/resources/build/esm/index.js\nvar esm_exports5 = {};\n__export(esm_exports5, {\n  Resource: () => Resource,\n  browserDetector: () => browserDetector,\n  browserDetectorSync: () => browserDetectorSync,\n  defaultServiceName: () => defaultServiceName,\n  detectResources: () => detectResources,\n  detectResourcesSync: () => detectResourcesSync,\n  envDetector: () => envDetector,\n  envDetectorSync: () => envDetectorSync,\n  hostDetector: () => hostDetector,\n  hostDetectorSync: () => hostDetectorSync,\n  osDetector: () => osDetector,\n  osDetectorSync: () => osDetectorSync,\n  processDetector: () => processDetector,\n  processDetectorSync: () => processDetectorSync\n});\nvar init_esm5 = __esm({\n  \"node_modules/@opentelemetry/resources/build/esm/index.js\"() {\n    init_Resource();\n    init_IResource();\n    init_platform4();\n    init_types4();\n    init_config2();\n    init_detectors();\n    init_detect_resources();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js\nvar __values8, MultiSpanProcessor;\nvar init_MultiSpanProcessor = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js\"() {\n    init_esm3();\n    __values8 = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n    MultiSpanProcessor = /** @class */\n    function() {\n      function MultiSpanProcessor2(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n      }\n      MultiSpanProcessor2.prototype.forceFlush = function() {\n        var e_1, _a2;\n        var promises = [];\n        try {\n          for (var _b = __values8(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var spanProcessor = _c.value;\n            promises.push(spanProcessor.forceFlush());\n          }\n        } catch (e_1_1) {\n          e_1 = { error: e_1_1 };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a2 = _b.return))\n              _a2.call(_b);\n          } finally {\n            if (e_1)\n              throw e_1.error;\n          }\n        }\n        return new Promise(function(resolve) {\n          Promise.all(promises).then(function() {\n            resolve();\n          }).catch(function(error) {\n            globalErrorHandler(error || new Error(\"MultiSpanProcessor: forceFlush failed\"));\n            resolve();\n          });\n        });\n      };\n      MultiSpanProcessor2.prototype.onStart = function(span, context2) {\n        var e_2, _a2;\n        try {\n          for (var _b = __values8(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var spanProcessor = _c.value;\n            spanProcessor.onStart(span, context2);\n          }\n        } catch (e_2_1) {\n          e_2 = { error: e_2_1 };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a2 = _b.return))\n              _a2.call(_b);\n          } finally {\n            if (e_2)\n              throw e_2.error;\n          }\n        }\n      };\n      MultiSpanProcessor2.prototype.onEnd = function(span) {\n        var e_3, _a2;\n        try {\n          for (var _b = __values8(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var spanProcessor = _c.value;\n            spanProcessor.onEnd(span);\n          }\n        } catch (e_3_1) {\n          e_3 = { error: e_3_1 };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a2 = _b.return))\n              _a2.call(_b);\n          } finally {\n            if (e_3)\n              throw e_3.error;\n          }\n        }\n      };\n      MultiSpanProcessor2.prototype.shutdown = function() {\n        var e_4, _a2;\n        var promises = [];\n        try {\n          for (var _b = __values8(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var spanProcessor = _c.value;\n            promises.push(spanProcessor.shutdown());\n          }\n        } catch (e_4_1) {\n          e_4 = { error: e_4_1 };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a2 = _b.return))\n              _a2.call(_b);\n          } finally {\n            if (e_4)\n              throw e_4.error;\n          }\n        }\n        return new Promise(function(resolve, reject) {\n          Promise.all(promises).then(function() {\n            resolve();\n          }, reject);\n        });\n      };\n      return MultiSpanProcessor2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\nvar NoopSpanProcessor;\nvar init_NoopSpanProcessor = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\"() {\n    NoopSpanProcessor = /** @class */\n    function() {\n      function NoopSpanProcessor2() {\n      }\n      NoopSpanProcessor2.prototype.onStart = function(_span, _context) {\n      };\n      NoopSpanProcessor2.prototype.onEnd = function(_span) {\n      };\n      NoopSpanProcessor2.prototype.shutdown = function() {\n        return Promise.resolve();\n      };\n      NoopSpanProcessor2.prototype.forceFlush = function() {\n        return Promise.resolve();\n      };\n      return NoopSpanProcessor2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\nvar ForceFlushState, BasicTracerProvider;\nvar init_BasicTracerProvider = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\"() {\n    init_esm();\n    init_esm3();\n    init_esm5();\n    init_esm6();\n    init_config();\n    init_MultiSpanProcessor();\n    init_NoopSpanProcessor();\n    init_platform3();\n    init_utility();\n    (function(ForceFlushState2) {\n      ForceFlushState2[ForceFlushState2[\"resolved\"] = 0] = \"resolved\";\n      ForceFlushState2[ForceFlushState2[\"timeout\"] = 1] = \"timeout\";\n      ForceFlushState2[ForceFlushState2[\"error\"] = 2] = \"error\";\n      ForceFlushState2[ForceFlushState2[\"unresolved\"] = 3] = \"unresolved\";\n    })(ForceFlushState || (ForceFlushState = {}));\n    BasicTracerProvider = /** @class */\n    function() {\n      function BasicTracerProvider2(config) {\n        if (config === void 0) {\n          config = {};\n        }\n        var _a2;\n        this._registeredSpanProcessors = [];\n        this._tracers = /* @__PURE__ */ new Map();\n        var mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n        this.resource = (_a2 = mergedConfig.resource) !== null && _a2 !== void 0 ? _a2 : Resource.empty();\n        this.resource = Resource.default().merge(this.resource);\n        this._config = Object.assign({}, mergedConfig, {\n          resource: this.resource\n        });\n        var defaultExporter = this._buildExporterFromEnv();\n        if (defaultExporter !== void 0) {\n          var batchProcessor = new BatchSpanProcessor(defaultExporter);\n          this.activeSpanProcessor = batchProcessor;\n        } else {\n          this.activeSpanProcessor = new NoopSpanProcessor();\n        }\n      }\n      BasicTracerProvider2.prototype.getTracer = function(name, version, options) {\n        var key = name + \"@\" + (version || \"\") + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || \"\");\n        if (!this._tracers.has(key)) {\n          this._tracers.set(key, new Tracer({ name, version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));\n        }\n        return this._tracers.get(key);\n      };\n      BasicTracerProvider2.prototype.addSpanProcessor = function(spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n          this.activeSpanProcessor.shutdown().catch(function(err) {\n            return diag2.error(\"Error while trying to shutdown current span processor\", err);\n          });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n      };\n      BasicTracerProvider2.prototype.getActiveSpanProcessor = function() {\n        return this.activeSpanProcessor;\n      };\n      BasicTracerProvider2.prototype.register = function(config) {\n        if (config === void 0) {\n          config = {};\n        }\n        trace.setGlobalTracerProvider(this);\n        if (config.propagator === void 0) {\n          config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n          context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n          propagation.setGlobalPropagator(config.propagator);\n        }\n      };\n      BasicTracerProvider2.prototype.forceFlush = function() {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function(spanProcessor) {\n          return new Promise(function(resolve) {\n            var state;\n            var timeoutInterval = setTimeout(function() {\n              resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n              state = ForceFlushState.timeout;\n            }, timeout);\n            spanProcessor.forceFlush().then(function() {\n              clearTimeout(timeoutInterval);\n              if (state !== ForceFlushState.timeout) {\n                state = ForceFlushState.resolved;\n                resolve(state);\n              }\n            }).catch(function(error) {\n              clearTimeout(timeoutInterval);\n              state = ForceFlushState.error;\n              resolve(error);\n            });\n          });\n        });\n        return new Promise(function(resolve, reject) {\n          Promise.all(promises).then(function(results) {\n            var errors = results.filter(function(result) {\n              return result !== ForceFlushState.resolved;\n            });\n            if (errors.length > 0) {\n              reject(errors);\n            } else {\n              resolve();\n            }\n          }).catch(function(error) {\n            return reject([error]);\n          });\n        });\n      };\n      BasicTracerProvider2.prototype.shutdown = function() {\n        return this.activeSpanProcessor.shutdown();\n      };\n      BasicTracerProvider2.prototype._getPropagator = function(name) {\n        var _a2;\n        return (_a2 = this.constructor._registeredPropagators.get(name)) === null || _a2 === void 0 ? void 0 : _a2();\n      };\n      BasicTracerProvider2.prototype._getSpanExporter = function(name) {\n        var _a2;\n        return (_a2 = this.constructor._registeredExporters.get(name)) === null || _a2 === void 0 ? void 0 : _a2();\n      };\n      BasicTracerProvider2.prototype._buildPropagatorFromEnv = function() {\n        var _this = this;\n        var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function(name) {\n          var propagator = _this._getPropagator(name);\n          if (!propagator) {\n            diag2.warn('Propagator \"' + name + '\" requested through environment variable is unavailable.');\n          }\n          return propagator;\n        });\n        var validPropagators = propagators.reduce(function(list, item) {\n          if (item) {\n            list.push(item);\n          }\n          return list;\n        }, []);\n        if (validPropagators.length === 0) {\n          return;\n        } else if (uniquePropagatorNames.length === 1) {\n          return validPropagators[0];\n        } else {\n          return new CompositePropagator({\n            propagators: validPropagators\n          });\n        }\n      };\n      BasicTracerProvider2.prototype._buildExporterFromEnv = function() {\n        var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n        if (exporterName === \"none\" || exporterName === \"\")\n          return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n          diag2.error('Exporter \"' + exporterName + '\" requested through environment variable is unavailable.');\n        }\n        return exporter;\n      };\n      BasicTracerProvider2._registeredPropagators = /* @__PURE__ */ new Map([\n        [\"tracecontext\", function() {\n          return new W3CTraceContextPropagator();\n        }],\n        [\"baggage\", function() {\n          return new W3CBaggagePropagator();\n        }]\n      ]);\n      BasicTracerProvider2._registeredExporters = /* @__PURE__ */ new Map();\n      return BasicTracerProvider2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js\nvar __values9, ConsoleSpanExporter;\nvar init_ConsoleSpanExporter = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js\"() {\n    init_esm3();\n    __values9 = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n    ConsoleSpanExporter = /** @class */\n    function() {\n      function ConsoleSpanExporter3() {\n      }\n      ConsoleSpanExporter3.prototype.export = function(spans, resultCallback) {\n        return this._sendSpans(spans, resultCallback);\n      };\n      ConsoleSpanExporter3.prototype.shutdown = function() {\n        this._sendSpans([]);\n        return this.forceFlush();\n      };\n      ConsoleSpanExporter3.prototype.forceFlush = function() {\n        return Promise.resolve();\n      };\n      ConsoleSpanExporter3.prototype._exportInfo = function(span) {\n        var _a2;\n        return {\n          traceId: span.spanContext().traceId,\n          parentId: span.parentSpanId,\n          traceState: (_a2 = span.spanContext().traceState) === null || _a2 === void 0 ? void 0 : _a2.serialize(),\n          name: span.name,\n          id: span.spanContext().spanId,\n          kind: span.kind,\n          timestamp: hrTimeToMicroseconds(span.startTime),\n          duration: hrTimeToMicroseconds(span.duration),\n          attributes: span.attributes,\n          status: span.status,\n          events: span.events,\n          links: span.links\n        };\n      };\n      ConsoleSpanExporter3.prototype._sendSpans = function(spans, done) {\n        var e_1, _a2;\n        try {\n          for (var spans_1 = __values9(spans), spans_1_1 = spans_1.next(); !spans_1_1.done; spans_1_1 = spans_1.next()) {\n            var span = spans_1_1.value;\n            console.dir(this._exportInfo(span), { depth: 3 });\n          }\n        } catch (e_1_1) {\n          e_1 = { error: e_1_1 };\n        } finally {\n          try {\n            if (spans_1_1 && !spans_1_1.done && (_a2 = spans_1.return))\n              _a2.call(spans_1);\n          } finally {\n            if (e_1)\n              throw e_1.error;\n          }\n        }\n        if (done) {\n          return done({ code: ExportResultCode.SUCCESS });\n        }\n      };\n      return ConsoleSpanExporter3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js\nvar __read14, __spreadArray7, InMemorySpanExporter;\nvar init_InMemorySpanExporter = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js\"() {\n    init_esm3();\n    __read14 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    __spreadArray7 = function(to, from, pack) {\n      if (pack || arguments.length === 2)\n        for (var i = 0, l = from.length, ar; i < l; i++) {\n          if (ar || !(i in from)) {\n            if (!ar)\n              ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n          }\n        }\n      return to.concat(ar || Array.prototype.slice.call(from));\n    };\n    InMemorySpanExporter = /** @class */\n    function() {\n      function InMemorySpanExporter2() {\n        this._finishedSpans = [];\n        this._stopped = false;\n      }\n      InMemorySpanExporter2.prototype.export = function(spans, resultCallback) {\n        var _a2;\n        if (this._stopped)\n          return resultCallback({\n            code: ExportResultCode.FAILED,\n            error: new Error(\"Exporter has been stopped\")\n          });\n        (_a2 = this._finishedSpans).push.apply(_a2, __spreadArray7([], __read14(spans), false));\n        setTimeout(function() {\n          return resultCallback({ code: ExportResultCode.SUCCESS });\n        }, 0);\n      };\n      InMemorySpanExporter2.prototype.shutdown = function() {\n        this._stopped = true;\n        this._finishedSpans = [];\n        return this.forceFlush();\n      };\n      InMemorySpanExporter2.prototype.forceFlush = function() {\n        return Promise.resolve();\n      };\n      InMemorySpanExporter2.prototype.reset = function() {\n        this._finishedSpans = [];\n      };\n      InMemorySpanExporter2.prototype.getFinishedSpans = function() {\n        return this._finishedSpans;\n      };\n      return InMemorySpanExporter2;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ReadableSpan.js\nvar init_ReadableSpan = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ReadableSpan.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js\nvar __awaiter8, __generator8, SimpleSpanProcessor;\nvar init_SimpleSpanProcessor = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js\"() {\n    init_esm();\n    init_esm3();\n    __awaiter8 = function(thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n          resolve(value);\n        });\n      }\n      return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n    __generator8 = function(thisArg, body) {\n      var _ = { label: 0, sent: function() {\n        if (t[0] & 1)\n          throw t[1];\n        return t[1];\n      }, trys: [], ops: [] }, f, y, t, g;\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n      }), g;\n      function verb(n) {\n        return function(v) {\n          return step([n, v]);\n        };\n      }\n      function step(op) {\n        if (f)\n          throw new TypeError(\"Generator is already executing.\");\n        while (_)\n          try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n              return t;\n            if (y = 0, t)\n              op = [op[0] & 2, t.value];\n            switch (op[0]) {\n              case 0:\n              case 1:\n                t = op;\n                break;\n              case 4:\n                _.label++;\n                return { value: op[1], done: false };\n              case 5:\n                _.label++;\n                y = op[1];\n                op = [0];\n                continue;\n              case 7:\n                op = _.ops.pop();\n                _.trys.pop();\n                continue;\n              default:\n                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                  _ = 0;\n                  continue;\n                }\n                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                  _.label = op[1];\n                  break;\n                }\n                if (op[0] === 6 && _.label < t[1]) {\n                  _.label = t[1];\n                  t = op;\n                  break;\n                }\n                if (t && _.label < t[2]) {\n                  _.label = t[2];\n                  _.ops.push(op);\n                  break;\n                }\n                if (t[2])\n                  _.ops.pop();\n                _.trys.pop();\n                continue;\n            }\n            op = body.call(thisArg, _);\n          } catch (e) {\n            op = [6, e];\n            y = 0;\n          } finally {\n            f = t = 0;\n          }\n        if (op[0] & 5)\n          throw op[1];\n        return { value: op[0] ? op[1] : void 0, done: true };\n      }\n    };\n    SimpleSpanProcessor = /** @class */\n    function() {\n      function SimpleSpanProcessor3(_exporter) {\n        this._exporter = _exporter;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        this._unresolvedExports = /* @__PURE__ */ new Set();\n      }\n      SimpleSpanProcessor3.prototype.forceFlush = function() {\n        return __awaiter8(this, void 0, void 0, function() {\n          return __generator8(this, function(_a2) {\n            switch (_a2.label) {\n              case 0:\n                return [4, Promise.all(Array.from(this._unresolvedExports))];\n              case 1:\n                _a2.sent();\n                if (!this._exporter.forceFlush)\n                  return [3, 3];\n                return [4, this._exporter.forceFlush()];\n              case 2:\n                _a2.sent();\n                _a2.label = 3;\n              case 3:\n                return [\n                  2\n                  /*return*/\n                ];\n            }\n          });\n        });\n      };\n      SimpleSpanProcessor3.prototype.onStart = function(_span, _parentContext) {\n      };\n      SimpleSpanProcessor3.prototype.onEnd = function(span) {\n        var _this = this;\n        var _a2, _b;\n        if (this._shutdownOnce.isCalled) {\n          return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n          return;\n        }\n        var doExport = function() {\n          return internal._export(_this._exporter, [span]).then(function(result) {\n            var _a3;\n            if (result.code !== ExportResultCode.SUCCESS) {\n              globalErrorHandler((_a3 = result.error) !== null && _a3 !== void 0 ? _a3 : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n            }\n          }).catch(function(error) {\n            globalErrorHandler(error);\n          });\n        };\n        if (span.resource.asyncAttributesPending) {\n          var exportPromise_1 = (_b = (_a2 = span.resource).waitForAsyncAttributes) === null || _b === void 0 ? void 0 : _b.call(_a2).then(function() {\n            if (exportPromise_1 != null) {\n              _this._unresolvedExports.delete(exportPromise_1);\n            }\n            return doExport();\n          }, function(err) {\n            return globalErrorHandler(err);\n          });\n          if (exportPromise_1 != null) {\n            this._unresolvedExports.add(exportPromise_1);\n          }\n        } else {\n          void doExport();\n        }\n      };\n      SimpleSpanProcessor3.prototype.shutdown = function() {\n        return this._shutdownOnce.call();\n      };\n      SimpleSpanProcessor3.prototype._shutdown = function() {\n        return this._exporter.shutdown();\n      };\n      return SimpleSpanProcessor3;\n    }();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SpanExporter.js\nvar init_SpanExporter = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SpanExporter.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/SpanProcessor.js\nvar init_SpanProcessor = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/SpanProcessor.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/TimedEvent.js\nvar init_TimedEvent = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/TimedEvent.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/types.js\nvar init_types5 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/types.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/IdGenerator.js\nvar init_IdGenerator2 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/IdGenerator.js\"() {\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\nvar esm_exports6 = {};\n__export(esm_exports6, {\n  AlwaysOffSampler: () => AlwaysOffSampler2,\n  AlwaysOnSampler: () => AlwaysOnSampler2,\n  BasicTracerProvider: () => BasicTracerProvider,\n  BatchSpanProcessor: () => BatchSpanProcessor,\n  ConsoleSpanExporter: () => ConsoleSpanExporter,\n  ForceFlushState: () => ForceFlushState,\n  InMemorySpanExporter: () => InMemorySpanExporter,\n  NoopSpanProcessor: () => NoopSpanProcessor,\n  ParentBasedSampler: () => ParentBasedSampler2,\n  RandomIdGenerator: () => RandomIdGenerator2,\n  SamplingDecision: () => SamplingDecision2,\n  SimpleSpanProcessor: () => SimpleSpanProcessor,\n  Span: () => Span,\n  TraceIdRatioBasedSampler: () => TraceIdRatioBasedSampler2,\n  Tracer: () => Tracer\n});\nvar init_esm6 = __esm({\n  \"node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\"() {\n    init_Tracer();\n    init_BasicTracerProvider();\n    init_platform3();\n    init_ConsoleSpanExporter();\n    init_InMemorySpanExporter();\n    init_ReadableSpan();\n    init_SimpleSpanProcessor();\n    init_SpanExporter();\n    init_NoopSpanProcessor();\n    init_AlwaysOffSampler2();\n    init_AlwaysOnSampler2();\n    init_ParentBasedSampler2();\n    init_TraceIdRatioBasedSampler2();\n    init_Sampler();\n    init_Span();\n    init_SpanProcessor();\n    init_TimedEvent();\n    init_types5();\n    init_IdGenerator2();\n  }\n});\n\n// node_modules/semver/internal/constants.js\nvar require_constants = __commonJS({\n  \"node_modules/semver/internal/constants.js\"(exports, module2) {\n    var SEMVER_SPEC_VERSION = \"2.0.0\";\n    var MAX_LENGTH = 256;\n    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */\n    9007199254740991;\n    var MAX_SAFE_COMPONENT_LENGTH = 16;\n    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;\n    var RELEASE_TYPES = [\n      \"major\",\n      \"premajor\",\n      \"minor\",\n      \"preminor\",\n      \"patch\",\n      \"prepatch\",\n      \"prerelease\"\n    ];\n    module2.exports = {\n      MAX_LENGTH,\n      MAX_SAFE_COMPONENT_LENGTH,\n      MAX_SAFE_BUILD_LENGTH,\n      MAX_SAFE_INTEGER,\n      RELEASE_TYPES,\n      SEMVER_SPEC_VERSION,\n      FLAG_INCLUDE_PRERELEASE: 1,\n      FLAG_LOOSE: 2\n    };\n  }\n});\n\n// node_modules/semver/internal/debug.js\nvar require_debug = __commonJS({\n  \"node_modules/semver/internal/debug.js\"(exports, module2) {\n    var debug = typeof process === \"object\" && process.env && process.env.NODE_DEBUG && /\\bsemver\\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error(\"SEMVER\", ...args) : () => {\n    };\n    module2.exports = debug;\n  }\n});\n\n// node_modules/semver/internal/re.js\nvar require_re = __commonJS({\n  \"node_modules/semver/internal/re.js\"(exports, module2) {\n    var {\n      MAX_SAFE_COMPONENT_LENGTH,\n      MAX_SAFE_BUILD_LENGTH,\n      MAX_LENGTH\n    } = require_constants();\n    var debug = require_debug();\n    exports = module2.exports = {};\n    var re2 = exports.re = [];\n    var safeRe = exports.safeRe = [];\n    var src = exports.src = [];\n    var t = exports.t = {};\n    var R = 0;\n    var LETTERDASHNUMBER = \"[a-zA-Z0-9-]\";\n    var safeRegexReplacements = [\n      [\"\\\\s\", 1],\n      [\"\\\\d\", MAX_LENGTH],\n      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]\n    ];\n    var makeSafeRegex = (value) => {\n      for (const [token, max] of safeRegexReplacements) {\n        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);\n      }\n      return value;\n    };\n    var createToken = (name, value, isGlobal) => {\n      const safe = makeSafeRegex(value);\n      const index = R++;\n      debug(name, index, value);\n      t[name] = index;\n      src[index] = value;\n      re2[index] = new RegExp(value, isGlobal ? \"g\" : void 0);\n      safeRe[index] = new RegExp(safe, isGlobal ? \"g\" : void 0);\n    };\n    createToken(\"NUMERICIDENTIFIER\", \"0|[1-9]\\\\d*\");\n    createToken(\"NUMERICIDENTIFIERLOOSE\", \"\\\\d+\");\n    createToken(\"NONNUMERICIDENTIFIER\", `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);\n    createToken(\"MAINVERSION\", `(${src[t.NUMERICIDENTIFIER]})\\\\.(${src[t.NUMERICIDENTIFIER]})\\\\.(${src[t.NUMERICIDENTIFIER]})`);\n    createToken(\"MAINVERSIONLOOSE\", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);\n    createToken(\"PRERELEASEIDENTIFIER\", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);\n    createToken(\"PRERELEASEIDENTIFIERLOOSE\", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);\n    createToken(\"PRERELEASE\", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`);\n    createToken(\"PRERELEASELOOSE\", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);\n    createToken(\"BUILDIDENTIFIER\", `${LETTERDASHNUMBER}+`);\n    createToken(\"BUILD\", `(?:\\\\+(${src[t.BUILDIDENTIFIER]}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`);\n    createToken(\"FULLPLAIN\", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);\n    createToken(\"FULL\", `^${src[t.FULLPLAIN]}$`);\n    createToken(\"LOOSEPLAIN\", `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);\n    createToken(\"LOOSE\", `^${src[t.LOOSEPLAIN]}$`);\n    createToken(\"GTLT\", \"((?:<|>)?=?)\");\n    createToken(\"XRANGEIDENTIFIERLOOSE\", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`);\n    createToken(\"XRANGEIDENTIFIER\", `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`);\n    createToken(\"XRANGEPLAIN\", `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\\\.(${src[t.XRANGEIDENTIFIER]})(?:\\\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);\n    createToken(\"XRANGEPLAINLOOSE\", `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);\n    createToken(\"XRANGE\", `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`);\n    createToken(\"XRANGELOOSE\", `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`);\n    createToken(\"COERCE\", `${\"(^|[^\\\\d])(\\\\d{1,\"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\\\d])`);\n    createToken(\"COERCERTL\", src[t.COERCE], true);\n    createToken(\"LONETILDE\", \"(?:~>?)\");\n    createToken(\"TILDETRIM\", `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true);\n    exports.tildeTrimReplace = \"$1~\";\n    createToken(\"TILDE\", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);\n    createToken(\"TILDELOOSE\", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);\n    createToken(\"LONECARET\", \"(?:\\\\^)\");\n    createToken(\"CARETTRIM\", `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true);\n    exports.caretTrimReplace = \"$1^\";\n    createToken(\"CARET\", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);\n    createToken(\"CARETLOOSE\", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);\n    createToken(\"COMPARATORLOOSE\", `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`);\n    createToken(\"COMPARATOR\", `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`);\n    createToken(\"COMPARATORTRIM\", `(\\\\s*)${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);\n    exports.comparatorTrimReplace = \"$1$2$3\";\n    createToken(\"HYPHENRANGE\", `^\\\\s*(${src[t.XRANGEPLAIN]})\\\\s+-\\\\s+(${src[t.XRANGEPLAIN]})\\\\s*$`);\n    createToken(\"HYPHENRANGELOOSE\", `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})\\\\s+-\\\\s+(${src[t.XRANGEPLAINLOOSE]})\\\\s*$`);\n    createToken(\"STAR\", \"(<|>)?=?\\\\s*\\\\*\");\n    createToken(\"GTE0\", \"^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$\");\n    createToken(\"GTE0PRE\", \"^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$\");\n  }\n});\n\n// node_modules/semver/internal/parse-options.js\nvar require_parse_options = __commonJS({\n  \"node_modules/semver/internal/parse-options.js\"(exports, module2) {\n    var looseOption = Object.freeze({ loose: true });\n    var emptyOpts = Object.freeze({});\n    var parseOptions = (options) => {\n      if (!options) {\n        return emptyOpts;\n      }\n      if (typeof options !== \"object\") {\n        return looseOption;\n      }\n      return options;\n    };\n    module2.exports = parseOptions;\n  }\n});\n\n// node_modules/semver/internal/identifiers.js\nvar require_identifiers = __commonJS({\n  \"node_modules/semver/internal/identifiers.js\"(exports, module2) {\n    var numeric = /^[0-9]+$/;\n    var compareIdentifiers = (a, b) => {\n      const anum = numeric.test(a);\n      const bnum = numeric.test(b);\n      if (anum && bnum) {\n        a = +a;\n        b = +b;\n      }\n      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;\n    };\n    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);\n    module2.exports = {\n      compareIdentifiers,\n      rcompareIdentifiers\n    };\n  }\n});\n\n// node_modules/semver/classes/semver.js\nvar require_semver = __commonJS({\n  \"node_modules/semver/classes/semver.js\"(exports, module2) {\n    var debug = require_debug();\n    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();\n    var { safeRe: re2, t } = require_re();\n    var parseOptions = require_parse_options();\n    var { compareIdentifiers } = require_identifiers();\n    var SemVer = class _SemVer {\n      constructor(version, options) {\n        options = parseOptions(options);\n        if (version instanceof _SemVer) {\n          if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {\n            return version;\n          } else {\n            version = version.version;\n          }\n        } else if (typeof version !== \"string\") {\n          throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`);\n        }\n        if (version.length > MAX_LENGTH) {\n          throw new TypeError(\n            `version is longer than ${MAX_LENGTH} characters`\n          );\n        }\n        debug(\"SemVer\", version, options);\n        this.options = options;\n        this.loose = !!options.loose;\n        this.includePrerelease = !!options.includePrerelease;\n        const m = version.trim().match(options.loose ? re2[t.LOOSE] : re2[t.FULL]);\n        if (!m) {\n          throw new TypeError(`Invalid Version: ${version}`);\n        }\n        this.raw = version;\n        this.major = +m[1];\n        this.minor = +m[2];\n        this.patch = +m[3];\n        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n          throw new TypeError(\"Invalid major version\");\n        }\n        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n          throw new TypeError(\"Invalid minor version\");\n        }\n        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n          throw new TypeError(\"Invalid patch version\");\n        }\n        if (!m[4]) {\n          this.prerelease = [];\n        } else {\n          this.prerelease = m[4].split(\".\").map((id) => {\n            if (/^[0-9]+$/.test(id)) {\n              const num = +id;\n              if (num >= 0 && num < MAX_SAFE_INTEGER) {\n                return num;\n              }\n            }\n            return id;\n          });\n        }\n        this.build = m[5] ? m[5].split(\".\") : [];\n        this.format();\n      }\n      format() {\n        this.version = `${this.major}.${this.minor}.${this.patch}`;\n        if (this.prerelease.length) {\n          this.version += `-${this.prerelease.join(\".\")}`;\n        }\n        return this.version;\n      }\n      toString() {\n        return this.version;\n      }\n      compare(other) {\n        debug(\"SemVer.compare\", this.version, this.options, other);\n        if (!(other instanceof _SemVer)) {\n          if (typeof other === \"string\" && other === this.version) {\n            return 0;\n          }\n          other = new _SemVer(other, this.options);\n        }\n        if (other.version === this.version) {\n          return 0;\n        }\n        return this.compareMain(other) || this.comparePre(other);\n      }\n      compareMain(other) {\n        if (!(other instanceof _SemVer)) {\n          other = new _SemVer(other, this.options);\n        }\n        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);\n      }\n      comparePre(other) {\n        if (!(other instanceof _SemVer)) {\n          other = new _SemVer(other, this.options);\n        }\n        if (this.prerelease.length && !other.prerelease.length) {\n          return -1;\n        } else if (!this.prerelease.length && other.prerelease.length) {\n          return 1;\n        } else if (!this.prerelease.length && !other.prerelease.length) {\n          return 0;\n        }\n        let i = 0;\n        do {\n          const a = this.prerelease[i];\n          const b = other.prerelease[i];\n          debug(\"prerelease compare\", i, a, b);\n          if (a === void 0 && b === void 0) {\n            return 0;\n          } else if (b === void 0) {\n            return 1;\n          } else if (a === void 0) {\n            return -1;\n          } else if (a === b) {\n            continue;\n          } else {\n            return compareIdentifiers(a, b);\n          }\n        } while (++i);\n      }\n      compareBuild(other) {\n        if (!(other instanceof _SemVer)) {\n          other = new _SemVer(other, this.options);\n        }\n        let i = 0;\n        do {\n          const a = this.build[i];\n          const b = other.build[i];\n          debug(\"prerelease compare\", i, a, b);\n          if (a === void 0 && b === void 0) {\n            return 0;\n          } else if (b === void 0) {\n            return 1;\n          } else if (a === void 0) {\n            return -1;\n          } else if (a === b) {\n            continue;\n          } else {\n            return compareIdentifiers(a, b);\n          }\n        } while (++i);\n      }\n      // preminor will bump the version up to the next minor release, and immediately\n      // down to pre-release. premajor and prepatch work the same way.\n      inc(release2, identifier, identifierBase) {\n        switch (release2) {\n          case \"premajor\":\n            this.prerelease.length = 0;\n            this.patch = 0;\n            this.minor = 0;\n            this.major++;\n            this.inc(\"pre\", identifier, identifierBase);\n            break;\n          case \"preminor\":\n            this.prerelease.length = 0;\n            this.patch = 0;\n            this.minor++;\n            this.inc(\"pre\", identifier, identifierBase);\n            break;\n          case \"prepatch\":\n            this.prerelease.length = 0;\n            this.inc(\"patch\", identifier, identifierBase);\n            this.inc(\"pre\", identifier, identifierBase);\n            break;\n          case \"prerelease\":\n            if (this.prerelease.length === 0) {\n              this.inc(\"patch\", identifier, identifierBase);\n            }\n            this.inc(\"pre\", identifier, identifierBase);\n            break;\n          case \"major\":\n            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {\n              this.major++;\n            }\n            this.minor = 0;\n            this.patch = 0;\n            this.prerelease = [];\n            break;\n          case \"minor\":\n            if (this.patch !== 0 || this.prerelease.length === 0) {\n              this.minor++;\n            }\n            this.patch = 0;\n            this.prerelease = [];\n            break;\n          case \"patch\":\n            if (this.prerelease.length === 0) {\n              this.patch++;\n            }\n            this.prerelease = [];\n            break;\n          case \"pre\": {\n            const base = Number(identifierBase) ? 1 : 0;\n            if (!identifier && identifierBase === false) {\n              throw new Error(\"invalid increment argument: identifier is empty\");\n            }\n            if (this.prerelease.length === 0) {\n              this.prerelease = [base];\n            } else {\n              let i = this.prerelease.length;\n              while (--i >= 0) {\n                if (typeof this.prerelease[i] === \"number\") {\n                  this.prerelease[i]++;\n                  i = -2;\n                }\n              }\n              if (i === -1) {\n                if (identifier === this.prerelease.join(\".\") && identifierBase === false) {\n                  throw new Error(\"invalid increment argument: identifier already exists\");\n                }\n                this.prerelease.push(base);\n              }\n            }\n            if (identifier) {\n              let prerelease = [identifier, base];\n              if (identifierBase === false) {\n                prerelease = [identifier];\n              }\n              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n                if (isNaN(this.prerelease[1])) {\n                  this.prerelease = prerelease;\n                }\n              } else {\n                this.prerelease = prerelease;\n              }\n            }\n            break;\n          }\n          default:\n            throw new Error(`invalid increment argument: ${release2}`);\n        }\n        this.raw = this.format();\n        if (this.build.length) {\n          this.raw += `+${this.build.join(\".\")}`;\n        }\n        return this;\n      }\n    };\n    module2.exports = SemVer;\n  }\n});\n\n// node_modules/semver/functions/parse.js\nvar require_parse = __commonJS({\n  \"node_modules/semver/functions/parse.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var parse4 = (version, options, throwErrors = false) => {\n      if (version instanceof SemVer) {\n        return version;\n      }\n      try {\n        return new SemVer(version, options);\n      } catch (er) {\n        if (!throwErrors) {\n          return null;\n        }\n        throw er;\n      }\n    };\n    module2.exports = parse4;\n  }\n});\n\n// node_modules/semver/functions/valid.js\nvar require_valid = __commonJS({\n  \"node_modules/semver/functions/valid.js\"(exports, module2) {\n    var parse4 = require_parse();\n    var valid = (version, options) => {\n      const v = parse4(version, options);\n      return v ? v.version : null;\n    };\n    module2.exports = valid;\n  }\n});\n\n// node_modules/semver/functions/clean.js\nvar require_clean = __commonJS({\n  \"node_modules/semver/functions/clean.js\"(exports, module2) {\n    var parse4 = require_parse();\n    var clean = (version, options) => {\n      const s = parse4(version.trim().replace(/^[=v]+/, \"\"), options);\n      return s ? s.version : null;\n    };\n    module2.exports = clean;\n  }\n});\n\n// node_modules/semver/functions/inc.js\nvar require_inc = __commonJS({\n  \"node_modules/semver/functions/inc.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var inc = (version, release2, options, identifier, identifierBase) => {\n      if (typeof options === \"string\") {\n        identifierBase = identifier;\n        identifier = options;\n        options = void 0;\n      }\n      try {\n        return new SemVer(\n          version instanceof SemVer ? version.version : version,\n          options\n        ).inc(release2, identifier, identifierBase).version;\n      } catch (er) {\n        return null;\n      }\n    };\n    module2.exports = inc;\n  }\n});\n\n// node_modules/semver/functions/diff.js\nvar require_diff = __commonJS({\n  \"node_modules/semver/functions/diff.js\"(exports, module2) {\n    var parse4 = require_parse();\n    var diff = (version1, version2) => {\n      const v1 = parse4(version1, null, true);\n      const v2 = parse4(version2, null, true);\n      const comparison = v1.compare(v2);\n      if (comparison === 0) {\n        return null;\n      }\n      const v1Higher = comparison > 0;\n      const highVersion = v1Higher ? v1 : v2;\n      const lowVersion = v1Higher ? v2 : v1;\n      const highHasPre = !!highVersion.prerelease.length;\n      const lowHasPre = !!lowVersion.prerelease.length;\n      if (lowHasPre && !highHasPre) {\n        if (!lowVersion.patch && !lowVersion.minor) {\n          return \"major\";\n        }\n        if (highVersion.patch) {\n          return \"patch\";\n        }\n        if (highVersion.minor) {\n          return \"minor\";\n        }\n        return \"major\";\n      }\n      const prefix = highHasPre ? \"pre\" : \"\";\n      if (v1.major !== v2.major) {\n        return prefix + \"major\";\n      }\n      if (v1.minor !== v2.minor) {\n        return prefix + \"minor\";\n      }\n      if (v1.patch !== v2.patch) {\n        return prefix + \"patch\";\n      }\n      return \"prerelease\";\n    };\n    module2.exports = diff;\n  }\n});\n\n// node_modules/semver/functions/major.js\nvar require_major = __commonJS({\n  \"node_modules/semver/functions/major.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var major2 = (a, loose) => new SemVer(a, loose).major;\n    module2.exports = major2;\n  }\n});\n\n// node_modules/semver/functions/minor.js\nvar require_minor = __commonJS({\n  \"node_modules/semver/functions/minor.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var minor = (a, loose) => new SemVer(a, loose).minor;\n    module2.exports = minor;\n  }\n});\n\n// node_modules/semver/functions/patch.js\nvar require_patch = __commonJS({\n  \"node_modules/semver/functions/patch.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var patch = (a, loose) => new SemVer(a, loose).patch;\n    module2.exports = patch;\n  }\n});\n\n// node_modules/semver/functions/prerelease.js\nvar require_prerelease = __commonJS({\n  \"node_modules/semver/functions/prerelease.js\"(exports, module2) {\n    var parse4 = require_parse();\n    var prerelease = (version, options) => {\n      const parsed = parse4(version, options);\n      return parsed && parsed.prerelease.length ? parsed.prerelease : null;\n    };\n    module2.exports = prerelease;\n  }\n});\n\n// node_modules/semver/functions/compare.js\nvar require_compare = __commonJS({\n  \"node_modules/semver/functions/compare.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));\n    module2.exports = compare;\n  }\n});\n\n// node_modules/semver/functions/rcompare.js\nvar require_rcompare = __commonJS({\n  \"node_modules/semver/functions/rcompare.js\"(exports, module2) {\n    var compare = require_compare();\n    var rcompare = (a, b, loose) => compare(b, a, loose);\n    module2.exports = rcompare;\n  }\n});\n\n// node_modules/semver/functions/compare-loose.js\nvar require_compare_loose = __commonJS({\n  \"node_modules/semver/functions/compare-loose.js\"(exports, module2) {\n    var compare = require_compare();\n    var compareLoose = (a, b) => compare(a, b, true);\n    module2.exports = compareLoose;\n  }\n});\n\n// node_modules/semver/functions/compare-build.js\nvar require_compare_build = __commonJS({\n  \"node_modules/semver/functions/compare-build.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var compareBuild = (a, b, loose) => {\n      const versionA = new SemVer(a, loose);\n      const versionB = new SemVer(b, loose);\n      return versionA.compare(versionB) || versionA.compareBuild(versionB);\n    };\n    module2.exports = compareBuild;\n  }\n});\n\n// node_modules/semver/functions/sort.js\nvar require_sort = __commonJS({\n  \"node_modules/semver/functions/sort.js\"(exports, module2) {\n    var compareBuild = require_compare_build();\n    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));\n    module2.exports = sort;\n  }\n});\n\n// node_modules/semver/functions/rsort.js\nvar require_rsort = __commonJS({\n  \"node_modules/semver/functions/rsort.js\"(exports, module2) {\n    var compareBuild = require_compare_build();\n    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));\n    module2.exports = rsort;\n  }\n});\n\n// node_modules/semver/functions/gt.js\nvar require_gt = __commonJS({\n  \"node_modules/semver/functions/gt.js\"(exports, module2) {\n    var compare = require_compare();\n    var gt = (a, b, loose) => compare(a, b, loose) > 0;\n    module2.exports = gt;\n  }\n});\n\n// node_modules/semver/functions/lt.js\nvar require_lt = __commonJS({\n  \"node_modules/semver/functions/lt.js\"(exports, module2) {\n    var compare = require_compare();\n    var lt = (a, b, loose) => compare(a, b, loose) < 0;\n    module2.exports = lt;\n  }\n});\n\n// node_modules/semver/functions/eq.js\nvar require_eq = __commonJS({\n  \"node_modules/semver/functions/eq.js\"(exports, module2) {\n    var compare = require_compare();\n    var eq = (a, b, loose) => compare(a, b, loose) === 0;\n    module2.exports = eq;\n  }\n});\n\n// node_modules/semver/functions/neq.js\nvar require_neq = __commonJS({\n  \"node_modules/semver/functions/neq.js\"(exports, module2) {\n    var compare = require_compare();\n    var neq = (a, b, loose) => compare(a, b, loose) !== 0;\n    module2.exports = neq;\n  }\n});\n\n// node_modules/semver/functions/gte.js\nvar require_gte = __commonJS({\n  \"node_modules/semver/functions/gte.js\"(exports, module2) {\n    var compare = require_compare();\n    var gte = (a, b, loose) => compare(a, b, loose) >= 0;\n    module2.exports = gte;\n  }\n});\n\n// node_modules/semver/functions/lte.js\nvar require_lte = __commonJS({\n  \"node_modules/semver/functions/lte.js\"(exports, module2) {\n    var compare = require_compare();\n    var lte = (a, b, loose) => compare(a, b, loose) <= 0;\n    module2.exports = lte;\n  }\n});\n\n// node_modules/semver/functions/cmp.js\nvar require_cmp = __commonJS({\n  \"node_modules/semver/functions/cmp.js\"(exports, module2) {\n    var eq = require_eq();\n    var neq = require_neq();\n    var gt = require_gt();\n    var gte = require_gte();\n    var lt = require_lt();\n    var lte = require_lte();\n    var cmp = (a, op, b, loose) => {\n      switch (op) {\n        case \"===\":\n          if (typeof a === \"object\") {\n            a = a.version;\n          }\n          if (typeof b === \"object\") {\n            b = b.version;\n          }\n          return a === b;\n        case \"!==\":\n          if (typeof a === \"object\") {\n            a = a.version;\n          }\n          if (typeof b === \"object\") {\n            b = b.version;\n          }\n          return a !== b;\n        case \"\":\n        case \"=\":\n        case \"==\":\n          return eq(a, b, loose);\n        case \"!=\":\n          return neq(a, b, loose);\n        case \">\":\n          return gt(a, b, loose);\n        case \">=\":\n          return gte(a, b, loose);\n        case \"<\":\n          return lt(a, b, loose);\n        case \"<=\":\n          return lte(a, b, loose);\n        default:\n          throw new TypeError(`Invalid operator: ${op}`);\n      }\n    };\n    module2.exports = cmp;\n  }\n});\n\n// node_modules/semver/functions/coerce.js\nvar require_coerce = __commonJS({\n  \"node_modules/semver/functions/coerce.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var parse4 = require_parse();\n    var { safeRe: re2, t } = require_re();\n    var coerce = (version, options) => {\n      if (version instanceof SemVer) {\n        return version;\n      }\n      if (typeof version === \"number\") {\n        version = String(version);\n      }\n      if (typeof version !== \"string\") {\n        return null;\n      }\n      options = options || {};\n      let match = null;\n      if (!options.rtl) {\n        match = version.match(re2[t.COERCE]);\n      } else {\n        let next;\n        while ((next = re2[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {\n          if (!match || next.index + next[0].length !== match.index + match[0].length) {\n            match = next;\n          }\n          re2[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;\n        }\n        re2[t.COERCERTL].lastIndex = -1;\n      }\n      if (match === null) {\n        return null;\n      }\n      return parse4(`${match[2]}.${match[3] || \"0\"}.${match[4] || \"0\"}`, options);\n    };\n    module2.exports = coerce;\n  }\n});\n\n// node_modules/yallist/iterator.js\nvar require_iterator = __commonJS({\n  \"node_modules/yallist/iterator.js\"(exports, module2) {\n    \"use strict\";\n    module2.exports = function(Yallist) {\n      Yallist.prototype[Symbol.iterator] = function* () {\n        for (let walker = this.head; walker; walker = walker.next) {\n          yield walker.value;\n        }\n      };\n    };\n  }\n});\n\n// node_modules/yallist/yallist.js\nvar require_yallist = __commonJS({\n  \"node_modules/yallist/yallist.js\"(exports, module2) {\n    \"use strict\";\n    module2.exports = Yallist;\n    Yallist.Node = Node;\n    Yallist.create = Yallist;\n    function Yallist(list) {\n      var self2 = this;\n      if (!(self2 instanceof Yallist)) {\n        self2 = new Yallist();\n      }\n      self2.tail = null;\n      self2.head = null;\n      self2.length = 0;\n      if (list && typeof list.forEach === \"function\") {\n        list.forEach(function(item) {\n          self2.push(item);\n        });\n      } else if (arguments.length > 0) {\n        for (var i = 0, l = arguments.length; i < l; i++) {\n          self2.push(arguments[i]);\n        }\n      }\n      return self2;\n    }\n    Yallist.prototype.removeNode = function(node) {\n      if (node.list !== this) {\n        throw new Error(\"removing node which does not belong to this list\");\n      }\n      var next = node.next;\n      var prev = node.prev;\n      if (next) {\n        next.prev = prev;\n      }\n      if (prev) {\n        prev.next = next;\n      }\n      if (node === this.head) {\n        this.head = next;\n      }\n      if (node === this.tail) {\n        this.tail = prev;\n      }\n      node.list.length--;\n      node.next = null;\n      node.prev = null;\n      node.list = null;\n      return next;\n    };\n    Yallist.prototype.unshiftNode = function(node) {\n      if (node === this.head) {\n        return;\n      }\n      if (node.list) {\n        node.list.removeNode(node);\n      }\n      var head = this.head;\n      node.list = this;\n      node.next = head;\n      if (head) {\n        head.prev = node;\n      }\n      this.head = node;\n      if (!this.tail) {\n        this.tail = node;\n      }\n      this.length++;\n    };\n    Yallist.prototype.pushNode = function(node) {\n      if (node === this.tail) {\n        return;\n      }\n      if (node.list) {\n        node.list.removeNode(node);\n      }\n      var tail = this.tail;\n      node.list = this;\n      node.prev = tail;\n      if (tail) {\n        tail.next = node;\n      }\n      this.tail = node;\n      if (!this.head) {\n        this.head = node;\n      }\n      this.length++;\n    };\n    Yallist.prototype.push = function() {\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        push(this, arguments[i]);\n      }\n      return this.length;\n    };\n    Yallist.prototype.unshift = function() {\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        unshift(this, arguments[i]);\n      }\n      return this.length;\n    };\n    Yallist.prototype.pop = function() {\n      if (!this.tail) {\n        return void 0;\n      }\n      var res = this.tail.value;\n      this.tail = this.tail.prev;\n      if (this.tail) {\n        this.tail.next = null;\n      } else {\n        this.head = null;\n      }\n      this.length--;\n      return res;\n    };\n    Yallist.prototype.shift = function() {\n      if (!this.head) {\n        return void 0;\n      }\n      var res = this.head.value;\n      this.head = this.head.next;\n      if (this.head) {\n        this.head.prev = null;\n      } else {\n        this.tail = null;\n      }\n      this.length--;\n      return res;\n    };\n    Yallist.prototype.forEach = function(fn, thisp) {\n      thisp = thisp || this;\n      for (var walker = this.head, i = 0; walker !== null; i++) {\n        fn.call(thisp, walker.value, i, this);\n        walker = walker.next;\n      }\n    };\n    Yallist.prototype.forEachReverse = function(fn, thisp) {\n      thisp = thisp || this;\n      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n        fn.call(thisp, walker.value, i, this);\n        walker = walker.prev;\n      }\n    };\n    Yallist.prototype.get = function(n) {\n      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n        walker = walker.next;\n      }\n      if (i === n && walker !== null) {\n        return walker.value;\n      }\n    };\n    Yallist.prototype.getReverse = function(n) {\n      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n        walker = walker.prev;\n      }\n      if (i === n && walker !== null) {\n        return walker.value;\n      }\n    };\n    Yallist.prototype.map = function(fn, thisp) {\n      thisp = thisp || this;\n      var res = new Yallist();\n      for (var walker = this.head; walker !== null; ) {\n        res.push(fn.call(thisp, walker.value, this));\n        walker = walker.next;\n      }\n      return res;\n    };\n    Yallist.prototype.mapReverse = function(fn, thisp) {\n      thisp = thisp || this;\n      var res = new Yallist();\n      for (var walker = this.tail; walker !== null; ) {\n        res.push(fn.call(thisp, walker.value, this));\n        walker = walker.prev;\n      }\n      return res;\n    };\n    Yallist.prototype.reduce = function(fn, initial) {\n      var acc;\n      var walker = this.head;\n      if (arguments.length > 1) {\n        acc = initial;\n      } else if (this.head) {\n        walker = this.head.next;\n        acc = this.head.value;\n      } else {\n        throw new TypeError(\"Reduce of empty list with no initial value\");\n      }\n      for (var i = 0; walker !== null; i++) {\n        acc = fn(acc, walker.value, i);\n        walker = walker.next;\n      }\n      return acc;\n    };\n    Yallist.prototype.reduceReverse = function(fn, initial) {\n      var acc;\n      var walker = this.tail;\n      if (arguments.length > 1) {\n        acc = initial;\n      } else if (this.tail) {\n        walker = this.tail.prev;\n        acc = this.tail.value;\n      } else {\n        throw new TypeError(\"Reduce of empty list with no initial value\");\n      }\n      for (var i = this.length - 1; walker !== null; i--) {\n        acc = fn(acc, walker.value, i);\n        walker = walker.prev;\n      }\n      return acc;\n    };\n    Yallist.prototype.toArray = function() {\n      var arr = new Array(this.length);\n      for (var i = 0, walker = this.head; walker !== null; i++) {\n        arr[i] = walker.value;\n        walker = walker.next;\n      }\n      return arr;\n    };\n    Yallist.prototype.toArrayReverse = function() {\n      var arr = new Array(this.length);\n      for (var i = 0, walker = this.tail; walker !== null; i++) {\n        arr[i] = walker.value;\n        walker = walker.prev;\n      }\n      return arr;\n    };\n    Yallist.prototype.slice = function(from, to) {\n      to = to || this.length;\n      if (to < 0) {\n        to += this.length;\n      }\n      from = from || 0;\n      if (from < 0) {\n        from += this.length;\n      }\n      var ret = new Yallist();\n      if (to < from || to < 0) {\n        return ret;\n      }\n      if (from < 0) {\n        from = 0;\n      }\n      if (to > this.length) {\n        to = this.length;\n      }\n      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n        walker = walker.next;\n      }\n      for (; walker !== null && i < to; i++, walker = walker.next) {\n        ret.push(walker.value);\n      }\n      return ret;\n    };\n    Yallist.prototype.sliceReverse = function(from, to) {\n      to = to || this.length;\n      if (to < 0) {\n        to += this.length;\n      }\n      from = from || 0;\n      if (from < 0) {\n        from += this.length;\n      }\n      var ret = new Yallist();\n      if (to < from || to < 0) {\n        return ret;\n      }\n      if (from < 0) {\n        from = 0;\n      }\n      if (to > this.length) {\n        to = this.length;\n      }\n      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n        walker = walker.prev;\n      }\n      for (; walker !== null && i > from; i--, walker = walker.prev) {\n        ret.push(walker.value);\n      }\n      return ret;\n    };\n    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {\n      if (start > this.length) {\n        start = this.length - 1;\n      }\n      if (start < 0) {\n        start = this.length + start;\n      }\n      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n        walker = walker.next;\n      }\n      var ret = [];\n      for (var i = 0; walker && i < deleteCount; i++) {\n        ret.push(walker.value);\n        walker = this.removeNode(walker);\n      }\n      if (walker === null) {\n        walker = this.tail;\n      }\n      if (walker !== this.head && walker !== this.tail) {\n        walker = walker.prev;\n      }\n      for (var i = 0; i < nodes.length; i++) {\n        walker = insert(this, walker, nodes[i]);\n      }\n      return ret;\n    };\n    Yallist.prototype.reverse = function() {\n      var head = this.head;\n      var tail = this.tail;\n      for (var walker = head; walker !== null; walker = walker.prev) {\n        var p = walker.prev;\n        walker.prev = walker.next;\n        walker.next = p;\n      }\n      this.head = tail;\n      this.tail = head;\n      return this;\n    };\n    function insert(self2, node, value) {\n      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);\n      if (inserted.next === null) {\n        self2.tail = inserted;\n      }\n      if (inserted.prev === null) {\n        self2.head = inserted;\n      }\n      self2.length++;\n      return inserted;\n    }\n    function push(self2, item) {\n      self2.tail = new Node(item, self2.tail, null, self2);\n      if (!self2.head) {\n        self2.head = self2.tail;\n      }\n      self2.length++;\n    }\n    function unshift(self2, item) {\n      self2.head = new Node(item, null, self2.head, self2);\n      if (!self2.tail) {\n        self2.tail = self2.head;\n      }\n      self2.length++;\n    }\n    function Node(value, prev, next, list) {\n      if (!(this instanceof Node)) {\n        return new Node(value, prev, next, list);\n      }\n      this.list = list;\n      this.value = value;\n      if (prev) {\n        prev.next = this;\n        this.prev = prev;\n      } else {\n        this.prev = null;\n      }\n      if (next) {\n        next.prev = this;\n        this.next = next;\n      } else {\n        this.next = null;\n      }\n    }\n    try {\n      require_iterator()(Yallist);\n    } catch (er) {\n    }\n  }\n});\n\n// node_modules/lru-cache/index.js\nvar require_lru_cache = __commonJS({\n  \"node_modules/lru-cache/index.js\"(exports, module2) {\n    \"use strict\";\n    var Yallist = require_yallist();\n    var MAX = Symbol(\"max\");\n    var LENGTH = Symbol(\"length\");\n    var LENGTH_CALCULATOR = Symbol(\"lengthCalculator\");\n    var ALLOW_STALE = Symbol(\"allowStale\");\n    var MAX_AGE = Symbol(\"maxAge\");\n    var DISPOSE = Symbol(\"dispose\");\n    var NO_DISPOSE_ON_SET = Symbol(\"noDisposeOnSet\");\n    var LRU_LIST = Symbol(\"lruList\");\n    var CACHE = Symbol(\"cache\");\n    var UPDATE_AGE_ON_GET = Symbol(\"updateAgeOnGet\");\n    var naiveLength = () => 1;\n    var LRUCache = class {\n      constructor(options) {\n        if (typeof options === \"number\")\n          options = { max: options };\n        if (!options)\n          options = {};\n        if (options.max && (typeof options.max !== \"number\" || options.max < 0))\n          throw new TypeError(\"max must be a non-negative number\");\n        const max = this[MAX] = options.max || Infinity;\n        const lc = options.length || naiveLength;\n        this[LENGTH_CALCULATOR] = typeof lc !== \"function\" ? naiveLength : lc;\n        this[ALLOW_STALE] = options.stale || false;\n        if (options.maxAge && typeof options.maxAge !== \"number\")\n          throw new TypeError(\"maxAge must be a number\");\n        this[MAX_AGE] = options.maxAge || 0;\n        this[DISPOSE] = options.dispose;\n        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;\n        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;\n        this.reset();\n      }\n      // resize the cache when the max changes.\n      set max(mL) {\n        if (typeof mL !== \"number\" || mL < 0)\n          throw new TypeError(\"max must be a non-negative number\");\n        this[MAX] = mL || Infinity;\n        trim(this);\n      }\n      get max() {\n        return this[MAX];\n      }\n      set allowStale(allowStale) {\n        this[ALLOW_STALE] = !!allowStale;\n      }\n      get allowStale() {\n        return this[ALLOW_STALE];\n      }\n      set maxAge(mA) {\n        if (typeof mA !== \"number\")\n          throw new TypeError(\"maxAge must be a non-negative number\");\n        this[MAX_AGE] = mA;\n        trim(this);\n      }\n      get maxAge() {\n        return this[MAX_AGE];\n      }\n      // resize the cache when the lengthCalculator changes.\n      set lengthCalculator(lC) {\n        if (typeof lC !== \"function\")\n          lC = naiveLength;\n        if (lC !== this[LENGTH_CALCULATOR]) {\n          this[LENGTH_CALCULATOR] = lC;\n          this[LENGTH] = 0;\n          this[LRU_LIST].forEach((hit) => {\n            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);\n            this[LENGTH] += hit.length;\n          });\n        }\n        trim(this);\n      }\n      get lengthCalculator() {\n        return this[LENGTH_CALCULATOR];\n      }\n      get length() {\n        return this[LENGTH];\n      }\n      get itemCount() {\n        return this[LRU_LIST].length;\n      }\n      rforEach(fn, thisp) {\n        thisp = thisp || this;\n        for (let walker = this[LRU_LIST].tail; walker !== null; ) {\n          const prev = walker.prev;\n          forEachStep(this, fn, walker, thisp);\n          walker = prev;\n        }\n      }\n      forEach(fn, thisp) {\n        thisp = thisp || this;\n        for (let walker = this[LRU_LIST].head; walker !== null; ) {\n          const next = walker.next;\n          forEachStep(this, fn, walker, thisp);\n          walker = next;\n        }\n      }\n      keys() {\n        return this[LRU_LIST].toArray().map((k) => k.key);\n      }\n      values() {\n        return this[LRU_LIST].toArray().map((k) => k.value);\n      }\n      reset() {\n        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {\n          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));\n        }\n        this[CACHE] = /* @__PURE__ */ new Map();\n        this[LRU_LIST] = new Yallist();\n        this[LENGTH] = 0;\n      }\n      dump() {\n        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {\n          k: hit.key,\n          v: hit.value,\n          e: hit.now + (hit.maxAge || 0)\n        }).toArray().filter((h) => h);\n      }\n      dumpLru() {\n        return this[LRU_LIST];\n      }\n      set(key, value, maxAge) {\n        maxAge = maxAge || this[MAX_AGE];\n        if (maxAge && typeof maxAge !== \"number\")\n          throw new TypeError(\"maxAge must be a number\");\n        const now = maxAge ? Date.now() : 0;\n        const len = this[LENGTH_CALCULATOR](value, key);\n        if (this[CACHE].has(key)) {\n          if (len > this[MAX]) {\n            del(this, this[CACHE].get(key));\n            return false;\n          }\n          const node = this[CACHE].get(key);\n          const item = node.value;\n          if (this[DISPOSE]) {\n            if (!this[NO_DISPOSE_ON_SET])\n              this[DISPOSE](key, item.value);\n          }\n          item.now = now;\n          item.maxAge = maxAge;\n          item.value = value;\n          this[LENGTH] += len - item.length;\n          item.length = len;\n          this.get(key);\n          trim(this);\n          return true;\n        }\n        const hit = new Entry(key, value, len, now, maxAge);\n        if (hit.length > this[MAX]) {\n          if (this[DISPOSE])\n            this[DISPOSE](key, value);\n          return false;\n        }\n        this[LENGTH] += hit.length;\n        this[LRU_LIST].unshift(hit);\n        this[CACHE].set(key, this[LRU_LIST].head);\n        trim(this);\n        return true;\n      }\n      has(key) {\n        if (!this[CACHE].has(key))\n          return false;\n        const hit = this[CACHE].get(key).value;\n        return !isStale(this, hit);\n      }\n      get(key) {\n        return get(this, key, true);\n      }\n      peek(key) {\n        return get(this, key, false);\n      }\n      pop() {\n        const node = this[LRU_LIST].tail;\n        if (!node)\n          return null;\n        del(this, node);\n        return node.value;\n      }\n      del(key) {\n        del(this, this[CACHE].get(key));\n      }\n      load(arr) {\n        this.reset();\n        const now = Date.now();\n        for (let l = arr.length - 1; l >= 0; l--) {\n          const hit = arr[l];\n          const expiresAt = hit.e || 0;\n          if (expiresAt === 0)\n            this.set(hit.k, hit.v);\n          else {\n            const maxAge = expiresAt - now;\n            if (maxAge > 0) {\n              this.set(hit.k, hit.v, maxAge);\n            }\n          }\n        }\n      }\n      prune() {\n        this[CACHE].forEach((value, key) => get(this, key, false));\n      }\n    };\n    var get = (self2, key, doUse) => {\n      const node = self2[CACHE].get(key);\n      if (node) {\n        const hit = node.value;\n        if (isStale(self2, hit)) {\n          del(self2, node);\n          if (!self2[ALLOW_STALE])\n            return void 0;\n        } else {\n          if (doUse) {\n            if (self2[UPDATE_AGE_ON_GET])\n              node.value.now = Date.now();\n            self2[LRU_LIST].unshiftNode(node);\n          }\n        }\n        return hit.value;\n      }\n    };\n    var isStale = (self2, hit) => {\n      if (!hit || !hit.maxAge && !self2[MAX_AGE])\n        return false;\n      const diff = Date.now() - hit.now;\n      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];\n    };\n    var trim = (self2) => {\n      if (self2[LENGTH] > self2[MAX]) {\n        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {\n          const prev = walker.prev;\n          del(self2, walker);\n          walker = prev;\n        }\n      }\n    };\n    var del = (self2, node) => {\n      if (node) {\n        const hit = node.value;\n        if (self2[DISPOSE])\n          self2[DISPOSE](hit.key, hit.value);\n        self2[LENGTH] -= hit.length;\n        self2[CACHE].delete(hit.key);\n        self2[LRU_LIST].removeNode(node);\n      }\n    };\n    var Entry = class {\n      constructor(key, value, length, now, maxAge) {\n        this.key = key;\n        this.value = value;\n        this.length = length;\n        this.now = now;\n        this.maxAge = maxAge || 0;\n      }\n    };\n    var forEachStep = (self2, fn, node, thisp) => {\n      let hit = node.value;\n      if (isStale(self2, hit)) {\n        del(self2, node);\n        if (!self2[ALLOW_STALE])\n          hit = void 0;\n      }\n      if (hit)\n        fn.call(thisp, hit.value, hit.key, self2);\n    };\n    module2.exports = LRUCache;\n  }\n});\n\n// node_modules/semver/classes/range.js\nvar require_range = __commonJS({\n  \"node_modules/semver/classes/range.js\"(exports, module2) {\n    var Range = class _Range {\n      constructor(range, options) {\n        options = parseOptions(options);\n        if (range instanceof _Range) {\n          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n            return range;\n          } else {\n            return new _Range(range.raw, options);\n          }\n        }\n        if (range instanceof Comparator) {\n          this.raw = range.value;\n          this.set = [[range]];\n          this.format();\n          return this;\n        }\n        this.options = options;\n        this.loose = !!options.loose;\n        this.includePrerelease = !!options.includePrerelease;\n        this.raw = range.trim().split(/\\s+/).join(\" \");\n        this.set = this.raw.split(\"||\").map((r) => this.parseRange(r.trim())).filter((c) => c.length);\n        if (!this.set.length) {\n          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);\n        }\n        if (this.set.length > 1) {\n          const first = this.set[0];\n          this.set = this.set.filter((c) => !isNullSet(c[0]));\n          if (this.set.length === 0) {\n            this.set = [first];\n          } else if (this.set.length > 1) {\n            for (const c of this.set) {\n              if (c.length === 1 && isAny(c[0])) {\n                this.set = [c];\n                break;\n              }\n            }\n          }\n        }\n        this.format();\n      }\n      format() {\n        this.range = this.set.map((comps) => comps.join(\" \").trim()).join(\"||\").trim();\n        return this.range;\n      }\n      toString() {\n        return this.range;\n      }\n      parseRange(range) {\n        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);\n        const memoKey = memoOpts + \":\" + range;\n        const cached = cache.get(memoKey);\n        if (cached) {\n          return cached;\n        }\n        const loose = this.options.loose;\n        const hr = loose ? re2[t.HYPHENRANGELOOSE] : re2[t.HYPHENRANGE];\n        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n        debug(\"hyphen replace\", range);\n        range = range.replace(re2[t.COMPARATORTRIM], comparatorTrimReplace);\n        debug(\"comparator trim\", range);\n        range = range.replace(re2[t.TILDETRIM], tildeTrimReplace);\n        debug(\"tilde trim\", range);\n        range = range.replace(re2[t.CARETTRIM], caretTrimReplace);\n        debug(\"caret trim\", range);\n        let rangeList = range.split(\" \").map((comp) => parseComparator(comp, this.options)).join(\" \").split(/\\s+/).map((comp) => replaceGTE0(comp, this.options));\n        if (loose) {\n          rangeList = rangeList.filter((comp) => {\n            debug(\"loose invalid filter\", comp, this.options);\n            return !!comp.match(re2[t.COMPARATORLOOSE]);\n          });\n        }\n        debug(\"range list\", rangeList);\n        const rangeMap = /* @__PURE__ */ new Map();\n        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));\n        for (const comp of comparators) {\n          if (isNullSet(comp)) {\n            return [comp];\n          }\n          rangeMap.set(comp.value, comp);\n        }\n        if (rangeMap.size > 1 && rangeMap.has(\"\")) {\n          rangeMap.delete(\"\");\n        }\n        const result = [...rangeMap.values()];\n        cache.set(memoKey, result);\n        return result;\n      }\n      intersects(range, options) {\n        if (!(range instanceof _Range)) {\n          throw new TypeError(\"a Range is required\");\n        }\n        return this.set.some((thisComparators) => {\n          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {\n            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options);\n              });\n            });\n          });\n        });\n      }\n      // if ANY of the sets match ALL of its comparators, then pass\n      test(version) {\n        if (!version) {\n          return false;\n        }\n        if (typeof version === \"string\") {\n          try {\n            version = new SemVer(version, this.options);\n          } catch (er) {\n            return false;\n          }\n        }\n        for (let i = 0; i < this.set.length; i++) {\n          if (testSet(this.set[i], version, this.options)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    };\n    module2.exports = Range;\n    var LRU = require_lru_cache();\n    var cache = new LRU({ max: 1e3 });\n    var parseOptions = require_parse_options();\n    var Comparator = require_comparator();\n    var debug = require_debug();\n    var SemVer = require_semver();\n    var {\n      safeRe: re2,\n      t,\n      comparatorTrimReplace,\n      tildeTrimReplace,\n      caretTrimReplace\n    } = require_re();\n    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();\n    var isNullSet = (c) => c.value === \"<0.0.0-0\";\n    var isAny = (c) => c.value === \"\";\n    var isSatisfiable = (comparators, options) => {\n      let result = true;\n      const remainingComparators = comparators.slice();\n      let testComparator = remainingComparators.pop();\n      while (result && remainingComparators.length) {\n        result = remainingComparators.every((otherComparator) => {\n          return testComparator.intersects(otherComparator, options);\n        });\n        testComparator = remainingComparators.pop();\n      }\n      return result;\n    };\n    var parseComparator = (comp, options) => {\n      debug(\"comp\", comp, options);\n      comp = replaceCarets(comp, options);\n      debug(\"caret\", comp);\n      comp = replaceTildes(comp, options);\n      debug(\"tildes\", comp);\n      comp = replaceXRanges(comp, options);\n      debug(\"xrange\", comp);\n      comp = replaceStars(comp, options);\n      debug(\"stars\", comp);\n      return comp;\n    };\n    var isX = (id) => !id || id.toLowerCase() === \"x\" || id === \"*\";\n    var replaceTildes = (comp, options) => {\n      return comp.trim().split(/\\s+/).map((c) => replaceTilde(c, options)).join(\" \");\n    };\n    var replaceTilde = (comp, options) => {\n      const r = options.loose ? re2[t.TILDELOOSE] : re2[t.TILDE];\n      return comp.replace(r, (_, M, m, p, pr) => {\n        debug(\"tilde\", comp, _, M, m, p, pr);\n        let ret;\n        if (isX(M)) {\n          ret = \"\";\n        } else if (isX(m)) {\n          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;\n        } else if (isX(p)) {\n          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;\n        } else if (pr) {\n          debug(\"replaceTilde pr\", pr);\n          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;\n        } else {\n          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;\n        }\n        debug(\"tilde return\", ret);\n        return ret;\n      });\n    };\n    var replaceCarets = (comp, options) => {\n      return comp.trim().split(/\\s+/).map((c) => replaceCaret(c, options)).join(\" \");\n    };\n    var replaceCaret = (comp, options) => {\n      debug(\"caret\", comp, options);\n      const r = options.loose ? re2[t.CARETLOOSE] : re2[t.CARET];\n      const z = options.includePrerelease ? \"-0\" : \"\";\n      return comp.replace(r, (_, M, m, p, pr) => {\n        debug(\"caret\", comp, _, M, m, p, pr);\n        let ret;\n        if (isX(M)) {\n          ret = \"\";\n        } else if (isX(m)) {\n          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;\n        } else if (isX(p)) {\n          if (M === \"0\") {\n            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;\n          } else {\n            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;\n          }\n        } else if (pr) {\n          debug(\"replaceCaret pr\", pr);\n          if (M === \"0\") {\n            if (m === \"0\") {\n              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;\n            } else {\n              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;\n            }\n          } else {\n            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;\n          }\n        } else {\n          debug(\"no pr\");\n          if (M === \"0\") {\n            if (m === \"0\") {\n              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;\n            } else {\n              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;\n            }\n          } else {\n            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;\n          }\n        }\n        debug(\"caret return\", ret);\n        return ret;\n      });\n    };\n    var replaceXRanges = (comp, options) => {\n      debug(\"replaceXRanges\", comp, options);\n      return comp.split(/\\s+/).map((c) => replaceXRange(c, options)).join(\" \");\n    };\n    var replaceXRange = (comp, options) => {\n      comp = comp.trim();\n      const r = options.loose ? re2[t.XRANGELOOSE] : re2[t.XRANGE];\n      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n        debug(\"xRange\", comp, ret, gtlt, M, m, p, pr);\n        const xM = isX(M);\n        const xm = xM || isX(m);\n        const xp = xm || isX(p);\n        const anyX = xp;\n        if (gtlt === \"=\" && anyX) {\n          gtlt = \"\";\n        }\n        pr = options.includePrerelease ? \"-0\" : \"\";\n        if (xM) {\n          if (gtlt === \">\" || gtlt === \"<\") {\n            ret = \"<0.0.0-0\";\n          } else {\n            ret = \"*\";\n          }\n        } else if (gtlt && anyX) {\n          if (xm) {\n            m = 0;\n          }\n          p = 0;\n          if (gtlt === \">\") {\n            gtlt = \">=\";\n            if (xm) {\n              M = +M + 1;\n              m = 0;\n              p = 0;\n            } else {\n              m = +m + 1;\n              p = 0;\n            }\n          } else if (gtlt === \"<=\") {\n            gtlt = \"<\";\n            if (xm) {\n              M = +M + 1;\n            } else {\n              m = +m + 1;\n            }\n          }\n          if (gtlt === \"<\") {\n            pr = \"-0\";\n          }\n          ret = `${gtlt + M}.${m}.${p}${pr}`;\n        } else if (xm) {\n          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;\n        } else if (xp) {\n          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;\n        }\n        debug(\"xRange return\", ret);\n        return ret;\n      });\n    };\n    var replaceStars = (comp, options) => {\n      debug(\"replaceStars\", comp, options);\n      return comp.trim().replace(re2[t.STAR], \"\");\n    };\n    var replaceGTE0 = (comp, options) => {\n      debug(\"replaceGTE0\", comp, options);\n      return comp.trim().replace(re2[options.includePrerelease ? t.GTE0PRE : t.GTE0], \"\");\n    };\n    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {\n      if (isX(fM)) {\n        from = \"\";\n      } else if (isX(fm)) {\n        from = `>=${fM}.0.0${incPr ? \"-0\" : \"\"}`;\n      } else if (isX(fp)) {\n        from = `>=${fM}.${fm}.0${incPr ? \"-0\" : \"\"}`;\n      } else if (fpr) {\n        from = `>=${from}`;\n      } else {\n        from = `>=${from}${incPr ? \"-0\" : \"\"}`;\n      }\n      if (isX(tM)) {\n        to = \"\";\n      } else if (isX(tm)) {\n        to = `<${+tM + 1}.0.0-0`;\n      } else if (isX(tp)) {\n        to = `<${tM}.${+tm + 1}.0-0`;\n      } else if (tpr) {\n        to = `<=${tM}.${tm}.${tp}-${tpr}`;\n      } else if (incPr) {\n        to = `<${tM}.${tm}.${+tp + 1}-0`;\n      } else {\n        to = `<=${to}`;\n      }\n      return `${from} ${to}`.trim();\n    };\n    var testSet = (set, version, options) => {\n      for (let i = 0; i < set.length; i++) {\n        if (!set[i].test(version)) {\n          return false;\n        }\n      }\n      if (version.prerelease.length && !options.includePrerelease) {\n        for (let i = 0; i < set.length; i++) {\n          debug(set[i].semver);\n          if (set[i].semver === Comparator.ANY) {\n            continue;\n          }\n          if (set[i].semver.prerelease.length > 0) {\n            const allowed = set[i].semver;\n            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n      return true;\n    };\n  }\n});\n\n// node_modules/semver/classes/comparator.js\nvar require_comparator = __commonJS({\n  \"node_modules/semver/classes/comparator.js\"(exports, module2) {\n    var ANY = Symbol(\"SemVer ANY\");\n    var Comparator = class _Comparator {\n      static get ANY() {\n        return ANY;\n      }\n      constructor(comp, options) {\n        options = parseOptions(options);\n        if (comp instanceof _Comparator) {\n          if (comp.loose === !!options.loose) {\n            return comp;\n          } else {\n            comp = comp.value;\n          }\n        }\n        comp = comp.trim().split(/\\s+/).join(\" \");\n        debug(\"comparator\", comp, options);\n        this.options = options;\n        this.loose = !!options.loose;\n        this.parse(comp);\n        if (this.semver === ANY) {\n          this.value = \"\";\n        } else {\n          this.value = this.operator + this.semver.version;\n        }\n        debug(\"comp\", this);\n      }\n      parse(comp) {\n        const r = this.options.loose ? re2[t.COMPARATORLOOSE] : re2[t.COMPARATOR];\n        const m = comp.match(r);\n        if (!m) {\n          throw new TypeError(`Invalid comparator: ${comp}`);\n        }\n        this.operator = m[1] !== void 0 ? m[1] : \"\";\n        if (this.operator === \"=\") {\n          this.operator = \"\";\n        }\n        if (!m[2]) {\n          this.semver = ANY;\n        } else {\n          this.semver = new SemVer(m[2], this.options.loose);\n        }\n      }\n      toString() {\n        return this.value;\n      }\n      test(version) {\n        debug(\"Comparator.test\", version, this.options.loose);\n        if (this.semver === ANY || version === ANY) {\n          return true;\n        }\n        if (typeof version === \"string\") {\n          try {\n            version = new SemVer(version, this.options);\n          } catch (er) {\n            return false;\n          }\n        }\n        return cmp(version, this.operator, this.semver, this.options);\n      }\n      intersects(comp, options) {\n        if (!(comp instanceof _Comparator)) {\n          throw new TypeError(\"a Comparator is required\");\n        }\n        if (this.operator === \"\") {\n          if (this.value === \"\") {\n            return true;\n          }\n          return new Range(comp.value, options).test(this.value);\n        } else if (comp.operator === \"\") {\n          if (comp.value === \"\") {\n            return true;\n          }\n          return new Range(this.value, options).test(comp.semver);\n        }\n        options = parseOptions(options);\n        if (options.includePrerelease && (this.value === \"<0.0.0-0\" || comp.value === \"<0.0.0-0\")) {\n          return false;\n        }\n        if (!options.includePrerelease && (this.value.startsWith(\"<0.0.0\") || comp.value.startsWith(\"<0.0.0\"))) {\n          return false;\n        }\n        if (this.operator.startsWith(\">\") && comp.operator.startsWith(\">\")) {\n          return true;\n        }\n        if (this.operator.startsWith(\"<\") && comp.operator.startsWith(\"<\")) {\n          return true;\n        }\n        if (this.semver.version === comp.semver.version && this.operator.includes(\"=\") && comp.operator.includes(\"=\")) {\n          return true;\n        }\n        if (cmp(this.semver, \"<\", comp.semver, options) && this.operator.startsWith(\">\") && comp.operator.startsWith(\"<\")) {\n          return true;\n        }\n        if (cmp(this.semver, \">\", comp.semver, options) && this.operator.startsWith(\"<\") && comp.operator.startsWith(\">\")) {\n          return true;\n        }\n        return false;\n      }\n    };\n    module2.exports = Comparator;\n    var parseOptions = require_parse_options();\n    var { safeRe: re2, t } = require_re();\n    var cmp = require_cmp();\n    var debug = require_debug();\n    var SemVer = require_semver();\n    var Range = require_range();\n  }\n});\n\n// node_modules/semver/functions/satisfies.js\nvar require_satisfies = __commonJS({\n  \"node_modules/semver/functions/satisfies.js\"(exports, module2) {\n    var Range = require_range();\n    var satisfies2 = (version, range, options) => {\n      try {\n        range = new Range(range, options);\n      } catch (er) {\n        return false;\n      }\n      return range.test(version);\n    };\n    module2.exports = satisfies2;\n  }\n});\n\n// node_modules/semver/ranges/to-comparators.js\nvar require_to_comparators = __commonJS({\n  \"node_modules/semver/ranges/to-comparators.js\"(exports, module2) {\n    var Range = require_range();\n    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(\" \").trim().split(\" \"));\n    module2.exports = toComparators;\n  }\n});\n\n// node_modules/semver/ranges/max-satisfying.js\nvar require_max_satisfying = __commonJS({\n  \"node_modules/semver/ranges/max-satisfying.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var Range = require_range();\n    var maxSatisfying = (versions, range, options) => {\n      let max = null;\n      let maxSV = null;\n      let rangeObj = null;\n      try {\n        rangeObj = new Range(range, options);\n      } catch (er) {\n        return null;\n      }\n      versions.forEach((v) => {\n        if (rangeObj.test(v)) {\n          if (!max || maxSV.compare(v) === -1) {\n            max = v;\n            maxSV = new SemVer(max, options);\n          }\n        }\n      });\n      return max;\n    };\n    module2.exports = maxSatisfying;\n  }\n});\n\n// node_modules/semver/ranges/min-satisfying.js\nvar require_min_satisfying = __commonJS({\n  \"node_modules/semver/ranges/min-satisfying.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var Range = require_range();\n    var minSatisfying = (versions, range, options) => {\n      let min = null;\n      let minSV = null;\n      let rangeObj = null;\n      try {\n        rangeObj = new Range(range, options);\n      } catch (er) {\n        return null;\n      }\n      versions.forEach((v) => {\n        if (rangeObj.test(v)) {\n          if (!min || minSV.compare(v) === 1) {\n            min = v;\n            minSV = new SemVer(min, options);\n          }\n        }\n      });\n      return min;\n    };\n    module2.exports = minSatisfying;\n  }\n});\n\n// node_modules/semver/ranges/min-version.js\nvar require_min_version = __commonJS({\n  \"node_modules/semver/ranges/min-version.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var Range = require_range();\n    var gt = require_gt();\n    var minVersion = (range, loose) => {\n      range = new Range(range, loose);\n      let minver = new SemVer(\"0.0.0\");\n      if (range.test(minver)) {\n        return minver;\n      }\n      minver = new SemVer(\"0.0.0-0\");\n      if (range.test(minver)) {\n        return minver;\n      }\n      minver = null;\n      for (let i = 0; i < range.set.length; ++i) {\n        const comparators = range.set[i];\n        let setMin = null;\n        comparators.forEach((comparator) => {\n          const compver = new SemVer(comparator.semver.version);\n          switch (comparator.operator) {\n            case \">\":\n              if (compver.prerelease.length === 0) {\n                compver.patch++;\n              } else {\n                compver.prerelease.push(0);\n              }\n              compver.raw = compver.format();\n            case \"\":\n            case \">=\":\n              if (!setMin || gt(compver, setMin)) {\n                setMin = compver;\n              }\n              break;\n            case \"<\":\n            case \"<=\":\n              break;\n            default:\n              throw new Error(`Unexpected operation: ${comparator.operator}`);\n          }\n        });\n        if (setMin && (!minver || gt(minver, setMin))) {\n          minver = setMin;\n        }\n      }\n      if (minver && range.test(minver)) {\n        return minver;\n      }\n      return null;\n    };\n    module2.exports = minVersion;\n  }\n});\n\n// node_modules/semver/ranges/valid.js\nvar require_valid2 = __commonJS({\n  \"node_modules/semver/ranges/valid.js\"(exports, module2) {\n    var Range = require_range();\n    var validRange = (range, options) => {\n      try {\n        return new Range(range, options).range || \"*\";\n      } catch (er) {\n        return null;\n      }\n    };\n    module2.exports = validRange;\n  }\n});\n\n// node_modules/semver/ranges/outside.js\nvar require_outside = __commonJS({\n  \"node_modules/semver/ranges/outside.js\"(exports, module2) {\n    var SemVer = require_semver();\n    var Comparator = require_comparator();\n    var { ANY } = Comparator;\n    var Range = require_range();\n    var satisfies2 = require_satisfies();\n    var gt = require_gt();\n    var lt = require_lt();\n    var lte = require_lte();\n    var gte = require_gte();\n    var outside = (version, range, hilo, options) => {\n      version = new SemVer(version, options);\n      range = new Range(range, options);\n      let gtfn, ltefn, ltfn, comp, ecomp;\n      switch (hilo) {\n        case \">\":\n          gtfn = gt;\n          ltefn = lte;\n          ltfn = lt;\n          comp = \">\";\n          ecomp = \">=\";\n          break;\n        case \"<\":\n          gtfn = lt;\n          ltefn = gte;\n          ltfn = gt;\n          comp = \"<\";\n          ecomp = \"<=\";\n          break;\n        default:\n          throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n      }\n      if (satisfies2(version, range, options)) {\n        return false;\n      }\n      for (let i = 0; i < range.set.length; ++i) {\n        const comparators = range.set[i];\n        let high = null;\n        let low = null;\n        comparators.forEach((comparator) => {\n          if (comparator.semver === ANY) {\n            comparator = new Comparator(\">=0.0.0\");\n          }\n          high = high || comparator;\n          low = low || comparator;\n          if (gtfn(comparator.semver, high.semver, options)) {\n            high = comparator;\n          } else if (ltfn(comparator.semver, low.semver, options)) {\n            low = comparator;\n          }\n        });\n        if (high.operator === comp || high.operator === ecomp) {\n          return false;\n        }\n        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {\n          return false;\n        } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n          return false;\n        }\n      }\n      return true;\n    };\n    module2.exports = outside;\n  }\n});\n\n// node_modules/semver/ranges/gtr.js\nvar require_gtr = __commonJS({\n  \"node_modules/semver/ranges/gtr.js\"(exports, module2) {\n    var outside = require_outside();\n    var gtr = (version, range, options) => outside(version, range, \">\", options);\n    module2.exports = gtr;\n  }\n});\n\n// node_modules/semver/ranges/ltr.js\nvar require_ltr = __commonJS({\n  \"node_modules/semver/ranges/ltr.js\"(exports, module2) {\n    var outside = require_outside();\n    var ltr = (version, range, options) => outside(version, range, \"<\", options);\n    module2.exports = ltr;\n  }\n});\n\n// node_modules/semver/ranges/intersects.js\nvar require_intersects = __commonJS({\n  \"node_modules/semver/ranges/intersects.js\"(exports, module2) {\n    var Range = require_range();\n    var intersects = (r1, r2, options) => {\n      r1 = new Range(r1, options);\n      r2 = new Range(r2, options);\n      return r1.intersects(r2, options);\n    };\n    module2.exports = intersects;\n  }\n});\n\n// node_modules/semver/ranges/simplify.js\nvar require_simplify = __commonJS({\n  \"node_modules/semver/ranges/simplify.js\"(exports, module2) {\n    var satisfies2 = require_satisfies();\n    var compare = require_compare();\n    module2.exports = (versions, range, options) => {\n      const set = [];\n      let first = null;\n      let prev = null;\n      const v = versions.sort((a, b) => compare(a, b, options));\n      for (const version of v) {\n        const included = satisfies2(version, range, options);\n        if (included) {\n          prev = version;\n          if (!first) {\n            first = version;\n          }\n        } else {\n          if (prev) {\n            set.push([first, prev]);\n          }\n          prev = null;\n          first = null;\n        }\n      }\n      if (first) {\n        set.push([first, null]);\n      }\n      const ranges = [];\n      for (const [min, max] of set) {\n        if (min === max) {\n          ranges.push(min);\n        } else if (!max && min === v[0]) {\n          ranges.push(\"*\");\n        } else if (!max) {\n          ranges.push(`>=${min}`);\n        } else if (min === v[0]) {\n          ranges.push(`<=${max}`);\n        } else {\n          ranges.push(`${min} - ${max}`);\n        }\n      }\n      const simplified = ranges.join(\" || \");\n      const original = typeof range.raw === \"string\" ? range.raw : String(range);\n      return simplified.length < original.length ? simplified : range;\n    };\n  }\n});\n\n// node_modules/semver/ranges/subset.js\nvar require_subset = __commonJS({\n  \"node_modules/semver/ranges/subset.js\"(exports, module2) {\n    var Range = require_range();\n    var Comparator = require_comparator();\n    var { ANY } = Comparator;\n    var satisfies2 = require_satisfies();\n    var compare = require_compare();\n    var subset = (sub, dom, options = {}) => {\n      if (sub === dom) {\n        return true;\n      }\n      sub = new Range(sub, options);\n      dom = new Range(dom, options);\n      let sawNonNull = false;\n      OUTER:\n        for (const simpleSub of sub.set) {\n          for (const simpleDom of dom.set) {\n            const isSub = simpleSubset(simpleSub, simpleDom, options);\n            sawNonNull = sawNonNull || isSub !== null;\n            if (isSub) {\n              continue OUTER;\n            }\n          }\n          if (sawNonNull) {\n            return false;\n          }\n        }\n      return true;\n    };\n    var minimumVersionWithPreRelease = [new Comparator(\">=0.0.0-0\")];\n    var minimumVersion = [new Comparator(\">=0.0.0\")];\n    var simpleSubset = (sub, dom, options) => {\n      if (sub === dom) {\n        return true;\n      }\n      if (sub.length === 1 && sub[0].semver === ANY) {\n        if (dom.length === 1 && dom[0].semver === ANY) {\n          return true;\n        } else if (options.includePrerelease) {\n          sub = minimumVersionWithPreRelease;\n        } else {\n          sub = minimumVersion;\n        }\n      }\n      if (dom.length === 1 && dom[0].semver === ANY) {\n        if (options.includePrerelease) {\n          return true;\n        } else {\n          dom = minimumVersion;\n        }\n      }\n      const eqSet = /* @__PURE__ */ new Set();\n      let gt, lt;\n      for (const c of sub) {\n        if (c.operator === \">\" || c.operator === \">=\") {\n          gt = higherGT(gt, c, options);\n        } else if (c.operator === \"<\" || c.operator === \"<=\") {\n          lt = lowerLT(lt, c, options);\n        } else {\n          eqSet.add(c.semver);\n        }\n      }\n      if (eqSet.size > 1) {\n        return null;\n      }\n      let gtltComp;\n      if (gt && lt) {\n        gtltComp = compare(gt.semver, lt.semver, options);\n        if (gtltComp > 0) {\n          return null;\n        } else if (gtltComp === 0 && (gt.operator !== \">=\" || lt.operator !== \"<=\")) {\n          return null;\n        }\n      }\n      for (const eq of eqSet) {\n        if (gt && !satisfies2(eq, String(gt), options)) {\n          return null;\n        }\n        if (lt && !satisfies2(eq, String(lt), options)) {\n          return null;\n        }\n        for (const c of dom) {\n          if (!satisfies2(eq, String(c), options)) {\n            return false;\n          }\n        }\n        return true;\n      }\n      let higher, lower;\n      let hasDomLT, hasDomGT;\n      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;\n      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;\n      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === \"<\" && needDomLTPre.prerelease[0] === 0) {\n        needDomLTPre = false;\n      }\n      for (const c of dom) {\n        hasDomGT = hasDomGT || c.operator === \">\" || c.operator === \">=\";\n        hasDomLT = hasDomLT || c.operator === \"<\" || c.operator === \"<=\";\n        if (gt) {\n          if (needDomGTPre) {\n            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {\n              needDomGTPre = false;\n            }\n          }\n          if (c.operator === \">\" || c.operator === \">=\") {\n            higher = higherGT(gt, c, options);\n            if (higher === c && higher !== gt) {\n              return false;\n            }\n          } else if (gt.operator === \">=\" && !satisfies2(gt.semver, String(c), options)) {\n            return false;\n          }\n        }\n        if (lt) {\n          if (needDomLTPre) {\n            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {\n              needDomLTPre = false;\n            }\n          }\n          if (c.operator === \"<\" || c.operator === \"<=\") {\n            lower = lowerLT(lt, c, options);\n            if (lower === c && lower !== lt) {\n              return false;\n            }\n          } else if (lt.operator === \"<=\" && !satisfies2(lt.semver, String(c), options)) {\n            return false;\n          }\n        }\n        if (!c.operator && (lt || gt) && gtltComp !== 0) {\n          return false;\n        }\n      }\n      if (gt && hasDomLT && !lt && gtltComp !== 0) {\n        return false;\n      }\n      if (lt && hasDomGT && !gt && gtltComp !== 0) {\n        return false;\n      }\n      if (needDomGTPre || needDomLTPre) {\n        return false;\n      }\n      return true;\n    };\n    var higherGT = (a, b, options) => {\n      if (!a) {\n        return b;\n      }\n      const comp = compare(a.semver, b.semver, options);\n      return comp > 0 ? a : comp < 0 ? b : b.operator === \">\" && a.operator === \">=\" ? b : a;\n    };\n    var lowerLT = (a, b, options) => {\n      if (!a) {\n        return b;\n      }\n      const comp = compare(a.semver, b.semver, options);\n      return comp < 0 ? a : comp > 0 ? b : b.operator === \"<\" && a.operator === \"<=\" ? b : a;\n    };\n    module2.exports = subset;\n  }\n});\n\n// node_modules/semver/index.js\nvar require_semver2 = __commonJS({\n  \"node_modules/semver/index.js\"(exports, module2) {\n    var internalRe = require_re();\n    var constants = require_constants();\n    var SemVer = require_semver();\n    var identifiers = require_identifiers();\n    var parse4 = require_parse();\n    var valid = require_valid();\n    var clean = require_clean();\n    var inc = require_inc();\n    var diff = require_diff();\n    var major2 = require_major();\n    var minor = require_minor();\n    var patch = require_patch();\n    var prerelease = require_prerelease();\n    var compare = require_compare();\n    var rcompare = require_rcompare();\n    var compareLoose = require_compare_loose();\n    var compareBuild = require_compare_build();\n    var sort = require_sort();\n    var rsort = require_rsort();\n    var gt = require_gt();\n    var lt = require_lt();\n    var eq = require_eq();\n    var neq = require_neq();\n    var gte = require_gte();\n    var lte = require_lte();\n    var cmp = require_cmp();\n    var coerce = require_coerce();\n    var Comparator = require_comparator();\n    var Range = require_range();\n    var satisfies2 = require_satisfies();\n    var toComparators = require_to_comparators();\n    var maxSatisfying = require_max_satisfying();\n    var minSatisfying = require_min_satisfying();\n    var minVersion = require_min_version();\n    var validRange = require_valid2();\n    var outside = require_outside();\n    var gtr = require_gtr();\n    var ltr = require_ltr();\n    var intersects = require_intersects();\n    var simplifyRange = require_simplify();\n    var subset = require_subset();\n    module2.exports = {\n      parse: parse4,\n      valid,\n      clean,\n      inc,\n      diff,\n      major: major2,\n      minor,\n      patch,\n      prerelease,\n      compare,\n      rcompare,\n      compareLoose,\n      compareBuild,\n      sort,\n      rsort,\n      gt,\n      lt,\n      eq,\n      neq,\n      gte,\n      lte,\n      cmp,\n      coerce,\n      Comparator,\n      Range,\n      satisfies: satisfies2,\n      toComparators,\n      maxSatisfying,\n      minSatisfying,\n      minVersion,\n      validRange,\n      outside,\n      gtr,\n      ltr,\n      intersects,\n      simplifyRange,\n      subset,\n      SemVer,\n      re: internalRe.re,\n      src: internalRe.src,\n      tokens: internalRe.t,\n      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n      RELEASE_TYPES: constants.RELEASE_TYPES,\n      compareIdentifiers: identifiers.compareIdentifiers,\n      rcompareIdentifiers: identifiers.rcompareIdentifiers\n    };\n  }\n});\n\n// node_modules/@opentelemetry/propagator-jaeger/build/esm/JaegerPropagator.js\nfunction deserializeSpanContext(serializedString) {\n  var headers = decodeURIComponent(serializedString).split(\":\");\n  if (headers.length !== 4) {\n    return null;\n  }\n  var _a2 = __read15(headers, 4), _traceId = _a2[0], _spanId = _a2[1], flags = _a2[3];\n  var traceId = _traceId.padStart(32, \"0\");\n  var spanId = _spanId.padStart(16, \"0\");\n  var traceFlags = VALID_HEX_RE.test(flags) ? parseInt(flags, 16) & 1 : 1;\n  return { traceId, spanId, isRemote: true, traceFlags };\n}\nvar __values10, __read15, UBER_TRACE_ID_HEADER, UBER_BAGGAGE_HEADER_PREFIX, JaegerPropagator, VALID_HEX_RE;\nvar init_JaegerPropagator = __esm({\n  \"node_modules/@opentelemetry/propagator-jaeger/build/esm/JaegerPropagator.js\"() {\n    init_esm();\n    init_esm3();\n    __values10 = function(o) {\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n      if (m)\n        return m.call(o);\n      if (o && typeof o.length === \"number\")\n        return {\n          next: function() {\n            if (o && i >= o.length)\n              o = void 0;\n            return { value: o && o[i++], done: !o };\n          }\n        };\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    };\n    __read15 = function(o, n) {\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n      if (!m)\n        return o;\n      var i = m.call(o), r, ar = [], e;\n      try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n          ar.push(r.value);\n      } catch (error) {\n        e = { error };\n      } finally {\n        try {\n          if (r && !r.done && (m = i[\"return\"]))\n            m.call(i);\n        } finally {\n          if (e)\n            throw e.error;\n        }\n      }\n      return ar;\n    };\n    UBER_TRACE_ID_HEADER = \"uber-trace-id\";\n    UBER_BAGGAGE_HEADER_PREFIX = \"uberctx\";\n    JaegerPropagator = /** @class */\n    function() {\n      function JaegerPropagator2(config) {\n        if (typeof config === \"string\") {\n          this._jaegerTraceHeader = config;\n          this._jaegerBaggageHeaderPrefix = UBER_BAGGAGE_HEADER_PREFIX;\n        } else {\n          this._jaegerTraceHeader = (config === null || config === void 0 ? void 0 : config.customTraceHeader) || UBER_TRACE_ID_HEADER;\n          this._jaegerBaggageHeaderPrefix = (config === null || config === void 0 ? void 0 : config.customBaggageHeaderPrefix) || UBER_BAGGAGE_HEADER_PREFIX;\n        }\n      }\n      JaegerPropagator2.prototype.inject = function(context2, carrier, setter) {\n        var e_1, _a2;\n        var spanContext = trace.getSpanContext(context2);\n        var baggage = propagation.getBaggage(context2);\n        if (spanContext && isTracingSuppressed(context2) === false) {\n          var traceFlags = \"0\" + (spanContext.traceFlags || TraceFlags.NONE).toString(16);\n          setter.set(carrier, this._jaegerTraceHeader, spanContext.traceId + \":\" + spanContext.spanId + \":0:\" + traceFlags);\n        }\n        if (baggage) {\n          try {\n            for (var _b = __values10(baggage.getAllEntries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n              var _d = __read15(_c.value, 2), key = _d[0], entry = _d[1];\n              setter.set(carrier, this._jaegerBaggageHeaderPrefix + \"-\" + key, encodeURIComponent(entry.value));\n            }\n          } catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n          } finally {\n            try {\n              if (_c && !_c.done && (_a2 = _b.return))\n                _a2.call(_b);\n            } finally {\n              if (e_1)\n                throw e_1.error;\n            }\n          }\n        }\n      };\n      JaegerPropagator2.prototype.extract = function(context2, carrier, getter) {\n        var e_2, _a2;\n        var _this = this;\n        var _b;\n        var uberTraceIdHeader = getter.get(carrier, this._jaegerTraceHeader);\n        var uberTraceId = Array.isArray(uberTraceIdHeader) ? uberTraceIdHeader[0] : uberTraceIdHeader;\n        var baggageValues = getter.keys(carrier).filter(function(key) {\n          return key.startsWith(_this._jaegerBaggageHeaderPrefix + \"-\");\n        }).map(function(key) {\n          var value = getter.get(carrier, key);\n          return {\n            key: key.substring(_this._jaegerBaggageHeaderPrefix.length + 1),\n            value: Array.isArray(value) ? value[0] : value\n          };\n        });\n        var newContext = context2;\n        if (typeof uberTraceId === \"string\") {\n          var spanContext = deserializeSpanContext(uberTraceId);\n          if (spanContext) {\n            newContext = trace.setSpanContext(newContext, spanContext);\n          }\n        }\n        if (baggageValues.length === 0)\n          return newContext;\n        var currentBaggage = (_b = propagation.getBaggage(context2)) !== null && _b !== void 0 ? _b : propagation.createBaggage();\n        try {\n          for (var baggageValues_1 = __values10(baggageValues), baggageValues_1_1 = baggageValues_1.next(); !baggageValues_1_1.done; baggageValues_1_1 = baggageValues_1.next()) {\n            var baggageEntry = baggageValues_1_1.value;\n            if (baggageEntry.value === void 0)\n              continue;\n            currentBaggage = currentBaggage.setEntry(baggageEntry.key, {\n              value: decodeURIComponent(baggageEntry.value)\n            });\n          }\n        } catch (e_2_1) {\n          e_2 = { error: e_2_1 };\n        } finally {\n          try {\n            if (baggageValues_1_1 && !baggageValues_1_1.done && (_a2 = baggageValues_1.return))\n              _a2.call(baggageValues_1);\n          } finally {\n            if (e_2)\n              throw e_2.error;\n          }\n        }\n        newContext = propagation.setBaggage(newContext, currentBaggage);\n        return newContext;\n      };\n      JaegerPropagator2.prototype.fields = function() {\n        return [this._jaegerTraceHeader];\n      };\n      return JaegerPropagator2;\n    }();\n    VALID_HEX_RE = /^[0-9a-f]{1,2}$/i;\n  }\n});\n\n// node_modules/@opentelemetry/propagator-jaeger/build/esm/index.js\nvar esm_exports7 = {};\n__export(esm_exports7, {\n  JaegerPropagator: () => JaegerPropagator,\n  UBER_BAGGAGE_HEADER_PREFIX: () => UBER_BAGGAGE_HEADER_PREFIX,\n  UBER_TRACE_ID_HEADER: () => UBER_TRACE_ID_HEADER\n});\nvar init_esm7 = __esm({\n  \"node_modules/@opentelemetry/propagator-jaeger/build/esm/index.js\"() {\n    init_JaegerPropagator();\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-node/build/src/NodeTracerProvider.js\nvar require_NodeTracerProvider = __commonJS({\n  \"node_modules/@opentelemetry/sdk-trace-node/build/src/NodeTracerProvider.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.NodeTracerProvider = void 0;\n    var context_async_hooks_1 = require_src();\n    var propagator_b3_1 = (init_esm4(), __toCommonJS(esm_exports4));\n    var sdk_trace_base_1 = (init_esm6(), __toCommonJS(esm_exports6));\n    var semver = require_semver2();\n    var propagator_jaeger_1 = (init_esm7(), __toCommonJS(esm_exports7));\n    var NodeTracerProvider2 = class extends sdk_trace_base_1.BasicTracerProvider {\n      constructor(config = {}) {\n        super(config);\n      }\n      register(config = {}) {\n        if (config.contextManager === void 0) {\n          const ContextManager = semver.gte(process.version, \"14.8.0\") ? context_async_hooks_1.AsyncLocalStorageContextManager : context_async_hooks_1.AsyncHooksContextManager;\n          config.contextManager = new ContextManager();\n          config.contextManager.enable();\n        }\n        super.register(config);\n      }\n    };\n    exports.NodeTracerProvider = NodeTracerProvider2;\n    NodeTracerProvider2._registeredPropagators = new Map([\n      ...sdk_trace_base_1.BasicTracerProvider._registeredPropagators,\n      [\n        \"b3\",\n        () => new propagator_b3_1.B3Propagator({ injectEncoding: propagator_b3_1.B3InjectEncoding.SINGLE_HEADER })\n      ],\n      [\n        \"b3multi\",\n        () => new propagator_b3_1.B3Propagator({ injectEncoding: propagator_b3_1.B3InjectEncoding.MULTI_HEADER })\n      ],\n      [\"jaeger\", () => new propagator_jaeger_1.JaegerPropagator()]\n    ]);\n  }\n});\n\n// node_modules/@opentelemetry/sdk-trace-node/build/src/index.js\nvar require_src2 = __commonJS({\n  \"node_modules/@opentelemetry/sdk-trace-node/build/src/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      Object.defineProperty(o, k2, { enumerable: true, get: function() {\n        return m[k];\n      } });\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_NodeTracerProvider(), exports);\n    __exportStar((init_esm6(), __toCommonJS(esm_exports6)), exports);\n  }\n});\n\n// node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsEc2Detector.js\nvar require_AwsEc2Detector = __commonJS({\n  \"node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsEc2Detector.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.awsEc2Detector = void 0;\n    var resources_1 = (init_esm5(), __toCommonJS(esm_exports5));\n    var semantic_conventions_1 = (init_esm2(), __toCommonJS(esm_exports2));\n    var http2 = __webpack_require__(/*! http */ \"http\");\n    var AwsEc2Detector = class {\n      constructor() {\n        this.AWS_IDMS_ENDPOINT = \"169.254.169.254\";\n        this.AWS_INSTANCE_TOKEN_DOCUMENT_PATH = \"/latest/api/token\";\n        this.AWS_INSTANCE_IDENTITY_DOCUMENT_PATH = \"/latest/dynamic/instance-identity/document\";\n        this.AWS_INSTANCE_HOST_DOCUMENT_PATH = \"/latest/meta-data/hostname\";\n        this.AWS_METADATA_TTL_HEADER = \"X-aws-ec2-metadata-token-ttl-seconds\";\n        this.AWS_METADATA_TOKEN_HEADER = \"X-aws-ec2-metadata-token\";\n        this.MILLISECOND_TIME_OUT = 5e3;\n      }\n      /**\n       * Attempts to connect and obtain an AWS instance Identity document. If the\n       * connection is successful it returns a promise containing a {@link Resource}\n       * populated with instance metadata. Returns a promise containing an\n       * empty {@link Resource} if the connection or parsing of the identity\n       * document fails.\n       *\n       * @param config (unused) The resource detection config\n       */\n      async detect(_config) {\n        const token = await this._fetchToken();\n        const { accountId, instanceId, instanceType, region, availabilityZone } = await this._fetchIdentity(token);\n        const hostname2 = await this._fetchHost(token);\n        return new resources_1.Resource({\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_PROVIDER]: semantic_conventions_1.CLOUDPROVIDERVALUES_AWS,\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_PLATFORM]: semantic_conventions_1.CLOUDPLATFORMVALUES_AWS_EC2,\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_ACCOUNT_ID]: accountId,\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_REGION]: region,\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_AVAILABILITY_ZONE]: availabilityZone,\n          [semantic_conventions_1.SEMRESATTRS_HOST_ID]: instanceId,\n          [semantic_conventions_1.SEMRESATTRS_HOST_TYPE]: instanceType,\n          [semantic_conventions_1.SEMRESATTRS_HOST_NAME]: hostname2\n        });\n      }\n      async _fetchToken() {\n        const options = {\n          host: this.AWS_IDMS_ENDPOINT,\n          path: this.AWS_INSTANCE_TOKEN_DOCUMENT_PATH,\n          method: \"PUT\",\n          timeout: this.MILLISECOND_TIME_OUT,\n          headers: {\n            [this.AWS_METADATA_TTL_HEADER]: \"60\"\n          }\n        };\n        return await this._fetchString(options);\n      }\n      async _fetchIdentity(token) {\n        const options = {\n          host: this.AWS_IDMS_ENDPOINT,\n          path: this.AWS_INSTANCE_IDENTITY_DOCUMENT_PATH,\n          method: \"GET\",\n          timeout: this.MILLISECOND_TIME_OUT,\n          headers: {\n            [this.AWS_METADATA_TOKEN_HEADER]: token\n          }\n        };\n        const identity2 = await this._fetchString(options);\n        return JSON.parse(identity2);\n      }\n      async _fetchHost(token) {\n        const options = {\n          host: this.AWS_IDMS_ENDPOINT,\n          path: this.AWS_INSTANCE_HOST_DOCUMENT_PATH,\n          method: \"GET\",\n          timeout: this.MILLISECOND_TIME_OUT,\n          headers: {\n            [this.AWS_METADATA_TOKEN_HEADER]: token\n          }\n        };\n        return await this._fetchString(options);\n      }\n      /**\n       * Establishes an HTTP connection to AWS instance document url.\n       * If the application is running on an EC2 instance, we should be able\n       * to get back a valid JSON document. Parses that document and stores\n       * the identity properties in a local map.\n       */\n      async _fetchString(options) {\n        return new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            req.abort();\n            reject(new Error(\"EC2 metadata api request timed out.\"));\n          }, 1e3);\n          const req = http2.request(options, (res) => {\n            clearTimeout(timeoutId);\n            const { statusCode } = res;\n            res.setEncoding(\"utf8\");\n            let rawData = \"\";\n            res.on(\"data\", (chunk) => rawData += chunk);\n            res.on(\"end\", () => {\n              if (statusCode && statusCode >= 200 && statusCode < 300) {\n                try {\n                  resolve(rawData);\n                } catch (e) {\n                  reject(e);\n                }\n              } else {\n                reject(new Error(\"Failed to load page, status code: \" + statusCode));\n              }\n            });\n          });\n          req.on(\"error\", (err) => {\n            clearTimeout(timeoutId);\n            reject(err);\n          });\n          req.end();\n        });\n      }\n    };\n    exports.awsEc2Detector = new AwsEc2Detector();\n  }\n});\n\n// node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsBeanstalkDetector.js\nvar require_AwsBeanstalkDetector = __commonJS({\n  \"node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsBeanstalkDetector.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.awsBeanstalkDetector = exports.AwsBeanstalkDetector = void 0;\n    var api_1 = (init_esm(), __toCommonJS(esm_exports));\n    var resources_1 = (init_esm5(), __toCommonJS(esm_exports5));\n    var semantic_conventions_1 = (init_esm2(), __toCommonJS(esm_exports2));\n    var fs3 = __webpack_require__(/*! fs */ \"fs\");\n    var util2 = __webpack_require__(/*! util */ \"util\");\n    var DEFAULT_BEANSTALK_CONF_PATH = \"/var/elasticbeanstalk/xray/environment.conf\";\n    var WIN_OS_BEANSTALK_CONF_PATH = \"C:\\\\Program Files\\\\Amazon\\\\XRay\\\\environment.conf\";\n    var AwsBeanstalkDetector = class _AwsBeanstalkDetector {\n      constructor() {\n        if (process.platform === \"win32\") {\n          this.BEANSTALK_CONF_PATH = WIN_OS_BEANSTALK_CONF_PATH;\n        } else {\n          this.BEANSTALK_CONF_PATH = DEFAULT_BEANSTALK_CONF_PATH;\n        }\n      }\n      async detect(_config) {\n        try {\n          await _AwsBeanstalkDetector.fileAccessAsync(this.BEANSTALK_CONF_PATH, fs3.constants.R_OK);\n          const rawData = await _AwsBeanstalkDetector.readFileAsync(this.BEANSTALK_CONF_PATH, \"utf8\");\n          const parsedData = JSON.parse(rawData);\n          return new resources_1.Resource({\n            [semantic_conventions_1.SEMRESATTRS_CLOUD_PROVIDER]: semantic_conventions_1.CLOUDPROVIDERVALUES_AWS,\n            [semantic_conventions_1.SEMRESATTRS_CLOUD_PLATFORM]: semantic_conventions_1.CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n            [semantic_conventions_1.SEMRESATTRS_SERVICE_NAME]: semantic_conventions_1.CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n            [semantic_conventions_1.SEMRESATTRS_SERVICE_NAMESPACE]: parsedData.environment_name,\n            [semantic_conventions_1.SEMRESATTRS_SERVICE_VERSION]: parsedData.version_label,\n            [semantic_conventions_1.SEMRESATTRS_SERVICE_INSTANCE_ID]: parsedData.deployment_id\n          });\n        } catch (e) {\n          api_1.diag.debug(`AwsBeanstalkDetector failed: ${e.message}`);\n          return resources_1.Resource.empty();\n        }\n      }\n    };\n    exports.AwsBeanstalkDetector = AwsBeanstalkDetector;\n    AwsBeanstalkDetector.readFileAsync = util2.promisify(fs3.readFile);\n    AwsBeanstalkDetector.fileAccessAsync = util2.promisify(fs3.access);\n    exports.awsBeanstalkDetector = new AwsBeanstalkDetector();\n  }\n});\n\n// node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsEcsDetector.js\nvar require_AwsEcsDetector = __commonJS({\n  \"node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsEcsDetector.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.awsEcsDetector = exports.AwsEcsDetector = void 0;\n    var api_1 = (init_esm(), __toCommonJS(esm_exports));\n    var resources_1 = (init_esm5(), __toCommonJS(esm_exports5));\n    var semantic_conventions_1 = (init_esm2(), __toCommonJS(esm_exports2));\n    var http2 = __webpack_require__(/*! http */ \"http\");\n    var util2 = __webpack_require__(/*! util */ \"util\");\n    var fs3 = __webpack_require__(/*! fs */ \"fs\");\n    var os2 = __webpack_require__(/*! os */ \"os\");\n    var core_1 = (init_esm3(), __toCommonJS(esm_exports3));\n    var HTTP_TIMEOUT_IN_MS = 1e3;\n    var AwsEcsDetector = class _AwsEcsDetector {\n      async detect() {\n        const env3 = (0, core_1.getEnv)();\n        if (!env3.ECS_CONTAINER_METADATA_URI_V4 && !env3.ECS_CONTAINER_METADATA_URI) {\n          api_1.diag.debug(\"AwsEcsDetector failed: Process is not on ECS\");\n          return resources_1.Resource.empty();\n        }\n        let resource = new resources_1.Resource({\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_PROVIDER]: semantic_conventions_1.CLOUDPROVIDERVALUES_AWS,\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_PLATFORM]: semantic_conventions_1.CLOUDPLATFORMVALUES_AWS_ECS\n        }).merge(await _AwsEcsDetector._getContainerIdAndHostnameResource());\n        const metadataUrl = (0, core_1.getEnv)().ECS_CONTAINER_METADATA_URI_V4;\n        if (metadataUrl) {\n          const [containerMetadata, taskMetadata] = await Promise.all([\n            _AwsEcsDetector._getUrlAsJson(metadataUrl),\n            _AwsEcsDetector._getUrlAsJson(`${metadataUrl}/task`)\n          ]);\n          const metadatav4Resource = await _AwsEcsDetector._getMetadataV4Resource(containerMetadata, taskMetadata);\n          const logsResource = await _AwsEcsDetector._getLogResource(containerMetadata);\n          resource = resource.merge(metadatav4Resource).merge(logsResource);\n        }\n        return resource;\n      }\n      /**\n       * Read container ID from cgroup file\n       * In ECS, even if we fail to find target file\n       * or target file does not contain container ID\n       * we do not throw an error but throw warning message\n       * and then return null string\n       */\n      static async _getContainerIdAndHostnameResource() {\n        const hostName = os2.hostname();\n        let containerId = \"\";\n        try {\n          const rawData = await _AwsEcsDetector.readFileAsync(_AwsEcsDetector.DEFAULT_CGROUP_PATH, \"utf8\");\n          const splitData = rawData.trim().split(\"\\n\");\n          for (const str of splitData) {\n            if (str.length > _AwsEcsDetector.CONTAINER_ID_LENGTH) {\n              containerId = str.substring(str.length - _AwsEcsDetector.CONTAINER_ID_LENGTH);\n              break;\n            }\n          }\n        } catch (e) {\n          api_1.diag.warn(\"AwsEcsDetector failed to read container ID\", e);\n        }\n        if (hostName || containerId) {\n          return new resources_1.Resource({\n            [semantic_conventions_1.SEMRESATTRS_CONTAINER_NAME]: hostName || \"\",\n            [semantic_conventions_1.SEMRESATTRS_CONTAINER_ID]: containerId || \"\"\n          });\n        }\n        return resources_1.Resource.empty();\n      }\n      static async _getMetadataV4Resource(containerMetadata, taskMetadata) {\n        const launchType = taskMetadata[\"LaunchType\"];\n        const taskArn = taskMetadata[\"TaskARN\"];\n        const baseArn = taskArn.substring(0, taskArn.lastIndexOf(\":\"));\n        const cluster = taskMetadata[\"Cluster\"];\n        const accountId = _AwsEcsDetector._getAccountFromArn(taskArn);\n        const region = _AwsEcsDetector._getRegionFromArn(taskArn);\n        const availabilityZone = taskMetadata === null || taskMetadata === void 0 ? void 0 : taskMetadata[\"AvailabilityZone\"];\n        const clusterArn = cluster.startsWith(\"arn:\") ? cluster : `${baseArn}:cluster/${cluster}`;\n        const containerArn = containerMetadata[\"ContainerARN\"];\n        const attributes = {\n          [semantic_conventions_1.SEMRESATTRS_AWS_ECS_CONTAINER_ARN]: containerArn,\n          [semantic_conventions_1.SEMRESATTRS_AWS_ECS_CLUSTER_ARN]: clusterArn,\n          [semantic_conventions_1.SEMRESATTRS_AWS_ECS_LAUNCHTYPE]: launchType === null || launchType === void 0 ? void 0 : launchType.toLowerCase(),\n          [semantic_conventions_1.SEMRESATTRS_AWS_ECS_TASK_ARN]: taskArn,\n          [semantic_conventions_1.SEMRESATTRS_AWS_ECS_TASK_FAMILY]: taskMetadata[\"Family\"],\n          [semantic_conventions_1.SEMRESATTRS_AWS_ECS_TASK_REVISION]: taskMetadata[\"Revision\"],\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_ACCOUNT_ID]: accountId,\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_REGION]: region\n        };\n        if (availabilityZone) {\n          attributes[semantic_conventions_1.SEMRESATTRS_CLOUD_AVAILABILITY_ZONE] = availabilityZone;\n        }\n        return new resources_1.Resource(attributes);\n      }\n      static async _getLogResource(containerMetadata) {\n        if (containerMetadata[\"LogDriver\"] !== \"awslogs\" || !containerMetadata[\"LogOptions\"]) {\n          return resources_1.Resource.EMPTY;\n        }\n        const containerArn = containerMetadata[\"ContainerARN\"];\n        const logOptions = containerMetadata[\"LogOptions\"];\n        const logsRegion = logOptions[\"awslogs-region\"] || _AwsEcsDetector._getRegionFromArn(containerArn);\n        const awsAccount = _AwsEcsDetector._getAccountFromArn(containerArn);\n        const logsGroupName = logOptions[\"awslogs-group\"];\n        const logsGroupArn = `arn:aws:logs:${logsRegion}:${awsAccount}:log-group:${logsGroupName}`;\n        const logsStreamName = logOptions[\"awslogs-stream\"];\n        const logsStreamArn = `arn:aws:logs:${logsRegion}:${awsAccount}:log-group:${logsGroupName}:log-stream:${logsStreamName}`;\n        return new resources_1.Resource({\n          [semantic_conventions_1.SEMRESATTRS_AWS_LOG_GROUP_NAMES]: [logsGroupName],\n          [semantic_conventions_1.SEMRESATTRS_AWS_LOG_GROUP_ARNS]: [logsGroupArn],\n          [semantic_conventions_1.SEMRESATTRS_AWS_LOG_STREAM_NAMES]: [logsStreamName],\n          [semantic_conventions_1.SEMRESATTRS_AWS_LOG_STREAM_ARNS]: [logsStreamArn]\n        });\n      }\n      static _getAccountFromArn(containerArn) {\n        const match = /arn:aws:ecs:[^:]+:([^:]+):.*/.exec(containerArn);\n        return match[1];\n      }\n      static _getRegionFromArn(containerArn) {\n        const match = /arn:aws:ecs:([^:]+):.*/.exec(containerArn);\n        return match[1];\n      }\n      static _getUrlAsJson(url4) {\n        return new Promise((resolve, reject) => {\n          const request3 = http2.get(url4, (response) => {\n            if (response.statusCode && response.statusCode >= 400) {\n              reject(new Error(`Request to '${url4}' failed with status ${response.statusCode}`));\n            }\n            let responseBody = \"\";\n            response.on(\"data\", (chunk) => responseBody += chunk.toString());\n            response.on(\"end\", () => resolve(responseBody));\n            request3.on(\"error\", reject);\n          });\n          request3.setTimeout(HTTP_TIMEOUT_IN_MS, () => {\n            request3.destroy();\n          });\n          request3.on(\"error\", reject);\n          request3.end();\n        }).then((responseBodyRaw) => JSON.parse(responseBodyRaw));\n      }\n    };\n    exports.AwsEcsDetector = AwsEcsDetector;\n    AwsEcsDetector.CONTAINER_ID_LENGTH = 64;\n    AwsEcsDetector.DEFAULT_CGROUP_PATH = \"/proc/self/cgroup\";\n    AwsEcsDetector.readFileAsync = util2.promisify(fs3.readFile);\n    exports.awsEcsDetector = new AwsEcsDetector();\n  }\n});\n\n// node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsEksDetector.js\nvar require_AwsEksDetector = __commonJS({\n  \"node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsEksDetector.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.awsEksDetector = exports.AwsEksDetector = void 0;\n    var resources_1 = (init_esm5(), __toCommonJS(esm_exports5));\n    var semantic_conventions_1 = (init_esm2(), __toCommonJS(esm_exports2));\n    var https2 = __webpack_require__(/*! https */ \"https\");\n    var fs3 = __webpack_require__(/*! fs */ \"fs\");\n    var util2 = __webpack_require__(/*! util */ \"util\");\n    var api_1 = (init_esm(), __toCommonJS(esm_exports));\n    var AwsEksDetector = class _AwsEksDetector {\n      constructor() {\n        this.K8S_SVC_URL = \"kubernetes.default.svc\";\n        this.K8S_TOKEN_PATH = \"/var/run/secrets/kubernetes.io/serviceaccount/token\";\n        this.K8S_CERT_PATH = \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\";\n        this.AUTH_CONFIGMAP_PATH = \"/api/v1/namespaces/kube-system/configmaps/aws-auth\";\n        this.CW_CONFIGMAP_PATH = \"/api/v1/namespaces/amazon-cloudwatch/configmaps/cluster-info\";\n        this.CONTAINER_ID_LENGTH = 64;\n        this.DEFAULT_CGROUP_PATH = \"/proc/self/cgroup\";\n        this.TIMEOUT_MS = 2e3;\n        this.UTF8_UNICODE = \"utf8\";\n      }\n      /**\n       * The AwsEksDetector can be used to detect if a process is running on Amazon\n       * Elastic Kubernetes and returns a promise containing a {@link Resource}\n       * populated with instance metadata. Returns a promise containing an\n       * empty {@link Resource} if the connection to kubernetes process\n       * or aws config maps fails\n       * @param config The resource detection config\n       */\n      async detect(_config) {\n        try {\n          await _AwsEksDetector.fileAccessAsync(this.K8S_TOKEN_PATH);\n          const k8scert = await _AwsEksDetector.readFileAsync(this.K8S_CERT_PATH);\n          if (!await this._isEks(k8scert)) {\n            return resources_1.Resource.empty();\n          }\n          const containerId = await this._getContainerId();\n          const clusterName = await this._getClusterName(k8scert);\n          return !containerId && !clusterName ? resources_1.Resource.empty() : new resources_1.Resource({\n            [semantic_conventions_1.SEMRESATTRS_CLOUD_PROVIDER]: semantic_conventions_1.CLOUDPROVIDERVALUES_AWS,\n            [semantic_conventions_1.SEMRESATTRS_CLOUD_PLATFORM]: semantic_conventions_1.CLOUDPLATFORMVALUES_AWS_EKS,\n            [semantic_conventions_1.SEMRESATTRS_K8S_CLUSTER_NAME]: clusterName || \"\",\n            [semantic_conventions_1.SEMRESATTRS_CONTAINER_ID]: containerId || \"\"\n          });\n        } catch (e) {\n          api_1.diag.warn(\"Process is not running on K8S\", e);\n          return resources_1.Resource.empty();\n        }\n      }\n      /**\n       * Attempts to make a connection to AWS Config map which will\n       * determine whether the process is running on an EKS\n       * process if the config map is empty or not\n       */\n      async _isEks(cert) {\n        const options = {\n          ca: cert,\n          headers: {\n            Authorization: await this._getK8sCredHeader()\n          },\n          hostname: this.K8S_SVC_URL,\n          method: \"GET\",\n          path: this.AUTH_CONFIGMAP_PATH,\n          timeout: this.TIMEOUT_MS\n        };\n        return !!await this._fetchString(options);\n      }\n      /**\n       * Attempts to make a connection to Amazon Cloudwatch\n       * Config Maps to grab cluster name\n       */\n      async _getClusterName(cert) {\n        const options = {\n          ca: cert,\n          headers: {\n            Authorization: await this._getK8sCredHeader()\n          },\n          host: this.K8S_SVC_URL,\n          method: \"GET\",\n          path: this.CW_CONFIGMAP_PATH,\n          timeout: this.TIMEOUT_MS\n        };\n        const response = await this._fetchString(options);\n        try {\n          return JSON.parse(response).data[\"cluster.name\"];\n        } catch (e) {\n          api_1.diag.warn(\"Cannot get cluster name on EKS\", e);\n        }\n        return \"\";\n      }\n      /**\n       * Reads the Kubernetes token path and returns kubernetes\n       * credential header\n       */\n      async _getK8sCredHeader() {\n        try {\n          const content = await _AwsEksDetector.readFileAsync(this.K8S_TOKEN_PATH, this.UTF8_UNICODE);\n          return \"Bearer \" + content;\n        } catch (e) {\n          api_1.diag.warn(\"Unable to read Kubernetes client token.\", e);\n        }\n        return \"\";\n      }\n      /**\n       * Read container ID from cgroup file generated from docker which lists the full\n       * untruncated docker container ID at the end of each line.\n       *\n       * The predefined structure of calling /proc/self/cgroup when in a docker container has the structure:\n       *\n       * #:xxxxxx:/\n       *\n       * or\n       *\n       * #:xxxxxx:/docker/64characterID\n       *\n       * This function takes advantage of that fact by just reading the 64-character ID from the end of the\n       * first line. In EKS, even if we fail to find target file or target file does\n       * not contain container ID we do not throw an error but throw warning message\n       * and then return null string\n       */\n      async _getContainerId() {\n        try {\n          const rawData = await _AwsEksDetector.readFileAsync(this.DEFAULT_CGROUP_PATH, this.UTF8_UNICODE);\n          const splitData = rawData.trim().split(\"\\n\");\n          for (const str of splitData) {\n            if (str.length > this.CONTAINER_ID_LENGTH) {\n              return str.substring(str.length - this.CONTAINER_ID_LENGTH);\n            }\n          }\n        } catch (e) {\n          api_1.diag.warn(`AwsEksDetector failed to read container ID: ${e.message}`);\n        }\n        return void 0;\n      }\n      /**\n       * Establishes an HTTP connection to AWS instance document url.\n       * If the application is running on an EKS instance, we should be able\n       * to get back a valid JSON document. Parses that document and stores\n       * the identity properties in a local map.\n       */\n      async _fetchString(options) {\n        return await new Promise((resolve, reject) => {\n          const timeoutId = setTimeout(() => {\n            req.abort();\n            reject(new Error(\"EKS metadata api request timed out.\"));\n          }, 2e3);\n          const req = https2.request(options, (res) => {\n            clearTimeout(timeoutId);\n            const { statusCode } = res;\n            res.setEncoding(this.UTF8_UNICODE);\n            let rawData = \"\";\n            res.on(\"data\", (chunk) => rawData += chunk);\n            res.on(\"end\", () => {\n              if (statusCode && statusCode >= 200 && statusCode < 300) {\n                try {\n                  resolve(rawData);\n                } catch (e) {\n                  reject(e);\n                }\n              } else {\n                reject(new Error(\"Failed to load page, status code: \" + statusCode));\n              }\n            });\n          });\n          req.on(\"error\", (err) => {\n            clearTimeout(timeoutId);\n            reject(err);\n          });\n          req.end();\n        });\n      }\n    };\n    exports.AwsEksDetector = AwsEksDetector;\n    AwsEksDetector.readFileAsync = util2.promisify(fs3.readFile);\n    AwsEksDetector.fileAccessAsync = util2.promisify(fs3.access);\n    exports.awsEksDetector = new AwsEksDetector();\n  }\n});\n\n// node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsLambdaDetector.js\nvar require_AwsLambdaDetector = __commonJS({\n  \"node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/AwsLambdaDetector.js\"(exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.awsLambdaDetector = exports.AwsLambdaDetector = void 0;\n    var resources_1 = (init_esm5(), __toCommonJS(esm_exports5));\n    var semantic_conventions_1 = (init_esm2(), __toCommonJS(esm_exports2));\n    var AwsLambdaDetector = class {\n      async detect(_config) {\n        const functionName = process.env.AWS_LAMBDA_FUNCTION_NAME;\n        if (!functionName) {\n          return resources_1.Resource.empty();\n        }\n        const functionVersion = process.env.AWS_LAMBDA_FUNCTION_VERSION;\n        const region = process.env.AWS_REGION;\n        const attributes = {\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_PROVIDER]: String(semantic_conventions_1.CLOUDPROVIDERVALUES_AWS),\n          [semantic_conventions_1.SEMRESATTRS_CLOUD_PLATFORM]: String(semantic_conventions_1.CLOUDPLATFORMVALUES_AWS_LAMBDA)\n        };\n        if (region) {\n          attributes[semantic_conventions_1.SEMRESATTRS_CLOUD_REGION] = region;\n        }\n        if (functionName) {\n          attributes[semantic_conventions_1.SEMRESATTRS_FAAS_NAME] = functionName;\n        }\n        if (functionVersion) {\n          attributes[semantic_conventions_1.SEMRESATTRS_FAAS_VERSION] = functionVersion;\n        }\n        return new resources_1.Resource(attributes);\n      }\n    };\n    exports.AwsLambdaDetector = AwsLambdaDetector;\n    exports.awsLambdaDetector = new AwsLambdaDetector();\n  }\n});\n\n// node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/index.js\nvar require_detectors = __commonJS({\n  \"node_modules/@opentelemetry/resource-detector-aws/build/src/detectors/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      Object.defineProperty(o, k2, { enumerable: true, get: function() {\n        return m[k];\n      } });\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_AwsEc2Detector(), exports);\n    __exportStar(require_AwsBeanstalkDetector(), exports);\n    __exportStar(require_AwsEcsDetector(), exports);\n    __exportStar(require_AwsEksDetector(), exports);\n    __exportStar(require_AwsLambdaDetector(), exports);\n  }\n});\n\n// node_modules/@opentelemetry/resource-detector-aws/build/src/index.js\nvar require_src3 = __commonJS({\n  \"node_modules/@opentelemetry/resource-detector-aws/build/src/index.js\"(exports) {\n    \"use strict\";\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      Object.defineProperty(o, k2, { enumerable: true, get: function() {\n        return m[k];\n      } });\n    } : function(o, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_detectors(), exports);\n  }\n});\n\n// node_modules/shimmer/index.js\nvar require_shimmer = __commonJS({\n  \"node_modules/shimmer/index.js\"(exports, module2) {\n    \"use strict\";\n    function isFunction2(funktion) {\n      return typeof funktion === \"function\";\n    }\n    var logger = console.error.bind(console);\n    function defineProperty(obj, name, value) {\n      var enumerable = !!obj[name] && obj.propertyIsEnumerable(name);\n      Object.defineProperty(obj, name, {\n        configurable: true,\n        enumerable,\n        writable: true,\n        value\n      });\n    }\n    function shimmer2(options) {\n      if (options && options.logger) {\n        if (!isFunction2(options.logger))\n          logger(\"new logger isn't a function, not replacing\");\n        else\n          logger = options.logger;\n      }\n    }\n    function wrap3(nodule, name, wrapper) {\n      if (!nodule || !nodule[name]) {\n        logger(\"no original function \" + name + \" to wrap\");\n        return;\n      }\n      if (!wrapper) {\n        logger(\"no wrapper function\");\n        logger(new Error().stack);\n        return;\n      }\n      if (!isFunction2(nodule[name]) || !isFunction2(wrapper)) {\n        logger(\"original object and wrapper must be functions\");\n        return;\n      }\n      var original = nodule[name];\n      var wrapped = wrapper(original, name);\n      defineProperty(wrapped, \"__original\", original);\n      defineProperty(wrapped, \"__unwrap\", function() {\n        if (nodule[name] === wrapped)\n          defineProperty(nodule, name, original);\n      });\n      defineProperty(wrapped, \"__wrapped\", true);\n      defineProperty(nodule, name, wrapped);\n      return wrapped;\n    }\n    function massWrap2(nodules, names, wrapper) {\n      if (!nodules) {\n        logger(\"must provide one or more modules to patch\");\n        logger(new Error().stack);\n        return;\n      } else if (!Array.isArray(nodules)) {\n        nodules = [nodules];\n      }\n      if (!(names && Array.isArray(names))) {\n        logger(\"must provide one or more functions to wrap on modules\");\n        return;\n      }\n      nodules.forEach(function(nodule) {\n        names.forEach(function(name) {\n          wrap3(nodule, name, wrapper);\n        });\n      });\n    }\n    function unwrap3(nodule, name) {\n      if (!nodule || !nodule[name]) {\n        logger(\"no function to unwrap.\");\n        logger(new Error().stack);\n        return;\n      }\n      if (!nodule[name].__unwrap) {\n        logger(\"no original to unwrap to -- has \" + name + \" already been unwrapped?\");\n      } else {\n        return nodule[name].__unwrap();\n      }\n    }\n    function massUnwrap2(nodules, names) {\n      if (!nodules) {\n        logger(\"must provide one or more modules to patch\");\n        logger(new Error().stack);\n        return;\n      } else if (!Array.isArray(nodules)) {\n        nodules = [nodules];\n      }\n      if (!(names && Array.isArray(names))) {\n        logger(\"must provide one or more functions to unwrap on modules\");\n        return;\n      }\n      nodules.forEach(function(nodule) {\n        names.forEach(function(name) {\n          unwrap3(nodule, name);\n        });\n      });\n    }\n    shimmer2.wrap = wrap3;\n    shimmer2.massWrap = massWrap2;\n    shimmer2.unwrap = unwrap3;\n    shimmer2.massUnwrap = massUnwrap2;\n    module2.exports = shimmer2;\n  }\n});\n\n// node_modules/resolve/lib/homedir.js\nvar require_homedir = __commonJS({\n  \"node_modules/resolve/lib/homedir.js\"(exports, module2) {\n    \"use strict\";\n    var os2 = __webpack_require__(/*! os */ \"os\");\n    module2.exports = os2.homedir || function homedir() {\n      var home = process.env.HOME;\n      var user = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;\n      if (process.platform === \"win32\") {\n        return process.env.USERPROFILE || process.env.HOMEDRIVE + process.env.HOMEPATH || home || null;\n      }\n      if (process.platform === \"darwin\") {\n        return home || (user ? \"/Users/\" + user : null);\n      }\n      if (process.platform === \"linux\") {\n        return home || (process.getuid() === 0 ? \"/root\" : user ? \"/home/\" + user : null);\n      }\n      return home || null;\n    };\n  }\n});\n\n// node_modules/resolve/lib/caller.js\nvar require_caller = __commonJS({\n  \"node_modules/resolve/lib/caller.js\"(exports, module2) {\n    module2.exports = function() {\n      var origPrepareStackTrace = Error.prepareStackTrace;\n      Error.prepareStackTrace = function(_, stack2) {\n        return stack2;\n      };\n      var stack = new Error().stack;\n      Error.prepareStackTrace = origPrepareStackTrace;\n      return stack[2].getFileName();\n    };\n  }\n});\n\n// node_modules/path-parse/index.js\nvar require_path_parse = __commonJS({\n  \"node_modules/path-parse/index.js\"(exports, module2) {\n    \"use strict\";\n    var isWindows = process.platform === \"win32\";\n    var splitWindowsRe = /^(((?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?[\\\\\\/]?)(?:[^\\\\\\/]*[\\\\\\/])*)((\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))[\\\\\\/]*$/;\n    var win32 = {};\n    function win32SplitPath(filename) {\n      return splitWindowsRe.exec(filename).slice(1);\n    }\n    win32.parse = function(pathString) {\n      if (typeof pathString !== \"string\") {\n        throw new TypeError(\n          \"Parameter 'pathString' must be a string, not \" + typeof pathString\n        );\n      }\n      var allParts = win32SplitPath(pathString);\n      if (!allParts || allParts.length !== 5) {\n        throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n      }\n      return {\n        root: allParts[1],\n        dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),\n        base: allParts[2],\n        ext: allParts[4],\n        name: allParts[3]\n      };\n    };\n    var splitPathRe = /^((\\/?)(?:[^\\/]*\\/)*)((\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))[\\/]*$/;\n    var posix = {};\n    function posixSplitPath(filename) {\n      return splitPathRe.exec(filename).slice(1);\n    }\n    posix.parse = function(pathString) {\n      if (typeof pathString !== \"string\") {\n        throw new TypeError(\n          \"Parameter 'pathString' must be a string, not \" + typeof pathString\n        );\n      }\n      var allParts = posixSplitPath(pathString);\n      if (!allParts || allParts.length !== 5) {\n        throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n      }\n      return {\n        root: allParts[1],\n        dir: allParts[0].slice(0, -1),\n        base: allParts[2],\n        ext: allParts[4],\n        name: allParts[3]\n      };\n    };\n    if (isWindows)\n      module2.exports = win32.parse;\n    else\n      module2.exports = posix.parse;\n    module2.exports.posix = posix.parse;\n    module2.exports.win32 = win32.parse;\n  }\n});\n\n// node_modules/resolve/lib/node-modules-paths.js\nvar require_node_modules_paths = __commonJS({\n  \"node_modules/resolve/lib/node-modules-paths.js\"(exports, module2) {\n    var path3 = __webpack_require__(/*! path */ \"path\");\n    var parse4 = path3.parse || require_path_parse();\n    var getNodeModulesDirs = function getNodeModulesDirs2(absoluteStart, modules) {\n      var prefix = \"/\";\n      if (/^([A-Za-z]:)/.test(absoluteStart)) {\n        prefix = \"\";\n      } else if (/^\\\\\\\\/.test(absoluteStart)) {\n        prefix = \"\\\\\\\\\";\n      }\n      var paths = [absoluteStart];\n      var parsed = parse4(absoluteStart);\n      while (parsed.dir !== paths[paths.length - 1]) {\n        paths.push(parsed.dir);\n        parsed = parse4(parsed.dir);\n      }\n      return paths.reduce(function(dirs, aPath) {\n        return dirs.concat(modules.map(function(moduleDir) {\n          return path3.resolve(prefix, aPath, moduleDir);\n        }));\n      }, []);\n    };\n    module2.exports = function nodeModulesPaths(start, opts, request3) {\n      var modules = opts && opts.moduleDirectory ? [].concat(opts.moduleDirectory) : [\"node_modules\"];\n      if (opts && typeof opts.paths === \"function\") {\n        return opts.paths(\n          request3,\n          start,\n          function() {\n            return getNodeModulesDirs(start, modules);\n          },\n          opts\n        );\n      }\n      var dirs = getNodeModulesDirs(start, modules);\n      return opts && opts.paths ? dirs.concat(opts.paths) : dirs;\n    };\n  }\n});\n\n// node_modules/resolve/lib/normalize-options.js\nvar require_normalize_options = __commonJS({\n  \"node_modules/resolve/lib/normalize-options.js\"(exports, module2) {\n    module2.exports = function(x, opts) {\n      return opts || {};\n    };\n  }\n});\n\n// node_modules/has/src/index.js\nvar require_src4 = __commonJS({\n  \"node_modules/has/src/index.js\"(exports, module2) {\n    \"use strict\";\n    var hasOwnProperty2 = {}.hasOwnProperty;\n    var call = Function.prototype.call;\n    module2.exports = call.bind ? call.bind(hasOwnProperty2) : function(O, P) {\n      return call.call(hasOwnProperty2, O, P);\n    };\n  }\n});\n\n// node_modules/is-core-module/core.json\nvar require_core = __commonJS({\n  \"node_modules/is-core-module/core.json\"(exports, module2) {\n    module2.exports = {\n      assert: true,\n      \"node:assert\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"assert/strict\": \">= 15\",\n      \"node:assert/strict\": \">= 16\",\n      async_hooks: \">= 8\",\n      \"node:async_hooks\": [\">= 14.18 && < 15\", \">= 16\"],\n      buffer_ieee754: \">= 0.5 && < 0.9.7\",\n      buffer: true,\n      \"node:buffer\": [\">= 14.18 && < 15\", \">= 16\"],\n      child_process: true,\n      \"node:child_process\": [\">= 14.18 && < 15\", \">= 16\"],\n      cluster: \">= 0.5\",\n      \"node:cluster\": [\">= 14.18 && < 15\", \">= 16\"],\n      console: true,\n      \"node:console\": [\">= 14.18 && < 15\", \">= 16\"],\n      constants: true,\n      \"node:constants\": [\">= 14.18 && < 15\", \">= 16\"],\n      crypto: true,\n      \"node:crypto\": [\">= 14.18 && < 15\", \">= 16\"],\n      _debug_agent: \">= 1 && < 8\",\n      _debugger: \"< 8\",\n      dgram: true,\n      \"node:dgram\": [\">= 14.18 && < 15\", \">= 16\"],\n      diagnostics_channel: [\">= 14.17 && < 15\", \">= 15.1\"],\n      \"node:diagnostics_channel\": [\">= 14.18 && < 15\", \">= 16\"],\n      dns: true,\n      \"node:dns\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"dns/promises\": \">= 15\",\n      \"node:dns/promises\": \">= 16\",\n      domain: \">= 0.7.12\",\n      \"node:domain\": [\">= 14.18 && < 15\", \">= 16\"],\n      events: true,\n      \"node:events\": [\">= 14.18 && < 15\", \">= 16\"],\n      freelist: \"< 6\",\n      fs: true,\n      \"node:fs\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"fs/promises\": [\">= 10 && < 10.1\", \">= 14\"],\n      \"node:fs/promises\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_agent: \">= 0.11.1\",\n      \"node:_http_agent\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_client: \">= 0.11.1\",\n      \"node:_http_client\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_common: \">= 0.11.1\",\n      \"node:_http_common\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_incoming: \">= 0.11.1\",\n      \"node:_http_incoming\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_outgoing: \">= 0.11.1\",\n      \"node:_http_outgoing\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_server: \">= 0.11.1\",\n      \"node:_http_server\": [\">= 14.18 && < 15\", \">= 16\"],\n      http: true,\n      \"node:http\": [\">= 14.18 && < 15\", \">= 16\"],\n      http2: \">= 8.8\",\n      \"node:http2\": [\">= 14.18 && < 15\", \">= 16\"],\n      https: true,\n      \"node:https\": [\">= 14.18 && < 15\", \">= 16\"],\n      inspector: \">= 8\",\n      \"node:inspector\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"inspector/promises\": [\">= 19\"],\n      \"node:inspector/promises\": [\">= 19\"],\n      _linklist: \"< 8\",\n      module: true,\n      \"node:module\": [\">= 14.18 && < 15\", \">= 16\"],\n      net: true,\n      \"node:net\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"node-inspect/lib/_inspect\": \">= 7.6 && < 12\",\n      \"node-inspect/lib/internal/inspect_client\": \">= 7.6 && < 12\",\n      \"node-inspect/lib/internal/inspect_repl\": \">= 7.6 && < 12\",\n      os: true,\n      \"node:os\": [\">= 14.18 && < 15\", \">= 16\"],\n      path: true,\n      \"node:path\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"path/posix\": \">= 15.3\",\n      \"node:path/posix\": \">= 16\",\n      \"path/win32\": \">= 15.3\",\n      \"node:path/win32\": \">= 16\",\n      perf_hooks: \">= 8.5\",\n      \"node:perf_hooks\": [\">= 14.18 && < 15\", \">= 16\"],\n      process: \">= 1\",\n      \"node:process\": [\">= 14.18 && < 15\", \">= 16\"],\n      punycode: \">= 0.5\",\n      \"node:punycode\": [\">= 14.18 && < 15\", \">= 16\"],\n      querystring: true,\n      \"node:querystring\": [\">= 14.18 && < 15\", \">= 16\"],\n      readline: true,\n      \"node:readline\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"readline/promises\": \">= 17\",\n      \"node:readline/promises\": \">= 17\",\n      repl: true,\n      \"node:repl\": [\">= 14.18 && < 15\", \">= 16\"],\n      smalloc: \">= 0.11.5 && < 3\",\n      _stream_duplex: \">= 0.9.4\",\n      \"node:_stream_duplex\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_transform: \">= 0.9.4\",\n      \"node:_stream_transform\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_wrap: \">= 1.4.1\",\n      \"node:_stream_wrap\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_passthrough: \">= 0.9.4\",\n      \"node:_stream_passthrough\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_readable: \">= 0.9.4\",\n      \"node:_stream_readable\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_writable: \">= 0.9.4\",\n      \"node:_stream_writable\": [\">= 14.18 && < 15\", \">= 16\"],\n      stream: true,\n      \"node:stream\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"stream/consumers\": \">= 16.7\",\n      \"node:stream/consumers\": \">= 16.7\",\n      \"stream/promises\": \">= 15\",\n      \"node:stream/promises\": \">= 16\",\n      \"stream/web\": \">= 16.5\",\n      \"node:stream/web\": \">= 16.5\",\n      string_decoder: true,\n      \"node:string_decoder\": [\">= 14.18 && < 15\", \">= 16\"],\n      sys: [\">= 0.4 && < 0.7\", \">= 0.8\"],\n      \"node:sys\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"test/reporters\": \">= 19.9 && < 20.2\",\n      \"node:test/reporters\": [\">= 18.17 && < 19\", \">= 19.9\", \">= 20\"],\n      \"node:test\": [\">= 16.17 && < 17\", \">= 18\"],\n      timers: true,\n      \"node:timers\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"timers/promises\": \">= 15\",\n      \"node:timers/promises\": \">= 16\",\n      _tls_common: \">= 0.11.13\",\n      \"node:_tls_common\": [\">= 14.18 && < 15\", \">= 16\"],\n      _tls_legacy: \">= 0.11.3 && < 10\",\n      _tls_wrap: \">= 0.11.3\",\n      \"node:_tls_wrap\": [\">= 14.18 && < 15\", \">= 16\"],\n      tls: true,\n      \"node:tls\": [\">= 14.18 && < 15\", \">= 16\"],\n      trace_events: \">= 10\",\n      \"node:trace_events\": [\">= 14.18 && < 15\", \">= 16\"],\n      tty: true,\n      \"node:tty\": [\">= 14.18 && < 15\", \">= 16\"],\n      url: true,\n      \"node:url\": [\">= 14.18 && < 15\", \">= 16\"],\n      util: true,\n      \"node:util\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"util/types\": \">= 15.3\",\n      \"node:util/types\": \">= 16\",\n      \"v8/tools/arguments\": \">= 10 && < 12\",\n      \"v8/tools/codemap\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/consarray\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/csvparser\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/logreader\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/profile_view\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/splaytree\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      v8: \">= 1\",\n      \"node:v8\": [\">= 14.18 && < 15\", \">= 16\"],\n      vm: true,\n      \"node:vm\": [\">= 14.18 && < 15\", \">= 16\"],\n      wasi: [\">= 13.4 && < 13.5\", \">= 18.17 && < 19\", \">= 20\"],\n      \"node:wasi\": [\">= 18.17 && < 19\", \">= 20\"],\n      worker_threads: \">= 11.7\",\n      \"node:worker_threads\": [\">= 14.18 && < 15\", \">= 16\"],\n      zlib: \">= 0.5\",\n      \"node:zlib\": [\">= 14.18 && < 15\", \">= 16\"]\n    };\n  }\n});\n\n// node_modules/is-core-module/index.js\nvar require_is_core_module = __commonJS({\n  \"node_modules/is-core-module/index.js\"(exports, module2) {\n    \"use strict\";\n    var has = require_src4();\n    function specifierIncluded(current, specifier) {\n      var nodeParts = current.split(\".\");\n      var parts = specifier.split(\" \");\n      var op = parts.length > 1 ? parts[0] : \"=\";\n      var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split(\".\");\n      for (var i = 0; i < 3; ++i) {\n        var cur = parseInt(nodeParts[i] || 0, 10);\n        var ver = parseInt(versionParts[i] || 0, 10);\n        if (cur === ver) {\n          continue;\n        }\n        if (op === \"<\") {\n          return cur < ver;\n        }\n        if (op === \">=\") {\n          return cur >= ver;\n        }\n        return false;\n      }\n      return op === \">=\";\n    }\n    function matchesRange(current, range) {\n      var specifiers = range.split(/ ?&& ?/);\n      if (specifiers.length === 0) {\n        return false;\n      }\n      for (var i = 0; i < specifiers.length; ++i) {\n        if (!specifierIncluded(current, specifiers[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    function versionIncluded(nodeVersion, specifierValue) {\n      if (typeof specifierValue === \"boolean\") {\n        return specifierValue;\n      }\n      var current = typeof nodeVersion === \"undefined\" ? process.versions && process.versions.node : nodeVersion;\n      if (typeof current !== \"string\") {\n        throw new TypeError(typeof nodeVersion === \"undefined\" ? \"Unable to determine current node version\" : \"If provided, a valid node version is required\");\n      }\n      if (specifierValue && typeof specifierValue === \"object\") {\n        for (var i = 0; i < specifierValue.length; ++i) {\n          if (matchesRange(current, specifierValue[i])) {\n            return true;\n          }\n        }\n        return false;\n      }\n      return matchesRange(current, specifierValue);\n    }\n    var data = require_core();\n    module2.exports = function isCore(x, nodeVersion) {\n      return has(data, x) && versionIncluded(nodeVersion, data[x]);\n    };\n  }\n});\n\n// node_modules/resolve/lib/async.js\nvar require_async = __commonJS({\n  \"node_modules/resolve/lib/async.js\"(exports, module2) {\n    var fs3 = __webpack_require__(/*! fs */ \"fs\");\n    var getHomedir = require_homedir();\n    var path3 = __webpack_require__(/*! path */ \"path\");\n    var caller = require_caller();\n    var nodeModulesPaths = require_node_modules_paths();\n    var normalizeOptions = require_normalize_options();\n    var isCore = require_is_core_module();\n    var realpathFS = process.platform !== \"win32\" && fs3.realpath && typeof fs3.realpath.native === \"function\" ? fs3.realpath.native : fs3.realpath;\n    var homedir = getHomedir();\n    var defaultPaths = function() {\n      return [\n        path3.join(homedir, \".node_modules\"),\n        path3.join(homedir, \".node_libraries\")\n      ];\n    };\n    var defaultIsFile = function isFile(file, cb) {\n      fs3.stat(file, function(err, stat) {\n        if (!err) {\n          return cb(null, stat.isFile() || stat.isFIFO());\n        }\n        if (err.code === \"ENOENT\" || err.code === \"ENOTDIR\")\n          return cb(null, false);\n        return cb(err);\n      });\n    };\n    var defaultIsDir = function isDirectory(dir, cb) {\n      fs3.stat(dir, function(err, stat) {\n        if (!err) {\n          return cb(null, stat.isDirectory());\n        }\n        if (err.code === \"ENOENT\" || err.code === \"ENOTDIR\")\n          return cb(null, false);\n        return cb(err);\n      });\n    };\n    var defaultRealpath = function realpath(x, cb) {\n      realpathFS(x, function(realpathErr, realPath) {\n        if (realpathErr && realpathErr.code !== \"ENOENT\")\n          cb(realpathErr);\n        else\n          cb(null, realpathErr ? x : realPath);\n      });\n    };\n    var maybeRealpath = function maybeRealpath2(realpath, x, opts, cb) {\n      if (opts && opts.preserveSymlinks === false) {\n        realpath(x, cb);\n      } else {\n        cb(null, x);\n      }\n    };\n    var defaultReadPackage = function defaultReadPackage2(readFile, pkgfile, cb) {\n      readFile(pkgfile, function(readFileErr, body) {\n        if (readFileErr)\n          cb(readFileErr);\n        else {\n          try {\n            var pkg = JSON.parse(body);\n            cb(null, pkg);\n          } catch (jsonErr) {\n            cb(null);\n          }\n        }\n      });\n    };\n    var getPackageCandidates = function getPackageCandidates2(x, start, opts) {\n      var dirs = nodeModulesPaths(start, opts, x);\n      for (var i = 0; i < dirs.length; i++) {\n        dirs[i] = path3.join(dirs[i], x);\n      }\n      return dirs;\n    };\n    module2.exports = function resolve(x, options, callback) {\n      var cb = callback;\n      var opts = options;\n      if (typeof options === \"function\") {\n        cb = opts;\n        opts = {};\n      }\n      if (typeof x !== \"string\") {\n        var err = new TypeError(\"Path must be a string.\");\n        return process.nextTick(function() {\n          cb(err);\n        });\n      }\n      opts = normalizeOptions(x, opts);\n      var isFile = opts.isFile || defaultIsFile;\n      var isDirectory = opts.isDirectory || defaultIsDir;\n      var readFile = opts.readFile || fs3.readFile;\n      var realpath = opts.realpath || defaultRealpath;\n      var readPackage = opts.readPackage || defaultReadPackage;\n      if (opts.readFile && opts.readPackage) {\n        var conflictErr = new TypeError(\"`readFile` and `readPackage` are mutually exclusive.\");\n        return process.nextTick(function() {\n          cb(conflictErr);\n        });\n      }\n      var packageIterator = opts.packageIterator;\n      var extensions = opts.extensions || [\".js\"];\n      var includeCoreModules = opts.includeCoreModules !== false;\n      var basedir = opts.basedir || path3.dirname(caller());\n      var parent = opts.filename || basedir;\n      opts.paths = opts.paths || defaultPaths();\n      var absoluteStart = path3.resolve(basedir);\n      maybeRealpath(\n        realpath,\n        absoluteStart,\n        opts,\n        function(err2, realStart) {\n          if (err2)\n            cb(err2);\n          else\n            init(realStart);\n        }\n      );\n      var res;\n      function init(basedir2) {\n        if (/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[/\\\\])/.test(x)) {\n          res = path3.resolve(basedir2, x);\n          if (x === \".\" || x === \"..\" || x.slice(-1) === \"/\")\n            res += \"/\";\n          if (/\\/$/.test(x) && res === basedir2) {\n            loadAsDirectory(res, opts.package, onfile);\n          } else\n            loadAsFile(res, opts.package, onfile);\n        } else if (includeCoreModules && isCore(x)) {\n          return cb(null, x);\n        } else\n          loadNodeModules(x, basedir2, function(err2, n, pkg) {\n            if (err2)\n              cb(err2);\n            else if (n) {\n              return maybeRealpath(realpath, n, opts, function(err3, realN) {\n                if (err3) {\n                  cb(err3);\n                } else {\n                  cb(null, realN, pkg);\n                }\n              });\n            } else {\n              var moduleError = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n              moduleError.code = \"MODULE_NOT_FOUND\";\n              cb(moduleError);\n            }\n          });\n      }\n      function onfile(err2, m, pkg) {\n        if (err2)\n          cb(err2);\n        else if (m)\n          cb(null, m, pkg);\n        else\n          loadAsDirectory(res, function(err3, d, pkg2) {\n            if (err3)\n              cb(err3);\n            else if (d) {\n              maybeRealpath(realpath, d, opts, function(err4, realD) {\n                if (err4) {\n                  cb(err4);\n                } else {\n                  cb(null, realD, pkg2);\n                }\n              });\n            } else {\n              var moduleError = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n              moduleError.code = \"MODULE_NOT_FOUND\";\n              cb(moduleError);\n            }\n          });\n      }\n      function loadAsFile(x2, thePackage, callback2) {\n        var loadAsFilePackage = thePackage;\n        var cb2 = callback2;\n        if (typeof loadAsFilePackage === \"function\") {\n          cb2 = loadAsFilePackage;\n          loadAsFilePackage = void 0;\n        }\n        var exts = [\"\"].concat(extensions);\n        load(exts, x2, loadAsFilePackage);\n        function load(exts2, x3, loadPackage) {\n          if (exts2.length === 0)\n            return cb2(null, void 0, loadPackage);\n          var file = x3 + exts2[0];\n          var pkg = loadPackage;\n          if (pkg)\n            onpkg(null, pkg);\n          else\n            loadpkg(path3.dirname(file), onpkg);\n          function onpkg(err2, pkg_, dir) {\n            pkg = pkg_;\n            if (err2)\n              return cb2(err2);\n            if (dir && pkg && opts.pathFilter) {\n              var rfile = path3.relative(dir, file);\n              var rel = rfile.slice(0, rfile.length - exts2[0].length);\n              var r = opts.pathFilter(pkg, x3, rel);\n              if (r)\n                return load(\n                  [\"\"].concat(extensions.slice()),\n                  path3.resolve(dir, r),\n                  pkg\n                );\n            }\n            isFile(file, onex);\n          }\n          function onex(err2, ex) {\n            if (err2)\n              return cb2(err2);\n            if (ex)\n              return cb2(null, file, pkg);\n            load(exts2.slice(1), x3, pkg);\n          }\n        }\n      }\n      function loadpkg(dir, cb2) {\n        if (dir === \"\" || dir === \"/\")\n          return cb2(null);\n        if (process.platform === \"win32\" && /^\\w:[/\\\\]*$/.test(dir)) {\n          return cb2(null);\n        }\n        if (/[/\\\\]node_modules[/\\\\]*$/.test(dir))\n          return cb2(null);\n        maybeRealpath(realpath, dir, opts, function(unwrapErr, pkgdir) {\n          if (unwrapErr)\n            return loadpkg(path3.dirname(dir), cb2);\n          var pkgfile = path3.join(pkgdir, \"package.json\");\n          isFile(pkgfile, function(err2, ex) {\n            if (!ex)\n              return loadpkg(path3.dirname(dir), cb2);\n            readPackage(readFile, pkgfile, function(err3, pkgParam) {\n              if (err3)\n                cb2(err3);\n              var pkg = pkgParam;\n              if (pkg && opts.packageFilter) {\n                pkg = opts.packageFilter(pkg, pkgfile);\n              }\n              cb2(null, pkg, dir);\n            });\n          });\n        });\n      }\n      function loadAsDirectory(x2, loadAsDirectoryPackage, callback2) {\n        var cb2 = callback2;\n        var fpkg = loadAsDirectoryPackage;\n        if (typeof fpkg === \"function\") {\n          cb2 = fpkg;\n          fpkg = opts.package;\n        }\n        maybeRealpath(realpath, x2, opts, function(unwrapErr, pkgdir) {\n          if (unwrapErr)\n            return cb2(unwrapErr);\n          var pkgfile = path3.join(pkgdir, \"package.json\");\n          isFile(pkgfile, function(err2, ex) {\n            if (err2)\n              return cb2(err2);\n            if (!ex)\n              return loadAsFile(path3.join(x2, \"index\"), fpkg, cb2);\n            readPackage(readFile, pkgfile, function(err3, pkgParam) {\n              if (err3)\n                return cb2(err3);\n              var pkg = pkgParam;\n              if (pkg && opts.packageFilter) {\n                pkg = opts.packageFilter(pkg, pkgfile);\n              }\n              if (pkg && pkg.main) {\n                if (typeof pkg.main !== \"string\") {\n                  var mainError = new TypeError(\"package \\u201C\" + pkg.name + \"\\u201D `main` must be a string\");\n                  mainError.code = \"INVALID_PACKAGE_MAIN\";\n                  return cb2(mainError);\n                }\n                if (pkg.main === \".\" || pkg.main === \"./\") {\n                  pkg.main = \"index\";\n                }\n                loadAsFile(path3.resolve(x2, pkg.main), pkg, function(err4, m, pkg2) {\n                  if (err4)\n                    return cb2(err4);\n                  if (m)\n                    return cb2(null, m, pkg2);\n                  if (!pkg2)\n                    return loadAsFile(path3.join(x2, \"index\"), pkg2, cb2);\n                  var dir = path3.resolve(x2, pkg2.main);\n                  loadAsDirectory(dir, pkg2, function(err5, n, pkg3) {\n                    if (err5)\n                      return cb2(err5);\n                    if (n)\n                      return cb2(null, n, pkg3);\n                    loadAsFile(path3.join(x2, \"index\"), pkg3, cb2);\n                  });\n                });\n                return;\n              }\n              loadAsFile(path3.join(x2, \"/index\"), pkg, cb2);\n            });\n          });\n        });\n      }\n      function processDirs(cb2, dirs) {\n        if (dirs.length === 0)\n          return cb2(null, void 0);\n        var dir = dirs[0];\n        isDirectory(path3.dirname(dir), isdir);\n        function isdir(err2, isdir2) {\n          if (err2)\n            return cb2(err2);\n          if (!isdir2)\n            return processDirs(cb2, dirs.slice(1));\n          loadAsFile(dir, opts.package, onfile2);\n        }\n        function onfile2(err2, m, pkg) {\n          if (err2)\n            return cb2(err2);\n          if (m)\n            return cb2(null, m, pkg);\n          loadAsDirectory(dir, opts.package, ondir);\n        }\n        function ondir(err2, n, pkg) {\n          if (err2)\n            return cb2(err2);\n          if (n)\n            return cb2(null, n, pkg);\n          processDirs(cb2, dirs.slice(1));\n        }\n      }\n      function loadNodeModules(x2, start, cb2) {\n        var thunk = function() {\n          return getPackageCandidates(x2, start, opts);\n        };\n        processDirs(\n          cb2,\n          packageIterator ? packageIterator(x2, start, thunk, opts) : thunk()\n        );\n      }\n    };\n  }\n});\n\n// node_modules/resolve/lib/core.json\nvar require_core2 = __commonJS({\n  \"node_modules/resolve/lib/core.json\"(exports, module2) {\n    module2.exports = {\n      assert: true,\n      \"node:assert\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"assert/strict\": \">= 15\",\n      \"node:assert/strict\": \">= 16\",\n      async_hooks: \">= 8\",\n      \"node:async_hooks\": [\">= 14.18 && < 15\", \">= 16\"],\n      buffer_ieee754: \">= 0.5 && < 0.9.7\",\n      buffer: true,\n      \"node:buffer\": [\">= 14.18 && < 15\", \">= 16\"],\n      child_process: true,\n      \"node:child_process\": [\">= 14.18 && < 15\", \">= 16\"],\n      cluster: \">= 0.5\",\n      \"node:cluster\": [\">= 14.18 && < 15\", \">= 16\"],\n      console: true,\n      \"node:console\": [\">= 14.18 && < 15\", \">= 16\"],\n      constants: true,\n      \"node:constants\": [\">= 14.18 && < 15\", \">= 16\"],\n      crypto: true,\n      \"node:crypto\": [\">= 14.18 && < 15\", \">= 16\"],\n      _debug_agent: \">= 1 && < 8\",\n      _debugger: \"< 8\",\n      dgram: true,\n      \"node:dgram\": [\">= 14.18 && < 15\", \">= 16\"],\n      diagnostics_channel: [\">= 14.17 && < 15\", \">= 15.1\"],\n      \"node:diagnostics_channel\": [\">= 14.18 && < 15\", \">= 16\"],\n      dns: true,\n      \"node:dns\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"dns/promises\": \">= 15\",\n      \"node:dns/promises\": \">= 16\",\n      domain: \">= 0.7.12\",\n      \"node:domain\": [\">= 14.18 && < 15\", \">= 16\"],\n      events: true,\n      \"node:events\": [\">= 14.18 && < 15\", \">= 16\"],\n      freelist: \"< 6\",\n      fs: true,\n      \"node:fs\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"fs/promises\": [\">= 10 && < 10.1\", \">= 14\"],\n      \"node:fs/promises\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_agent: \">= 0.11.1\",\n      \"node:_http_agent\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_client: \">= 0.11.1\",\n      \"node:_http_client\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_common: \">= 0.11.1\",\n      \"node:_http_common\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_incoming: \">= 0.11.1\",\n      \"node:_http_incoming\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_outgoing: \">= 0.11.1\",\n      \"node:_http_outgoing\": [\">= 14.18 && < 15\", \">= 16\"],\n      _http_server: \">= 0.11.1\",\n      \"node:_http_server\": [\">= 14.18 && < 15\", \">= 16\"],\n      http: true,\n      \"node:http\": [\">= 14.18 && < 15\", \">= 16\"],\n      http2: \">= 8.8\",\n      \"node:http2\": [\">= 14.18 && < 15\", \">= 16\"],\n      https: true,\n      \"node:https\": [\">= 14.18 && < 15\", \">= 16\"],\n      inspector: \">= 8\",\n      \"node:inspector\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"inspector/promises\": [\">= 19\"],\n      \"node:inspector/promises\": [\">= 19\"],\n      _linklist: \"< 8\",\n      module: true,\n      \"node:module\": [\">= 14.18 && < 15\", \">= 16\"],\n      net: true,\n      \"node:net\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"node-inspect/lib/_inspect\": \">= 7.6 && < 12\",\n      \"node-inspect/lib/internal/inspect_client\": \">= 7.6 && < 12\",\n      \"node-inspect/lib/internal/inspect_repl\": \">= 7.6 && < 12\",\n      os: true,\n      \"node:os\": [\">= 14.18 && < 15\", \">= 16\"],\n      path: true,\n      \"node:path\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"path/posix\": \">= 15.3\",\n      \"node:path/posix\": \">= 16\",\n      \"path/win32\": \">= 15.3\",\n      \"node:path/win32\": \">= 16\",\n      perf_hooks: \">= 8.5\",\n      \"node:perf_hooks\": [\">= 14.18 && < 15\", \">= 16\"],\n      process: \">= 1\",\n      \"node:process\": [\">= 14.18 && < 15\", \">= 16\"],\n      punycode: \">= 0.5\",\n      \"node:punycode\": [\">= 14.18 && < 15\", \">= 16\"],\n      querystring: true,\n      \"node:querystring\": [\">= 14.18 && < 15\", \">= 16\"],\n      readline: true,\n      \"node:readline\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"readline/promises\": \">= 17\",\n      \"node:readline/promises\": \">= 17\",\n      repl: true,\n      \"node:repl\": [\">= 14.18 && < 15\", \">= 16\"],\n      smalloc: \">= 0.11.5 && < 3\",\n      _stream_duplex: \">= 0.9.4\",\n      \"node:_stream_duplex\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_transform: \">= 0.9.4\",\n      \"node:_stream_transform\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_wrap: \">= 1.4.1\",\n      \"node:_stream_wrap\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_passthrough: \">= 0.9.4\",\n      \"node:_stream_passthrough\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_readable: \">= 0.9.4\",\n      \"node:_stream_readable\": [\">= 14.18 && < 15\", \">= 16\"],\n      _stream_writable: \">= 0.9.4\",\n      \"node:_stream_writable\": [\">= 14.18 && < 15\", \">= 16\"],\n      stream: true,\n      \"node:stream\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"stream/consumers\": \">= 16.7\",\n      \"node:stream/consumers\": \">= 16.7\",\n      \"stream/promises\": \">= 15\",\n      \"node:stream/promises\": \">= 16\",\n      \"stream/web\": \">= 16.5\",\n      \"node:stream/web\": \">= 16.5\",\n      string_decoder: true,\n      \"node:string_decoder\": [\">= 14.18 && < 15\", \">= 16\"],\n      sys: [\">= 0.4 && < 0.7\", \">= 0.8\"],\n      \"node:sys\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"test/reporters\": \">= 19.9 && < 20.2\",\n      \"node:test/reporters\": [\">= 18.17 && < 19\", \">= 19.9\", \">= 20\"],\n      \"node:test\": [\">= 16.17 && < 17\", \">= 18\"],\n      timers: true,\n      \"node:timers\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"timers/promises\": \">= 15\",\n      \"node:timers/promises\": \">= 16\",\n      _tls_common: \">= 0.11.13\",\n      \"node:_tls_common\": [\">= 14.18 && < 15\", \">= 16\"],\n      _tls_legacy: \">= 0.11.3 && < 10\",\n      _tls_wrap: \">= 0.11.3\",\n      \"node:_tls_wrap\": [\">= 14.18 && < 15\", \">= 16\"],\n      tls: true,\n      \"node:tls\": [\">= 14.18 && < 15\", \">= 16\"],\n      trace_events: \">= 10\",\n      \"node:trace_events\": [\">= 14.18 && < 15\", \">= 16\"],\n      tty: true,\n      \"node:tty\": [\">= 14.18 && < 15\", \">= 16\"],\n      url: true,\n      \"node:url\": [\">= 14.18 && < 15\", \">= 16\"],\n      util: true,\n      \"node:util\": [\">= 14.18 && < 15\", \">= 16\"],\n      \"util/types\": \">= 15.3\",\n      \"node:util/types\": \">= 16\",\n      \"v8/tools/arguments\": \">= 10 && < 12\",\n      \"v8/tools/codemap\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/consarray\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/csvparser\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/logreader\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/profile_view\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      \"v8/tools/splaytree\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n      v8: \">= 1\",\n      \"node:v8\": [\">= 14.18 && < 15\", \">= 16\"],\n      vm: true,\n      \"node:vm\": [\">= 14.18 && < 15\", \">= 16\"],\n      wasi: [\">= 13.4 && < 13.5\", \">= 18.17 && < 19\", \">= 20\"],\n      \"node:wasi\": [\">= 18.17 && < 19\", \">= 20\"],\n      worker_threads: \">= 11.7\",\n      \"node:worker_threads\": [\">= 14.18 && < 15\", \">= 16\"],\n      zlib: \">= 0.5\",\n      \"node:zlib\": [\">= 14.18 && < 15\", \">= 16\"]\n    };\n  }\n});\n\n// node_modules/resolve/lib/core.js\nvar require_core3 = __commonJS({\n  \"node_modules/resolve/lib/core.js\"(exports, module2) {\n    \"use strict\";\n    var isCoreModule = require_is_core_module();\n    var data = require_core2();\n    var core = {};\n    for (mod in data) {\n      if (Object.prototype.hasOwnProperty.call(data, mod)) {\n        core[mod] = isCoreModule(mod);\n      }\n    }\n    var mod;\n    module2.exports = core;\n  }\n});\n\n// node_modules/resolve/lib/is-core.js\nvar require_is_core = __commonJS({\n  \"node_modules/resolve/lib/is-core.js\"(exports, module2) {\n    var isCoreModule = require_is_core_module();\n    module2.exports = function isCore(x) {\n      return isCoreModule(x);\n    };\n  }\n});\n\n// node_modules/resolve/lib/sync.js\nvar require_sync = __commonJS({\n  \"node_modules/resolve/lib/sync.js\"(exports, module2) {\n    var isCore = require_is_core_module();\n    var fs3 = __webpack_require__(/*! fs */ \"fs\");\n    var path3 = __webpack_require__(/*! path */ \"path\");\n    var getHomedir = require_homedir();\n    var caller = require_caller();\n    var nodeModulesPaths = require_node_modules_paths();\n    var normalizeOptions = require_normalize_options();\n    var realpathFS = process.platform !== \"win32\" && fs3.realpathSync && typeof fs3.realpathSync.native === \"function\" ? fs3.realpathSync.native : fs3.realpathSync;\n    var homedir = getHomedir();\n    var defaultPaths = function() {\n      return [\n        path3.join(homedir, \".node_modules\"),\n        path3.join(homedir, \".node_libraries\")\n      ];\n    };\n    var defaultIsFile = function isFile(file) {\n      try {\n        var stat = fs3.statSync(file, { throwIfNoEntry: false });\n      } catch (e) {\n        if (e && (e.code === \"ENOENT\" || e.code === \"ENOTDIR\"))\n          return false;\n        throw e;\n      }\n      return !!stat && (stat.isFile() || stat.isFIFO());\n    };\n    var defaultIsDir = function isDirectory(dir) {\n      try {\n        var stat = fs3.statSync(dir, { throwIfNoEntry: false });\n      } catch (e) {\n        if (e && (e.code === \"ENOENT\" || e.code === \"ENOTDIR\"))\n          return false;\n        throw e;\n      }\n      return !!stat && stat.isDirectory();\n    };\n    var defaultRealpathSync = function realpathSync(x) {\n      try {\n        return realpathFS(x);\n      } catch (realpathErr) {\n        if (realpathErr.code !== \"ENOENT\") {\n          throw realpathErr;\n        }\n      }\n      return x;\n    };\n    var maybeRealpathSync = function maybeRealpathSync2(realpathSync, x, opts) {\n      if (opts && opts.preserveSymlinks === false) {\n        return realpathSync(x);\n      }\n      return x;\n    };\n    var defaultReadPackageSync = function defaultReadPackageSync2(readFileSync, pkgfile) {\n      var body = readFileSync(pkgfile);\n      try {\n        var pkg = JSON.parse(body);\n        return pkg;\n      } catch (jsonErr) {\n      }\n    };\n    var getPackageCandidates = function getPackageCandidates2(x, start, opts) {\n      var dirs = nodeModulesPaths(start, opts, x);\n      for (var i = 0; i < dirs.length; i++) {\n        dirs[i] = path3.join(dirs[i], x);\n      }\n      return dirs;\n    };\n    module2.exports = function resolveSync(x, options) {\n      if (typeof x !== \"string\") {\n        throw new TypeError(\"Path must be a string.\");\n      }\n      var opts = normalizeOptions(x, options);\n      var isFile = opts.isFile || defaultIsFile;\n      var readFileSync = opts.readFileSync || fs3.readFileSync;\n      var isDirectory = opts.isDirectory || defaultIsDir;\n      var realpathSync = opts.realpathSync || defaultRealpathSync;\n      var readPackageSync = opts.readPackageSync || defaultReadPackageSync;\n      if (opts.readFileSync && opts.readPackageSync) {\n        throw new TypeError(\"`readFileSync` and `readPackageSync` are mutually exclusive.\");\n      }\n      var packageIterator = opts.packageIterator;\n      var extensions = opts.extensions || [\".js\"];\n      var includeCoreModules = opts.includeCoreModules !== false;\n      var basedir = opts.basedir || path3.dirname(caller());\n      var parent = opts.filename || basedir;\n      opts.paths = opts.paths || defaultPaths();\n      var absoluteStart = maybeRealpathSync(realpathSync, path3.resolve(basedir), opts);\n      if (/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[/\\\\])/.test(x)) {\n        var res = path3.resolve(absoluteStart, x);\n        if (x === \".\" || x === \"..\" || x.slice(-1) === \"/\")\n          res += \"/\";\n        var m = loadAsFileSync(res) || loadAsDirectorySync(res);\n        if (m)\n          return maybeRealpathSync(realpathSync, m, opts);\n      } else if (includeCoreModules && isCore(x)) {\n        return x;\n      } else {\n        var n = loadNodeModulesSync(x, absoluteStart);\n        if (n)\n          return maybeRealpathSync(realpathSync, n, opts);\n      }\n      var err = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n      err.code = \"MODULE_NOT_FOUND\";\n      throw err;\n      function loadAsFileSync(x2) {\n        var pkg = loadpkg(path3.dirname(x2));\n        if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {\n          var rfile = path3.relative(pkg.dir, x2);\n          var r = opts.pathFilter(pkg.pkg, x2, rfile);\n          if (r) {\n            x2 = path3.resolve(pkg.dir, r);\n          }\n        }\n        if (isFile(x2)) {\n          return x2;\n        }\n        for (var i = 0; i < extensions.length; i++) {\n          var file = x2 + extensions[i];\n          if (isFile(file)) {\n            return file;\n          }\n        }\n      }\n      function loadpkg(dir) {\n        if (dir === \"\" || dir === \"/\")\n          return;\n        if (process.platform === \"win32\" && /^\\w:[/\\\\]*$/.test(dir)) {\n          return;\n        }\n        if (/[/\\\\]node_modules[/\\\\]*$/.test(dir))\n          return;\n        var pkgfile = path3.join(maybeRealpathSync(realpathSync, dir, opts), \"package.json\");\n        if (!isFile(pkgfile)) {\n          return loadpkg(path3.dirname(dir));\n        }\n        var pkg = readPackageSync(readFileSync, pkgfile);\n        if (pkg && opts.packageFilter) {\n          pkg = opts.packageFilter(\n            pkg,\n            /*pkgfile,*/\n            dir\n          );\n        }\n        return { pkg, dir };\n      }\n      function loadAsDirectorySync(x2) {\n        var pkgfile = path3.join(maybeRealpathSync(realpathSync, x2, opts), \"/package.json\");\n        if (isFile(pkgfile)) {\n          try {\n            var pkg = readPackageSync(readFileSync, pkgfile);\n          } catch (e) {\n          }\n          if (pkg && opts.packageFilter) {\n            pkg = opts.packageFilter(\n              pkg,\n              /*pkgfile,*/\n              x2\n            );\n          }\n          if (pkg && pkg.main) {\n            if (typeof pkg.main !== \"string\") {\n              var mainError = new TypeError(\"package \\u201C\" + pkg.name + \"\\u201D `main` must be a string\");\n              mainError.code = \"INVALID_PACKAGE_MAIN\";\n              throw mainError;\n            }\n            if (pkg.main === \".\" || pkg.main === \"./\") {\n              pkg.main = \"index\";\n            }\n            try {\n              var m2 = loadAsFileSync(path3.resolve(x2, pkg.main));\n              if (m2)\n                return m2;\n              var n2 = loadAsDirectorySync(path3.resolve(x2, pkg.main));\n              if (n2)\n                return n2;\n            } catch (e) {\n            }\n          }\n        }\n        return loadAsFileSync(path3.join(x2, \"/index\"));\n      }\n      function loadNodeModulesSync(x2, start) {\n        var thunk = function() {\n          return getPackageCandidates(x2, start, opts);\n        };\n        var dirs = packageIterator ? packageIterator(x2, start, thunk, opts) : thunk();\n        for (var i = 0; i < dirs.length; i++) {\n          var dir = dirs[i];\n          if (isDirectory(path3.dirname(dir))) {\n            var m2 = loadAsFileSync(dir);\n            if (m2)\n              return m2;\n            var n2 = loadAsDirectorySync(dir);\n            if (n2)\n              return n2;\n          }\n        }\n      }\n    };\n  }\n});\n\n// node_modules/resolve/index.js\nvar require_resolve = __commonJS({\n  \"node_modules/resolve/index.js\"(exports, module2) {\n    var async = require_async();\n    async.core = require_core3();\n    async.isCore = require_is_core();\n    async.sync = require_sync();\n    module2.exports = async;\n  }\n});\n\n// node_modules/ms/index.js\nvar require_ms = __commonJS({\n  \"node_modules/ms/index.js\"(exports, module2) {\n    var s = 1e3;\n    var m = s * 60;\n    var h = m * 60;\n    var d = h * 24;\n    var w = d * 7;\n    var y = d * 365.25;\n    module2.exports = function(val, options) {\n      options = options || {};\n      var type = typeof val;\n      if (type === \"string\" && val.length > 0) {\n        return parse4(val);\n      } else if (type === \"number\" && isFinite(val)) {\n        return options.long ? fmtLong(val) : fmtShort(val);\n      }\n      throw new Error(\n        \"val is not a non-empty string or a valid number. val=\" + JSON.stringify(val)\n      );\n    };\n    function parse4(str) {\n      str = String(str);\n      if (str.length > 100) {\n        return;\n      }\n      var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n        str\n      );\n      if (!match) {\n        return;\n      }\n      var n = parseFloat(match[1]);\n      var type = (match[2] || \"ms\").toLowerCase();\n      switch (type) {\n        case \"years\":\n        case \"year\":\n        case \"yrs\":\n        case \"yr\":\n        case \"y\":\n          return n * y;\n        case \"weeks\":\n        case \"week\":\n        case \"w\":\n          return n * w;\n        case \"days\":\n        case \"day\":\n        case \"d\":\n          return n * d;\n        case \"hours\":\n        case \"hour\":\n        case \"hrs\":\n        case \"hr\":\n        case \"h\":\n          return n * h;\n        case \"minutes\":\n        case \"minute\":\n        case \"mins\":\n        case \"min\":\n        case \"m\":\n          return n * m;\n        case \"seconds\":\n        case \"second\":\n        case \"secs\":\n        case \"sec\":\n        case \"s\":\n          return n * s;\n        case \"milliseconds\":\n        case \"millisecond\":\n        case \"msecs\":\n        case \"msec\":\n        case \"ms\":\n          return n;\n        default:\n          return void 0;\n      }\n    }\n    function fmtShort(ms) {\n      var msAbs = Math.abs(ms);\n      if (msAbs >= d) {\n        return Math.round(ms / d) + \"d\";\n      }\n      if (msAbs >= h) {\n        return Math.round(ms / h) + \"h\";\n      }\n      if (msAbs >= m) {\n        return Math.round(ms / m) + \"m\";\n      }\n      if (msAbs >= s) {\n        return Math.round(ms / s) + \"s\";\n      }\n      return ms + \"ms\";\n    }\n    function fmtLong(ms) {\n      var msAbs = Math.abs(ms);\n      if (msAbs >= d) {\n        return plural(ms, msAbs, d, \"day\");\n      }\n      if (msAbs >= h) {\n        return plural(ms, msAbs, h, \"hour\");\n      }\n      if (msAbs >= m) {\n        return plural(ms, msAbs, m, \"minute\");\n      }\n      if (msAbs >= s) {\n        return plural(ms, msAbs, s, \"second\");\n      }\n      return ms + \" ms\";\n    }\n    function plural(ms, msAbs, n, name) {\n      var isPlural = msAbs >= n * 1.5;\n      return Math.round(ms / n) + \" \" + name + (isPlural ? \"s\" : \"\");\n    }\n  }\n});\n\n// node_modules/debug/src/common.js\nvar require_common = __commonJS({\n  \"node_modules/debug/src/common.js\"(exports, module2) {\n    function setup(env3) {\n      createDebug.debug = createDebug;\n      createDebug.default = createDebug;\n      createDebug.coerce = coerce;\n      createDebug.disable = disable;\n      createDebug.enable = enable;\n      createDebug.enabled = enabled;\n      createDebug.humanize = require_ms();\n      createDebug.destroy = destroy;\n      Object.keys(env3).forEach((key) => {\n        createDebug[key] = env3[key];\n      });\n      createDebug.names = [];\n      createDebug.skips = [];\n      createDebug.formatters = {};\n      function selectColor(namespace) {\n        let hash = 0;\n        for (let i = 0; i < namespace.length; i++) {\n          hash = (hash << 5) - hash + namespace.charCodeAt(i);\n          hash |= 0;\n        }\n        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n      }\n      createDebug.selectColor = selectColor;\n      function createDebug(namespace) {\n        let prevTime;\n        let enableOverride = null;\n        let namespacesCache;\n        let enabledCache;\n        function debug(...args) {\n          if (!debug.enabled) {\n            return;\n          }\n          const self2 = debug;\n          const curr = Number(/* @__PURE__ */ new Date());\n          const ms = curr - (prevTime || curr);\n          self2.diff = ms;\n          self2.prev = prevTime;\n          self2.curr = curr;\n          prevTime = curr;\n          args[0] = createDebug.coerce(args[0]);\n          if (typeof args[0] !== \"string\") {\n            args.unshift(\"%O\");\n          }\n          let index = 0;\n          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n            if (match === \"%%\") {\n              return \"%\";\n            }\n            index++;\n            const formatter = createDebug.formatters[format];\n            if (typeof formatter === \"function\") {\n              const val = args[index];\n              match = formatter.call(self2, val);\n              args.splice(index, 1);\n              index--;\n            }\n            return match;\n          });\n          createDebug.formatArgs.call(self2, args);\n          const logFn = self2.log || createDebug.log;\n          logFn.apply(self2, args);\n        }\n        debug.namespace = namespace;\n        debug.useColors = createDebug.useColors();\n        debug.color = createDebug.selectColor(namespace);\n        debug.extend = extend;\n        debug.destroy = createDebug.destroy;\n        Object.defineProperty(debug, \"enabled\", {\n          enumerable: true,\n          configurable: false,\n          get: () => {\n            if (enableOverride !== null) {\n              return enableOverride;\n            }\n            if (namespacesCache !== createDebug.namespaces) {\n              namespacesCache = createDebug.namespaces;\n              enabledCache = createDebug.enabled(namespace);\n            }\n            return enabledCache;\n          },\n          set: (v) => {\n            enableOverride = v;\n          }\n        });\n        if (typeof createDebug.init === \"function\") {\n          createDebug.init(debug);\n        }\n        return debug;\n      }\n      function extend(namespace, delimiter) {\n        const newDebug = createDebug(this.namespace + (typeof delimiter === \"undefined\" ? \":\" : delimiter) + namespace);\n        newDebug.log = this.log;\n        return newDebug;\n      }\n      function enable(namespaces) {\n        createDebug.save(namespaces);\n        createDebug.namespaces = namespaces;\n        createDebug.names = [];\n        createDebug.skips = [];\n        let i;\n        const split = (typeof namespaces === \"string\" ? namespaces : \"\").split(/[\\s,]+/);\n        const len = split.length;\n        for (i = 0; i < len; i++) {\n          if (!split[i]) {\n            continue;\n          }\n          namespaces = split[i].replace(/\\*/g, \".*?\");\n          if (namespaces[0] === \"-\") {\n            createDebug.skips.push(new RegExp(\"^\" + namespaces.slice(1) + \"$\"));\n          } else {\n            createDebug.names.push(new RegExp(\"^\" + namespaces + \"$\"));\n          }\n        }\n      }\n      function disable() {\n        const namespaces = [\n          ...createDebug.names.map(toNamespace),\n          ...createDebug.skips.map(toNamespace).map((namespace) => \"-\" + namespace)\n        ].join(\",\");\n        createDebug.enable(\"\");\n        return namespaces;\n      }\n      function enabled(name) {\n        if (name[name.length - 1] === \"*\") {\n          return true;\n        }\n        let i;\n        let len;\n        for (i = 0, len = createDebug.skips.length; i < len; i++) {\n          if (createDebug.skips[i].test(name)) {\n            return false;\n          }\n        }\n        for (i = 0, len = createDebug.names.length; i < len; i++) {\n          if (createDebug.names[i].test(name)) {\n            return true;\n          }\n        }\n        return false;\n      }\n      function toNamespace(regexp) {\n        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\\.\\*\\?$/, \"*\");\n      }\n      function coerce(val) {\n        if (val instanceof Error) {\n          return val.stack || val.message;\n        }\n        return val;\n      }\n      function destroy() {\n        console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n      }\n      createDebug.enable(createDebug.load());\n      return createDebug;\n    }\n    module2.exports = setup;\n  }\n});\n\n// node_modules/debug/src/browser.js\nvar require_browser = __commonJS({\n  \"node_modules/debug/src/browser.js\"(exports, module2) {\n    exports.formatArgs = formatArgs;\n    exports.save = save;\n    exports.load = load;\n    exports.useColors = useColors;\n    exports.storage = localstorage();\n    exports.destroy = (() => {\n      let warned = false;\n      return () => {\n        if (!warned) {\n          warned = true;\n          console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n        }\n      };\n    })();\n    exports.colors = [\n      \"#0000CC\",\n      \"#0000FF\",\n      \"#0033CC\",\n      \"#0033FF\",\n      \"#0066CC\",\n      \"#0066FF\",\n      \"#0099CC\",\n      \"#0099FF\",\n      \"#00CC00\",\n      \"#00CC33\",\n      \"#00CC66\",\n      \"#00CC99\",\n      \"#00CCCC\",\n      \"#00CCFF\",\n      \"#3300CC\",\n      \"#3300FF\",\n      \"#3333CC\",\n      \"#3333FF\",\n      \"#3366CC\",\n      \"#3366FF\",\n      \"#3399CC\",\n      \"#3399FF\",\n      \"#33CC00\",\n      \"#33CC33\",\n      \"#33CC66\",\n      \"#33CC99\",\n      \"#33CCCC\",\n      \"#33CCFF\",\n      \"#6600CC\",\n      \"#6600FF\",\n      \"#6633CC\",\n      \"#6633FF\",\n      \"#66CC00\",\n      \"#66CC33\",\n      \"#9900CC\",\n      \"#9900FF\",\n      \"#9933CC\",\n      \"#9933FF\",\n      \"#99CC00\",\n      \"#99CC33\",\n      \"#CC0000\",\n      \"#CC0033\",\n      \"#CC0066\",\n      \"#CC0099\",\n      \"#CC00CC\",\n      \"#CC00FF\",\n      \"#CC3300\",\n      \"#CC3333\",\n      \"#CC3366\",\n      \"#CC3399\",\n      \"#CC33CC\",\n      \"#CC33FF\",\n      \"#CC6600\",\n      \"#CC6633\",\n      \"#CC9900\",\n      \"#CC9933\",\n      \"#CCCC00\",\n      \"#CCCC33\",\n      \"#FF0000\",\n      \"#FF0033\",\n      \"#FF0066\",\n      \"#FF0099\",\n      \"#FF00CC\",\n      \"#FF00FF\",\n      \"#FF3300\",\n      \"#FF3333\",\n      \"#FF3366\",\n      \"#FF3399\",\n      \"#FF33CC\",\n      \"#FF33FF\",\n      \"#FF6600\",\n      \"#FF6633\",\n      \"#FF9900\",\n      \"#FF9933\",\n      \"#FFCC00\",\n      \"#FFCC33\"\n    ];\n    function useColors() {\n      if (typeof window !== \"undefined\" && window.process && (window.process.type === \"renderer\" || window.process.__nwjs)) {\n        return true;\n      }\n      if (typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n        return false;\n      }\n      return typeof document !== \"undefined\" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n      typeof window !== \"undefined\" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n      typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n      typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n    }\n    function formatArgs(args) {\n      args[0] = (this.useColors ? \"%c\" : \"\") + this.namespace + (this.useColors ? \" %c\" : \" \") + args[0] + (this.useColors ? \"%c \" : \" \") + \"+\" + module2.exports.humanize(this.diff);\n      if (!this.useColors) {\n        return;\n      }\n      const c = \"color: \" + this.color;\n      args.splice(1, 0, c, \"color: inherit\");\n      let index = 0;\n      let lastC = 0;\n      args[0].replace(/%[a-zA-Z%]/g, (match) => {\n        if (match === \"%%\") {\n          return;\n        }\n        index++;\n        if (match === \"%c\") {\n          lastC = index;\n        }\n      });\n      args.splice(lastC, 0, c);\n    }\n    exports.log = console.debug || console.log || (() => {\n    });\n    function save(namespaces) {\n      try {\n        if (namespaces) {\n          exports.storage.setItem(\"debug\", namespaces);\n        } else {\n          exports.storage.removeItem(\"debug\");\n        }\n      } catch (error) {\n      }\n    }\n    function load() {\n      let r;\n      try {\n        r = exports.storage.getItem(\"debug\");\n      } catch (error) {\n      }\n      if (!r && typeof process !== \"undefined\" && \"env\" in process) {\n        r = process.env.DEBUG;\n      }\n      return r;\n    }\n    function localstorage() {\n      try {\n        return localStorage;\n      } catch (error) {\n      }\n    }\n    module2.exports = require_common()(exports);\n    var { formatters } = module2.exports;\n    formatters.j = function(v) {\n      try {\n        return JSON.stringify(v);\n      } catch (error) {\n        return \"[UnexpectedJSONParseError]: \" + error.message;\n      }\n    };\n  }\n});\n\n// node_modules/has-flag/index.js\nvar require_has_flag = __commonJS({\n  \"node_modules/has-flag/index.js\"(exports, module2) {\n    \"use strict\";\n    module2.exports = (flag, argv) => {\n      argv = argv || process.argv;\n      const prefix = flag.startsWith(\"-\") ? \"\" : flag.length === 1 ? \"-\" : \"--\";\n      const pos = argv.indexOf(prefix + flag);\n      const terminatorPos = argv.indexOf(\"--\");\n      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\n    };\n  }\n});\n\n// node_modules/supports-color/index.js\nvar require_supports_color = __commonJS({\n  \"node_modules/supports-color/index.js\"(exports, module2) {\n    \"use strict\";\n    var os2 = __webpack_require__(/*! os */ \"os\");\n    var hasFlag = require_has_flag();\n    var env3 = process.env;\n    var forceColor;\n    if (hasFlag(\"no-color\") || hasFlag(\"no-colors\") || hasFlag(\"color=false\")) {\n      forceColor = false;\n    } else if (hasFlag(\"color\") || hasFlag(\"colors\") || hasFlag(\"color=true\") || hasFlag(\"color=always\")) {\n      forceColor = true;\n    }\n    if (\"FORCE_COLOR\" in env3) {\n      forceColor = env3.FORCE_COLOR.length === 0 || parseInt(env3.FORCE_COLOR, 10) !== 0;\n    }\n    function translateLevel(level) {\n      if (level === 0) {\n        return false;\n      }\n      return {\n        level,\n        hasBasic: true,\n        has256: level >= 2,\n        has16m: level >= 3\n      };\n    }\n    function supportsColor(stream) {\n      if (forceColor === false) {\n        return 0;\n      }\n      if (hasFlag(\"color=16m\") || hasFlag(\"color=full\") || hasFlag(\"color=truecolor\")) {\n        return 3;\n      }\n      if (hasFlag(\"color=256\")) {\n        return 2;\n      }\n      if (stream && !stream.isTTY && forceColor !== true) {\n        return 0;\n      }\n      const min = forceColor ? 1 : 0;\n      if (process.platform === \"win32\") {\n        const osRelease = os2.release().split(\".\");\n        if (Number(process.versions.node.split(\".\")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {\n          return Number(osRelease[2]) >= 14931 ? 3 : 2;\n        }\n        return 1;\n      }\n      if (\"CI\" in env3) {\n        if ([\"TRAVIS\", \"CIRCLECI\", \"APPVEYOR\", \"GITLAB_CI\"].some((sign) => sign in env3) || env3.CI_NAME === \"codeship\") {\n          return 1;\n        }\n        return min;\n      }\n      if (\"TEAMCITY_VERSION\" in env3) {\n        return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env3.TEAMCITY_VERSION) ? 1 : 0;\n      }\n      if (env3.COLORTERM === \"truecolor\") {\n        return 3;\n      }\n      if (\"TERM_PROGRAM\" in env3) {\n        const version = parseInt((env3.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n        switch (env3.TERM_PROGRAM) {\n          case \"iTerm.app\":\n            return version >= 3 ? 3 : 2;\n          case \"Apple_Terminal\":\n            return 2;\n        }\n      }\n      if (/-256(color)?$/i.test(env3.TERM)) {\n        return 2;\n      }\n      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env3.TERM)) {\n        return 1;\n      }\n      if (\"COLORTERM\" in env3) {\n        return 1;\n      }\n      if (env3.TERM === \"dumb\") {\n        return min;\n      }\n      return min;\n    }\n    function getSupportLevel(stream) {\n      const level = supportsColor(stream);\n      return translateLevel(level);\n    }\n    module2.exports = {\n      supportsColor: getSupportLevel,\n      stdout: getSupportLevel(process.stdout),\n      stderr: getSupportLevel(process.stderr)\n    };\n  }\n});\n\n// node_modules/debug/src/node.js\nvar require_node = __commonJS({\n  \"node_modules/debug/src/node.js\"(exports, module2) {\n    var tty = __webpack_require__(/*! tty */ \"tty\");\n    var util2 = __webpack_require__(/*! util */ \"util\");\n    exports.init = init;\n    exports.log = log;\n    exports.formatArgs = formatArgs;\n    exports.save = save;\n    exports.load = load;\n    exports.useColors = useColors;\n    exports.destroy = util2.deprecate(\n      () => {\n      },\n      \"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\"\n    );\n    exports.colors = [6, 2, 3, 4, 5, 1];\n    try {\n      const supportsColor = require_supports_color();\n      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n        exports.colors = [\n          20,\n          21,\n          26,\n          27,\n          32,\n          33,\n          38,\n          39,\n          40,\n          41,\n          42,\n          43,\n          44,\n          45,\n          56,\n          57,\n          62,\n          63,\n          68,\n          69,\n          74,\n          75,\n          76,\n          77,\n          78,\n          79,\n          80,\n          81,\n          92,\n          93,\n          98,\n          99,\n          112,\n          113,\n          128,\n          129,\n          134,\n          135,\n          148,\n          149,\n          160,\n          161,\n          162,\n          163,\n          164,\n          165,\n          166,\n          167,\n          168,\n          169,\n          170,\n          171,\n          172,\n          173,\n          178,\n          179,\n          184,\n          185,\n          196,\n          197,\n          198,\n          199,\n          200,\n          201,\n          202,\n          203,\n          204,\n          205,\n          206,\n          207,\n          208,\n          209,\n          214,\n          215,\n          220,\n          221\n        ];\n      }\n    } catch (error) {\n    }\n    exports.inspectOpts = Object.keys(process.env).filter((key) => {\n      return /^debug_/i.test(key);\n    }).reduce((obj, key) => {\n      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {\n        return k.toUpperCase();\n      });\n      let val = process.env[key];\n      if (/^(yes|on|true|enabled)$/i.test(val)) {\n        val = true;\n      } else if (/^(no|off|false|disabled)$/i.test(val)) {\n        val = false;\n      } else if (val === \"null\") {\n        val = null;\n      } else {\n        val = Number(val);\n      }\n      obj[prop] = val;\n      return obj;\n    }, {});\n    function useColors() {\n      return \"colors\" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);\n    }\n    function formatArgs(args) {\n      const { namespace: name, useColors: useColors2 } = this;\n      if (useColors2) {\n        const c = this.color;\n        const colorCode = \"\\x1B[3\" + (c < 8 ? c : \"8;5;\" + c);\n        const prefix = `  ${colorCode};1m${name} \\x1B[0m`;\n        args[0] = prefix + args[0].split(\"\\n\").join(\"\\n\" + prefix);\n        args.push(colorCode + \"m+\" + module2.exports.humanize(this.diff) + \"\\x1B[0m\");\n      } else {\n        args[0] = getDate() + name + \" \" + args[0];\n      }\n    }\n    function getDate() {\n      if (exports.inspectOpts.hideDate) {\n        return \"\";\n      }\n      return (/* @__PURE__ */ new Date()).toISOString() + \" \";\n    }\n    function log(...args) {\n      return process.stderr.write(util2.format(...args) + \"\\n\");\n    }\n    function save(namespaces) {\n      if (namespaces) {\n        process.env.DEBUG = namespaces;\n      } else {\n        delete process.env.DEBUG;\n      }\n    }\n    function load() {\n      return process.env.DEBUG;\n    }\n    function init(debug) {\n      debug.inspectOpts = {};\n      const keys = Object.keys(exports.inspectOpts);\n      for (let i = 0; i < keys.length; i++) {\n        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n      }\n    }\n    module2.exports = require_common()(exports);\n    var { formatters } = module2.exports;\n    formatters.o = function(v) {\n      this.inspectOpts.colors = this.useColors;\n      return util2.inspect(v, this.inspectOpts).split(\"\\n\").map((str) => str.trim()).join(\" \");\n    };\n    formatters.O = function(v) {\n      this.inspectOpts.colors = this.useColors;\n      return util2.inspect(v, this.inspectOpts);\n    };\n  }\n});\n\n// node_modules/debug/src/index.js\nvar require_src5 = __commonJS({\n  \"node_modules/debug/src/index.js\"(exports, module2) {\n    if (typeof process === \"undefined\" || process.type === \"renderer\" || false === true || process.__nwjs) {\n      module2.exports = require_browser();\n    } else {\n      module2.exports = require_node();\n    }\n  }\n});\n\n// node_modules/module-details-from-path/index.js\nvar require_module_details_from_path = __commonJS({\n  \"node_modules/module-details-from-path/index.js\"(exports, module2) {\n    \"use strict\";\n    var path3 = __webpack_require__(/*! path */ \"path\");\n    module2.exports = function(file) {\n      var segments = file.split(path3.sep);\n      var index = segments.lastIndexOf(\"node_modules\");\n      if (index === -1)\n        return;\n      if (!segments[index + 1])\n        return;\n      var scoped = segments[index + 1][0] === \"@\";\n      var name = scoped ? segments[index + 1] + \"/\" + segments[index + 2] : segments[index + 1];\n      var offset = scoped ? 3 : 2;\n      return {\n        name,\n        basedir: segments.slice(0, index + offset).join(path3.sep),\n        path: segments.slice(index + offset).join(path3.sep)\n      };\n    };\n  }\n});\n\n// node_modules/require-in-the-middle/package.json\nvar require_package = __commonJS({\n  \"node_modules/require-in-the-middle/package.json\"(exports, module2) {\n    module2.exports = {\n      name: \"require-in-the-middle\",\n      version: \"7.2.0\",\n      description: \"Module to hook into the Node.js require function\",\n      main: \"index.js\",\n      types: \"types/index.d.ts\",\n      dependencies: {\n        debug: \"^4.1.1\",\n        \"module-details-from-path\": \"^1.0.3\",\n        resolve: \"^1.22.1\"\n      },\n      devDependencies: {\n        \"@babel/core\": \"^7.9.0\",\n        \"@babel/preset-env\": \"^7.9.5\",\n        \"@babel/preset-typescript\": \"^7.9.0\",\n        \"@babel/register\": \"^7.9.0\",\n        \"ipp-printer\": \"^1.0.0\",\n        patterns: \"^1.0.3\",\n        roundround: \"^0.2.0\",\n        semver: \"^6.3.0\",\n        standard: \"^14.3.1\",\n        tape: \"^4.11.0\"\n      },\n      scripts: {\n        test: \"npm run test:lint && npm run test:tape && npm run test:babel\",\n        \"test:lint\": \"standard\",\n        \"test:tape\": \"tape test/*.js\",\n        \"test:babel\": \"node test/babel/babel-register.js\"\n      },\n      repository: {\n        type: \"git\",\n        url: \"git+https://github.com/elastic/require-in-the-middle.git\"\n      },\n      keywords: [\n        \"require\",\n        \"hook\",\n        \"shim\",\n        \"shimmer\",\n        \"shimming\",\n        \"patch\",\n        \"monkey\",\n        \"monkeypatch\",\n        \"module\",\n        \"load\"\n      ],\n      files: [\n        \"types\"\n      ],\n      author: \"Thomas Watson Steen <w@tson.dk> (https://twitter.com/wa7son)\",\n      license: \"MIT\",\n      bugs: {\n        url: \"https://github.com/elastic/require-in-the-middle/issues\"\n      },\n      homepage: \"https://github.com/elastic/require-in-the-middle#readme\",\n      engines: {\n        node: \">=8.6.0\"\n      }\n    };\n  }\n});\n\n// node_modules/require-in-the-middle/index.js\nvar require_require_in_the_middle = __commonJS({\n  \"node_modules/require-in-the-middle/index.js\"(exports, module2) {\n    \"use strict\";\n    var path3 = __webpack_require__(/*! path */ \"path\");\n    var Module = __webpack_require__(/*! module */ \"module\");\n    var resolve = require_resolve();\n    var debug = require_src5()(\"require-in-the-middle\");\n    var moduleDetailsFromPath = require_module_details_from_path();\n    module2.exports = Hook3;\n    module2.exports.Hook = Hook3;\n    var isCore;\n    if (Module.isBuiltin) {\n      isCore = Module.isBuiltin;\n    } else {\n      const [major2, minor] = process.versions.node.split(\".\").map(Number);\n      if (major2 === 8 && minor < 8) {\n        isCore = (moduleName) => {\n          if (moduleName === \"http2\") {\n            return true;\n          }\n          return !!resolve.core[moduleName];\n        };\n      } else {\n        isCore = (moduleName) => {\n          return !!resolve.core[moduleName];\n        };\n      }\n    }\n    var normalize3 = /([/\\\\]index)?(\\.js)?$/;\n    var ExportsCache = class {\n      constructor() {\n        this._localCache = /* @__PURE__ */ new Map();\n        this._kRitmExports = Symbol(\"RitmExports\");\n      }\n      has(filename, isBuiltin) {\n        if (this._localCache.has(filename)) {\n          return true;\n        } else if (!isBuiltin) {\n          const mod = __webpack_require__.c[filename];\n          return !!(mod && this._kRitmExports in mod);\n        } else {\n          return false;\n        }\n      }\n      get(filename, isBuiltin) {\n        const cachedExports = this._localCache.get(filename);\n        if (cachedExports !== void 0) {\n          return cachedExports;\n        } else if (!isBuiltin) {\n          const mod = __webpack_require__.c[filename];\n          return mod && mod[this._kRitmExports];\n        }\n      }\n      set(filename, exports2, isBuiltin) {\n        if (isBuiltin) {\n          this._localCache.set(filename, exports2);\n        } else if (filename in __webpack_require__.c) {\n          __webpack_require__.c[filename][this._kRitmExports] = exports2;\n        } else {\n          debug('non-core module is unexpectedly not in require.cache: \"%s\"', filename);\n          this._localCache.set(filename, exports2);\n        }\n      }\n    };\n    function Hook3(modules, options, onrequire) {\n      if (this instanceof Hook3 === false)\n        return new Hook3(modules, options, onrequire);\n      if (typeof modules === \"function\") {\n        onrequire = modules;\n        modules = null;\n        options = null;\n      } else if (typeof options === \"function\") {\n        onrequire = options;\n        options = null;\n      }\n      if (typeof Module._resolveFilename !== \"function\") {\n        console.error(\"Error: Expected Module._resolveFilename to be a function (was: %s) - aborting!\", typeof Module._resolveFilename);\n        console.error(\"Please report this error as an issue related to Node.js %s at %s\", process.version, require_package().bugs.url);\n        return;\n      }\n      this._cache = new ExportsCache();\n      this._unhooked = false;\n      this._origRequire = Module.prototype.require;\n      const self2 = this;\n      const patching = /* @__PURE__ */ new Set();\n      const internals = options ? options.internals === true : false;\n      const hasWhitelist = Array.isArray(modules);\n      debug(\"registering require hook\");\n      this._require = Module.prototype.require = function(id) {\n        if (self2._unhooked === true) {\n          debug(\"ignoring require call - module is soft-unhooked\");\n          return self2._origRequire.apply(this, arguments);\n        }\n        const core = isCore(id);\n        let filename;\n        if (core) {\n          filename = id;\n          if (id.startsWith(\"node:\")) {\n            const idWithoutPrefix = id.slice(5);\n            if (isCore(idWithoutPrefix)) {\n              filename = idWithoutPrefix;\n            }\n          }\n        } else {\n          try {\n            filename = Module._resolveFilename(id, this);\n          } catch (resolveErr) {\n            debug('Module._resolveFilename(\"%s\") threw %j, calling original Module.require', id, resolveErr.message);\n            return self2._origRequire.apply(this, arguments);\n          }\n        }\n        let moduleName, basedir;\n        debug(\"processing %s module require('%s'): %s\", core === true ? \"core\" : \"non-core\", id, filename);\n        if (self2._cache.has(filename, core) === true) {\n          debug(\"returning already patched cached module: %s\", filename);\n          return self2._cache.get(filename, core);\n        }\n        const isPatching = patching.has(filename);\n        if (isPatching === false) {\n          patching.add(filename);\n        }\n        const exports2 = self2._origRequire.apply(this, arguments);\n        if (isPatching === true) {\n          debug(\"module is in the process of being patched already - ignoring: %s\", filename);\n          return exports2;\n        }\n        patching.delete(filename);\n        if (core === true) {\n          if (hasWhitelist === true && modules.includes(filename) === false) {\n            debug(\"ignoring core module not on whitelist: %s\", filename);\n            return exports2;\n          }\n          moduleName = filename;\n        } else if (hasWhitelist === true && modules.includes(filename)) {\n          const parsedPath = path3.parse(filename);\n          moduleName = parsedPath.name;\n          basedir = parsedPath.dir;\n        } else {\n          const stat = moduleDetailsFromPath(filename);\n          if (stat === void 0) {\n            debug(\"could not parse filename: %s\", filename);\n            return exports2;\n          }\n          moduleName = stat.name;\n          basedir = stat.basedir;\n          const fullModuleName = resolveModuleName(stat);\n          debug(\"resolved filename to module: %s (id: %s, resolved: %s, basedir: %s)\", moduleName, id, fullModuleName, basedir);\n          if (hasWhitelist === true && modules.includes(moduleName) === false) {\n            if (modules.includes(fullModuleName) === false)\n              return exports2;\n            moduleName = fullModuleName;\n          } else {\n            let res;\n            try {\n              res = resolve.sync(moduleName, { basedir });\n            } catch (e) {\n              debug(\"could not resolve module: %s\", moduleName);\n              self2._cache.set(filename, exports2, core);\n              return exports2;\n            }\n            if (res !== filename) {\n              if (internals === true) {\n                moduleName = moduleName + path3.sep + path3.relative(basedir, filename);\n                debug(\"preparing to process require of internal file: %s\", moduleName);\n              } else {\n                debug(\"ignoring require of non-main module file: %s\", res);\n                self2._cache.set(filename, exports2, core);\n                return exports2;\n              }\n            }\n          }\n        }\n        self2._cache.set(filename, exports2, core);\n        debug(\"calling require hook: %s\", moduleName);\n        const patchedExports = onrequire(exports2, moduleName, basedir);\n        self2._cache.set(filename, patchedExports, core);\n        debug(\"returning module: %s\", moduleName);\n        return patchedExports;\n      };\n    }\n    Hook3.prototype.unhook = function() {\n      this._unhooked = true;\n      if (this._require === Module.prototype.require) {\n        Module.prototype.require = this._origRequire;\n        debug(\"unhook successful\");\n      } else {\n        debug(\"unhook unsuccessful\");\n      }\n    };\n    function resolveModuleName(stat) {\n      const normalizedPath = path3.sep !== \"/\" ? stat.path.split(path3.sep).join(\"/\") : stat.path;\n      return path3.posix.join(stat.name, normalizedPath).replace(normalize3, \"\");\n    }\n  }\n});\n\n// node_modules/import-in-the-middle/lib/register.js\nvar require_register = __commonJS({\n  \"node_modules/import-in-the-middle/lib/register.js\"(exports) {\n    var importHooks = [];\n    var setters = /* @__PURE__ */ new WeakMap();\n    var specifiers = /* @__PURE__ */ new Map();\n    var toHook = [];\n    var proxyHandler = {\n      set(target, name, value) {\n        return setters.get(target)[name](value);\n      },\n      defineProperty(target, property, descriptor) {\n        if (!(\"value\" in descriptor)) {\n          throw new Error(\"Getters/setters are not supported for exports property descriptors.\");\n        }\n        return setters.get(target)[property](descriptor.value);\n      }\n    };\n    function register(name, namespace, set, specifier) {\n      specifiers.set(name, specifier);\n      setters.set(namespace, set);\n      const proxy = new Proxy(namespace, proxyHandler);\n      importHooks.forEach((hook) => hook(name, proxy));\n      toHook.push([name, proxy]);\n    }\n    exports.register = register;\n    exports.importHooks = importHooks;\n    exports.specifiers = specifiers;\n    exports.toHook = toHook;\n  }\n});\n\n// node_modules/import-in-the-middle/index.js\nvar require_import_in_the_middle = __commonJS({\n  \"node_modules/import-in-the-middle/index.js\"(exports, module2) {\n    var path3 = __webpack_require__(/*! path */ \"path\");\n    var parse4 = require_module_details_from_path();\n    var { fileURLToPath } = __webpack_require__(/*! url */ \"url\");\n    var {\n      importHooks,\n      specifiers,\n      toHook\n    } = require_register();\n    function addHook(hook) {\n      importHooks.push(hook);\n      toHook.forEach(([name, namespace]) => hook(name, namespace));\n    }\n    function removeHook(hook) {\n      const index = importHooks.indexOf(hook);\n      if (index > -1) {\n        importHooks.splice(index, 1);\n      }\n    }\n    function callHookFn(hookFn, namespace, name, baseDir) {\n      const newDefault = hookFn(namespace, name, baseDir);\n      if (newDefault && newDefault !== namespace) {\n        namespace.default = newDefault;\n      }\n    }\n    function Hook3(modules, options, hookFn) {\n      if (this instanceof Hook3 === false)\n        return new Hook3(modules, options, hookFn);\n      if (typeof modules === \"function\") {\n        hookFn = modules;\n        modules = null;\n        options = null;\n      } else if (typeof options === \"function\") {\n        hookFn = options;\n        options = null;\n      }\n      const internals = options ? options.internals === true : false;\n      this._iitmHook = (name, namespace) => {\n        const filename = name;\n        const isBuiltin = name.startsWith(\"node:\");\n        let baseDir;\n        if (isBuiltin) {\n          name = name.replace(/^node:/, \"\");\n        } else {\n          if (name.startsWith(\"file://\")) {\n            try {\n              name = fileURLToPath(name);\n            } catch (e) {\n            }\n          }\n          const details = parse4(name);\n          if (details) {\n            name = details.name;\n            baseDir = details.basedir;\n          }\n        }\n        if (modules) {\n          for (const moduleName of modules) {\n            if (moduleName === name) {\n              if (baseDir) {\n                if (internals) {\n                  name = name + path3.sep + path3.relative(baseDir, fileURLToPath(filename));\n                } else {\n                  if (!baseDir.endsWith(specifiers.get(filename)))\n                    continue;\n                }\n              }\n              callHookFn(hookFn, namespace, name, baseDir);\n            }\n          }\n        } else {\n          callHookFn(hookFn, namespace, name, baseDir);\n        }\n      };\n      addHook(this._iitmHook);\n    }\n    Hook3.prototype.unhook = function() {\n      removeHook(this._iitmHook);\n    };\n    module2.exports = Hook3;\n    module2.exports.addHook = addHook;\n    module2.exports.removeHook = removeHook;\n  }\n});\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  BaselimeSDK: () => BaselimeSDK,\n  BetterHttpInstrumentation: () => BetterHttpInstrumentation,\n  HttpPlugin: () => HttpPlugin,\n  StripePlugin: () => StripePlugin,\n  VercelPlugin: () => VercelPlugin\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/baselime.ts\nvar import_sdk_trace_node = __toESM(require_src2(), 1);\ninit_esm();\ninit_esm5();\nvar import_resource_detector_aws = __toESM(require_src3(), 1);\n\n// src/resources/vercel.ts\ninit_esm5();\ninit_esm2();\nvar VercelDetector = class {\n  detect(_config) {\n    if (!process.env.VERCEL) {\n      return Resource.empty();\n    }\n    const deploymentUrl = String(process.env.VERCEL_URL);\n    if (!deploymentUrl) {\n      return Resource.empty();\n    }\n    const gitBranchUrl = String(process.env.VERCEL_BRANCH_URL);\n    let serviceName;\n    let serviceNamespace;\n    if (gitBranchUrl) {\n      try {\n        serviceName = gitBranchUrl.split(\"-git-\")[0];\n        serviceNamespace = serviceName;\n      } catch (e) {\n      }\n    }\n    const attributes = {\n      [SEMRESATTRS_CLOUD_PROVIDER]: String(\n        \"Vercel\"\n      ),\n      [SEMRESATTRS_CLOUD_PLATFORM]: String(\n        \"Vercel Functions\"\n      ),\n      [SEMRESATTRS_CLOUD_REGION]: String(process.env.VERCEL_REGION),\n      \"vercel.environment\": String(process.env.VERCEL_ENV),\n      \"vercel.url\": String(process.env.VERCEL_URL),\n      \"vercel.url.branch\": String(process.env.VERCEL_BRANCH_URL),\n      \"vercel.git.provider\": String(process.env.VERCEL_GIT_PROVIDER),\n      \"vercel.git.repo\": String(process.env.VERCEL_GIT_REPO_SLUG),\n      \"vercel.git.commit\": String(process.env.VERCEL_GIT_COMMIT_SHA),\n      \"vercel.git.message\": String(process.env.VERCEL_GIT_COMMIT_MESSAGE),\n      \"vercel.git.author\": String(process.env.VERCEL_GIT_COMMIT_AUTHOR_NAME),\n      \"service.name\": serviceName,\n      \"service.namespace\": serviceNamespace\n    };\n    return new Resource(attributes);\n  }\n};\n\n// node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/node/OTLPTraceExporter.js\ninit_esm3();\n\n// node_modules/@opentelemetry/otlp-exporter-base/build/esm/OTLPExporterBase.js\ninit_esm();\ninit_esm3();\n\n// node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js\ninit_esm();\ninit_esm3();\nvar __read16 = function(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m)\n    return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n      ar.push(r.value);\n  } catch (error) {\n    e = { error };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"]))\n        m.call(i);\n    } finally {\n      if (e)\n        throw e.error;\n    }\n  }\n  return ar;\n};\nvar DEFAULT_TRACE_TIMEOUT = 1e4;\nvar DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nvar DEFAULT_EXPORT_INITIAL_BACKOFF = 1e3;\nvar DEFAULT_EXPORT_MAX_BACKOFF = 5e3;\nvar DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\nfunction parseHeaders(partialHeaders) {\n  if (partialHeaders === void 0) {\n    partialHeaders = {};\n  }\n  var headers = {};\n  Object.entries(partialHeaders).forEach(function(_a2) {\n    var _b = __read16(_a2, 2), key = _b[0], value = _b[1];\n    if (typeof value !== \"undefined\") {\n      headers[key] = String(value);\n    } else {\n      diag2.warn('Header \"' + key + '\" has invalid value (' + value + \") and will be ignored\");\n    }\n  });\n  return headers;\n}\nfunction appendResourcePathToUrl(url4, path3) {\n  if (!url4.endsWith(\"/\")) {\n    url4 = url4 + \"/\";\n  }\n  return url4 + path3;\n}\nfunction appendRootPathToUrlIfNeeded(url4) {\n  try {\n    var parsedUrl = new URL(url4);\n    if (parsedUrl.pathname === \"\") {\n      parsedUrl.pathname = parsedUrl.pathname + \"/\";\n    }\n    return parsedUrl.toString();\n  } catch (_a2) {\n    diag2.warn(\"Could not parse export URL: '\" + url4 + \"'\");\n    return url4;\n  }\n}\nfunction configureExporterTimeout(timeoutMillis) {\n  if (typeof timeoutMillis === \"number\") {\n    if (timeoutMillis <= 0) {\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\nfunction getExporterTimeoutFromEnv() {\n  var _a2;\n  var definedTimeout = Number((_a2 = getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT) !== null && _a2 !== void 0 ? _a2 : getEnv().OTEL_EXPORTER_OTLP_TIMEOUT);\n  if (definedTimeout <= 0) {\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\nfunction invalidTimeout(timeout, defaultTimeout) {\n  diag2.warn(\"Timeout must be greater than 0\", timeout);\n  return defaultTimeout;\n}\nfunction isExportRetryable(statusCode) {\n  var retryCodes = [429, 502, 503, 504];\n  return retryCodes.includes(statusCode);\n}\nfunction parseRetryAfterToMills(retryAfter) {\n  if (retryAfter == null) {\n    return -1;\n  }\n  var seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1e3 : -1;\n  }\n  var delay = new Date(retryAfter).getTime() - Date.now();\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}\n\n// node_modules/@opentelemetry/otlp-exporter-base/build/esm/OTLPExporterBase.js\nvar OTLPExporterBase = (\n  /** @class */\n  function() {\n    function OTLPExporterBase2(config) {\n      if (config === void 0) {\n        config = {};\n      }\n      this._sendingPromises = [];\n      this.url = this.getDefaultUrl(config);\n      if (typeof config.hostname === \"string\") {\n        this.hostname = config.hostname;\n      }\n      this.shutdown = this.shutdown.bind(this);\n      this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n      this._concurrencyLimit = typeof config.concurrencyLimit === \"number\" ? config.concurrencyLimit : 30;\n      this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n      this.onInit(config);\n    }\n    OTLPExporterBase2.prototype.export = function(items, resultCallback) {\n      if (this._shutdownOnce.isCalled) {\n        resultCallback({\n          code: ExportResultCode.FAILED,\n          error: new Error(\"Exporter has been shutdown\")\n        });\n        return;\n      }\n      if (this._sendingPromises.length >= this._concurrencyLimit) {\n        resultCallback({\n          code: ExportResultCode.FAILED,\n          error: new Error(\"Concurrent export limit reached\")\n        });\n        return;\n      }\n      this._export(items).then(function() {\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      }).catch(function(error) {\n        resultCallback({ code: ExportResultCode.FAILED, error });\n      });\n    };\n    OTLPExporterBase2.prototype._export = function(items) {\n      var _this = this;\n      return new Promise(function(resolve, reject) {\n        try {\n          diag2.debug(\"items to be sent\", items);\n          _this.send(items, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    };\n    OTLPExporterBase2.prototype.shutdown = function() {\n      return this._shutdownOnce.call();\n    };\n    OTLPExporterBase2.prototype.forceFlush = function() {\n      return Promise.all(this._sendingPromises).then(function() {\n      });\n    };\n    OTLPExporterBase2.prototype._shutdown = function() {\n      diag2.debug(\"shutdown started\");\n      this.onShutdown();\n      return this.forceFlush();\n    };\n    return OTLPExporterBase2;\n  }()\n);\n\n// node_modules/@opentelemetry/otlp-exporter-base/build/esm/platform/node/util.js\nvar url = __toESM(__webpack_require__(/*! url */ \"url\"));\nvar http = __toESM(__webpack_require__(/*! http */ \"http\"));\nvar https = __toESM(__webpack_require__(/*! https */ \"https\"));\nvar zlib = __toESM(__webpack_require__(/*! zlib */ \"zlib\"));\nvar import_stream = __webpack_require__(/*! stream */ \"stream\");\ninit_esm();\n\n// node_modules/@opentelemetry/otlp-exporter-base/build/esm/platform/node/types.js\nvar CompressionAlgorithm;\n(function(CompressionAlgorithm2) {\n  CompressionAlgorithm2[\"NONE\"] = \"none\";\n  CompressionAlgorithm2[\"GZIP\"] = \"gzip\";\n})(CompressionAlgorithm || (CompressionAlgorithm = {}));\n\n// node_modules/@opentelemetry/otlp-exporter-base/build/esm/platform/node/util.js\ninit_esm3();\n\n// node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js\nvar __extends4 = function() {\n  var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {\n      d2.__proto__ = b2;\n    } || function(d2, b2) {\n      for (var p in b2)\n        if (Object.prototype.hasOwnProperty.call(b2, p))\n          d2[p] = b2[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function(d, b) {\n    if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar OTLPExporterError = (\n  /** @class */\n  function(_super) {\n    __extends4(OTLPExporterError2, _super);\n    function OTLPExporterError2(message, code, data) {\n      var _this = _super.call(this, message) || this;\n      _this.name = \"OTLPExporterError\";\n      _this.data = data;\n      _this.code = code;\n      return _this;\n    }\n    return OTLPExporterError2;\n  }(Error)\n);\n\n// node_modules/@opentelemetry/otlp-exporter-base/build/esm/platform/node/util.js\nvar __assign3 = function() {\n  __assign3 = Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s)\n        if (Object.prototype.hasOwnProperty.call(s, p))\n          t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign3.apply(this, arguments);\n};\nfunction sendWithHttp(collector, data, contentType, onSuccess, onError) {\n  var exporterTimeout = collector.timeoutMillis;\n  var parsedUrl = new url.URL(collector.url);\n  var nodeVersion = Number(process.versions.node.split(\".\")[0]);\n  var retryTimer;\n  var req;\n  var reqIsDestroyed = false;\n  var exporterTimer = setTimeout(function() {\n    clearTimeout(retryTimer);\n    reqIsDestroyed = true;\n    if (req.destroyed) {\n      var err = new OTLPExporterError(\"Request Timeout\");\n      onError(err);\n    } else {\n      nodeVersion >= 14 ? req.destroy() : req.abort();\n    }\n  }, exporterTimeout);\n  var options = {\n    hostname: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname,\n    method: \"POST\",\n    headers: __assign3({ \"Content-Type\": contentType }, collector.headers),\n    agent: collector.agent\n  };\n  var request3 = parsedUrl.protocol === \"http:\" ? http.request : https.request;\n  var sendWithRetry = function(retries, minDelay) {\n    if (retries === void 0) {\n      retries = DEFAULT_EXPORT_MAX_ATTEMPTS;\n    }\n    if (minDelay === void 0) {\n      minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF;\n    }\n    req = request3(options, function(res) {\n      var responseData = \"\";\n      res.on(\"data\", function(chunk) {\n        return responseData += chunk;\n      });\n      res.on(\"aborted\", function() {\n        if (reqIsDestroyed) {\n          var err = new OTLPExporterError(\"Request Timeout\");\n          onError(err);\n        }\n      });\n      res.on(\"end\", function() {\n        if (reqIsDestroyed === false) {\n          if (res.statusCode && res.statusCode < 299) {\n            diag2.debug(\"statusCode: \" + res.statusCode, responseData);\n            onSuccess();\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          } else if (res.statusCode && isExportRetryable(res.statusCode) && retries > 0) {\n            var retryTime = void 0;\n            minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n            if (res.headers[\"retry-after\"]) {\n              retryTime = parseRetryAfterToMills(res.headers[\"retry-after\"]);\n            } else {\n              retryTime = Math.round(Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) + minDelay);\n            }\n            retryTimer = setTimeout(function() {\n              sendWithRetry(retries - 1, minDelay);\n            }, retryTime);\n          } else {\n            var error = new OTLPExporterError(res.statusMessage, res.statusCode, responseData);\n            onError(error);\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          }\n        }\n      });\n    });\n    req.on(\"error\", function(error) {\n      if (reqIsDestroyed) {\n        var err = new OTLPExporterError(\"Request Timeout\", error.code);\n        onError(err);\n      } else {\n        onError(error);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n    req.on(\"abort\", function() {\n      if (reqIsDestroyed) {\n        var err = new OTLPExporterError(\"Request Timeout\");\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n    switch (collector.compression) {\n      case CompressionAlgorithm.GZIP: {\n        req.setHeader(\"Content-Encoding\", \"gzip\");\n        var dataStream = readableFromBuffer(data);\n        dataStream.on(\"error\", onError).pipe(zlib.createGzip()).on(\"error\", onError).pipe(req);\n        break;\n      }\n      default:\n        req.end(data);\n        break;\n    }\n  };\n  sendWithRetry();\n}\nfunction readableFromBuffer(buff) {\n  var readable = new import_stream.Readable();\n  readable.push(buff);\n  readable.push(null);\n  return readable;\n}\nfunction createHttpAgent(config) {\n  if (config.httpAgentOptions && config.keepAlive === false) {\n    diag2.warn(\"httpAgentOptions is used only when keepAlive is true\");\n    return void 0;\n  }\n  if (config.keepAlive === false || !config.url)\n    return void 0;\n  try {\n    var parsedUrl = new url.URL(config.url);\n    var Agent3 = parsedUrl.protocol === \"http:\" ? http.Agent : https.Agent;\n    return new Agent3(__assign3({ keepAlive: true }, config.httpAgentOptions));\n  } catch (err) {\n    diag2.error(\"collector exporter failed to create http agent. err: \" + err.message);\n    return void 0;\n  }\n}\nfunction configureCompression(compression) {\n  if (compression) {\n    return compression;\n  } else {\n    var definedCompression = getEnv().OTEL_EXPORTER_OTLP_TRACES_COMPRESSION || getEnv().OTEL_EXPORTER_OTLP_COMPRESSION;\n    return definedCompression === CompressionAlgorithm.GZIP ? CompressionAlgorithm.GZIP : CompressionAlgorithm.NONE;\n  }\n}\n\n// node_modules/@opentelemetry/otlp-exporter-base/build/esm/platform/node/OTLPExporterNodeBase.js\ninit_esm();\ninit_esm3();\nvar __extends5 = function() {\n  var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {\n      d2.__proto__ = b2;\n    } || function(d2, b2) {\n      for (var p in b2)\n        if (Object.prototype.hasOwnProperty.call(b2, p))\n          d2[p] = b2[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function(d, b) {\n    if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar OTLPExporterNodeBase = (\n  /** @class */\n  function(_super) {\n    __extends5(OTLPExporterNodeBase2, _super);\n    function OTLPExporterNodeBase2(config) {\n      if (config === void 0) {\n        config = {};\n      }\n      var _this = _super.call(this, config) || this;\n      _this.DEFAULT_HEADERS = {};\n      if (config.metadata) {\n        diag2.warn(\"Metadata cannot be set when using http\");\n      }\n      _this.headers = Object.assign(_this.DEFAULT_HEADERS, parseHeaders(config.headers), utils_exports.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_HEADERS));\n      _this.agent = createHttpAgent(config);\n      _this.compression = configureCompression(config.compression);\n      return _this;\n    }\n    OTLPExporterNodeBase2.prototype.onInit = function(_config) {\n    };\n    OTLPExporterNodeBase2.prototype.send = function(objects, onSuccess, onError) {\n      var _this = this;\n      if (this._shutdownOnce.isCalled) {\n        diag2.debug(\"Shutdown already started. Cannot send objects\");\n        return;\n      }\n      var serviceRequest = this.convert(objects);\n      var promise = new Promise(function(resolve, reject) {\n        sendWithHttp(_this, JSON.stringify(serviceRequest), \"application/json\", resolve, reject);\n      }).then(onSuccess, onError);\n      this._sendingPromises.push(promise);\n      var popPromise = function() {\n        var index = _this._sendingPromises.indexOf(promise);\n        _this._sendingPromises.splice(index, 1);\n      };\n      promise.then(popPromise, popPromise);\n    };\n    OTLPExporterNodeBase2.prototype.onShutdown = function() {\n    };\n    return OTLPExporterNodeBase2;\n  }(OTLPExporterBase)\n);\n\n// node_modules/@opentelemetry/otlp-transformer/build/esm/common/index.js\ninit_esm3();\nfunction hrTimeToNanos(hrTime2) {\n  var NANOSECONDS = BigInt(1e9);\n  return BigInt(hrTime2[0]) * NANOSECONDS + BigInt(hrTime2[1]);\n}\nfunction toLongBits(value) {\n  var low = Number(BigInt.asUintN(32, value));\n  var high = Number(BigInt.asUintN(32, value >> BigInt(32)));\n  return { low, high };\n}\nfunction encodeAsLongBits(hrTime2) {\n  var nanos = hrTimeToNanos(hrTime2);\n  return toLongBits(nanos);\n}\nfunction encodeAsString(hrTime2) {\n  var nanos = hrTimeToNanos(hrTime2);\n  return nanos.toString();\n}\nvar encodeTimestamp = typeof BigInt !== \"undefined\" ? encodeAsString : hrTimeToNanoseconds;\nfunction identity(value) {\n  return value;\n}\nfunction optionalHexToBinary(str) {\n  if (str === void 0)\n    return void 0;\n  return hexToBinary(str);\n}\nvar DEFAULT_ENCODER = {\n  encodeHrTime: encodeAsLongBits,\n  encodeSpanContext: hexToBinary,\n  encodeOptionalSpanContext: optionalHexToBinary\n};\nfunction getOtlpEncoder(options) {\n  var _a2, _b;\n  if (options === void 0) {\n    return DEFAULT_ENCODER;\n  }\n  var useLongBits = (_a2 = options.useLongBits) !== null && _a2 !== void 0 ? _a2 : true;\n  var useHex = (_b = options.useHex) !== null && _b !== void 0 ? _b : false;\n  return {\n    encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,\n    encodeSpanContext: useHex ? identity : hexToBinary,\n    encodeOptionalSpanContext: useHex ? identity : optionalHexToBinary\n  };\n}\n\n// node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js\nvar __read17 = function(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m)\n    return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n      ar.push(r.value);\n  } catch (error) {\n    e = { error };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"]))\n        m.call(i);\n    } finally {\n      if (e)\n        throw e.error;\n    }\n  }\n  return ar;\n};\nfunction toAttributes(attributes) {\n  return Object.keys(attributes).map(function(key) {\n    return toKeyValue(key, attributes[key]);\n  });\n}\nfunction toKeyValue(key, value) {\n  return {\n    key,\n    value: toAnyValue(value)\n  };\n}\nfunction toAnyValue(value) {\n  var t = typeof value;\n  if (t === \"string\")\n    return { stringValue: value };\n  if (t === \"number\") {\n    if (!Number.isInteger(value))\n      return { doubleValue: value };\n    return { intValue: value };\n  }\n  if (t === \"boolean\")\n    return { boolValue: value };\n  if (value instanceof Uint8Array)\n    return { bytesValue: value };\n  if (Array.isArray(value))\n    return { arrayValue: { values: value.map(toAnyValue) } };\n  if (t === \"object\" && value != null)\n    return {\n      kvlistValue: {\n        values: Object.entries(value).map(function(_a2) {\n          var _b = __read17(_a2, 2), k = _b[0], v = _b[1];\n          return toKeyValue(k, v);\n        })\n      }\n    };\n  return {};\n}\n\n// node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js\nfunction sdkSpanToOtlpSpan(span, encoder) {\n  var _a2;\n  var ctx = span.spanContext();\n  var status = span.status;\n  return {\n    traceId: encoder.encodeSpanContext(ctx.traceId),\n    spanId: encoder.encodeSpanContext(ctx.spanId),\n    parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),\n    traceState: (_a2 = ctx.traceState) === null || _a2 === void 0 ? void 0 : _a2.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: encoder.encodeHrTime(span.startTime),\n    endTimeUnixNano: encoder.encodeHrTime(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(function(event) {\n      return toOtlpSpanEvent(event, encoder);\n    }),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code,\n      message: status.message\n    },\n    links: span.links.map(function(link) {\n      return toOtlpLink(link, encoder);\n    }),\n    droppedLinksCount: span.droppedLinksCount\n  };\n}\nfunction toOtlpLink(link, encoder) {\n  var _a2;\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: encoder.encodeSpanContext(link.context.spanId),\n    traceId: encoder.encodeSpanContext(link.context.traceId),\n    traceState: (_a2 = link.context.traceState) === null || _a2 === void 0 ? void 0 : _a2.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0\n  };\n}\nfunction toOtlpSpanEvent(timedEvent, encoder) {\n  return {\n    attributes: timedEvent.attributes ? toAttributes(timedEvent.attributes) : [],\n    name: timedEvent.name,\n    timeUnixNano: encoder.encodeHrTime(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0\n  };\n}\n\n// node_modules/@opentelemetry/otlp-transformer/build/esm/trace/index.js\nvar __values11 = function(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m)\n    return m.call(o);\n  if (o && typeof o.length === \"number\")\n    return {\n      next: function() {\n        if (o && i >= o.length)\n          o = void 0;\n        return { value: o && o[i++], done: !o };\n      }\n    };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read18 = function(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m)\n    return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n      ar.push(r.value);\n  } catch (error) {\n    e = { error };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"]))\n        m.call(i);\n    } finally {\n      if (e)\n        throw e.error;\n    }\n  }\n  return ar;\n};\nfunction createExportTraceServiceRequest(spans, options) {\n  var encoder = getOtlpEncoder(options);\n  return {\n    resourceSpans: spanRecordsToResourceSpans(spans, encoder)\n  };\n}\nfunction createResourceMap(readableSpans) {\n  var e_1, _a2;\n  var resourceMap = /* @__PURE__ */ new Map();\n  try {\n    for (var readableSpans_1 = __values11(readableSpans), readableSpans_1_1 = readableSpans_1.next(); !readableSpans_1_1.done; readableSpans_1_1 = readableSpans_1.next()) {\n      var record = readableSpans_1_1.value;\n      var ilmMap = resourceMap.get(record.resource);\n      if (!ilmMap) {\n        ilmMap = /* @__PURE__ */ new Map();\n        resourceMap.set(record.resource, ilmMap);\n      }\n      var instrumentationLibraryKey = record.instrumentationLibrary.name + \"@\" + (record.instrumentationLibrary.version || \"\") + \":\" + (record.instrumentationLibrary.schemaUrl || \"\");\n      var records = ilmMap.get(instrumentationLibraryKey);\n      if (!records) {\n        records = [];\n        ilmMap.set(instrumentationLibraryKey, records);\n      }\n      records.push(record);\n    }\n  } catch (e_1_1) {\n    e_1 = { error: e_1_1 };\n  } finally {\n    try {\n      if (readableSpans_1_1 && !readableSpans_1_1.done && (_a2 = readableSpans_1.return))\n        _a2.call(readableSpans_1);\n    } finally {\n      if (e_1)\n        throw e_1.error;\n    }\n  }\n  return resourceMap;\n}\nfunction spanRecordsToResourceSpans(readableSpans, encoder) {\n  var resourceMap = createResourceMap(readableSpans);\n  var out = [];\n  var entryIterator = resourceMap.entries();\n  var entry = entryIterator.next();\n  while (!entry.done) {\n    var _a2 = __read18(entry.value, 2), resource = _a2[0], ilmMap = _a2[1];\n    var scopeResourceSpans = [];\n    var ilmIterator = ilmMap.values();\n    var ilmEntry = ilmIterator.next();\n    while (!ilmEntry.done) {\n      var scopeSpans = ilmEntry.value;\n      if (scopeSpans.length > 0) {\n        var _b = scopeSpans[0].instrumentationLibrary, name_1 = _b.name, version = _b.version, schemaUrl = _b.schemaUrl;\n        var spans = scopeSpans.map(function(readableSpan) {\n          return sdkSpanToOtlpSpan(readableSpan, encoder);\n        });\n        scopeResourceSpans.push({\n          scope: { name: name_1, version },\n          spans,\n          schemaUrl\n        });\n      }\n      ilmEntry = ilmIterator.next();\n    }\n    var transformedSpans = {\n      resource: {\n        attributes: toAttributes(resource.attributes),\n        droppedAttributesCount: 0\n      },\n      scopeSpans: scopeResourceSpans,\n      schemaUrl: void 0\n    };\n    out.push(transformedSpans);\n    entry = entryIterator.next();\n  }\n  return out;\n}\n\n// node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/version.js\nvar VERSION4 = \"0.50.0\";\n\n// node_modules/@opentelemetry/exporter-trace-otlp-http/build/esm/platform/node/OTLPTraceExporter.js\nvar __extends6 = function() {\n  var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {\n      d2.__proto__ = b2;\n    } || function(d2, b2) {\n      for (var p in b2)\n        if (Object.prototype.hasOwnProperty.call(b2, p))\n          d2[p] = b2[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function(d, b) {\n    if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign4 = function() {\n  __assign4 = Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s)\n        if (Object.prototype.hasOwnProperty.call(s, p))\n          t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign4.apply(this, arguments);\n};\nvar DEFAULT_COLLECTOR_RESOURCE_PATH = \"v1/traces\";\nvar DEFAULT_COLLECTOR_URL = \"http://localhost:4318/\" + DEFAULT_COLLECTOR_RESOURCE_PATH;\nvar USER_AGENT = {\n  \"User-Agent\": \"OTel-OTLP-Exporter-JavaScript/\" + VERSION4\n};\nvar OTLPTraceExporter = (\n  /** @class */\n  function(_super) {\n    __extends6(OTLPTraceExporter2, _super);\n    function OTLPTraceExporter2(config) {\n      if (config === void 0) {\n        config = {};\n      }\n      var _this = _super.call(this, config) || this;\n      _this.headers = __assign4(__assign4(__assign4(__assign4({}, _this.headers), USER_AGENT), utils_exports.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS)), parseHeaders(config === null || config === void 0 ? void 0 : config.headers));\n      return _this;\n    }\n    OTLPTraceExporter2.prototype.convert = function(spans) {\n      return createExportTraceServiceRequest(spans, {\n        useHex: true,\n        useLongBits: false\n      });\n    };\n    OTLPTraceExporter2.prototype.getDefaultUrl = function(config) {\n      return typeof config.url === \"string\" ? config.url : getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0 ? appendRootPathToUrlIfNeeded(getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT) : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0 ? appendResourcePathToUrl(getEnv().OTEL_EXPORTER_OTLP_ENDPOINT, DEFAULT_COLLECTOR_RESOURCE_PATH) : DEFAULT_COLLECTOR_URL;\n    };\n    return OTLPTraceExporter2;\n  }(OTLPExporterNodeBase)\n);\n\n// node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js\ninit_esm();\n\n// node_modules/@opentelemetry/api-logs/build/esm/NoopLogger.js\nvar NoopLogger = (\n  /** @class */\n  function() {\n    function NoopLogger2() {\n    }\n    NoopLogger2.prototype.emit = function(_logRecord) {\n    };\n    return NoopLogger2;\n  }()\n);\nvar NOOP_LOGGER = new NoopLogger();\n\n// node_modules/@opentelemetry/api-logs/build/esm/NoopLoggerProvider.js\nvar NoopLoggerProvider = (\n  /** @class */\n  function() {\n    function NoopLoggerProvider2() {\n    }\n    NoopLoggerProvider2.prototype.getLogger = function(_name, _version, _options) {\n      return new NoopLogger();\n    };\n    return NoopLoggerProvider2;\n  }()\n);\nvar NOOP_LOGGER_PROVIDER = new NoopLoggerProvider();\n\n// node_modules/@opentelemetry/api-logs/build/esm/platform/node/globalThis.js\nvar _globalThis4 = typeof globalThis === \"object\" ? globalThis : global;\n\n// node_modules/@opentelemetry/api-logs/build/esm/internal/global-utils.js\nvar GLOBAL_LOGS_API_KEY = Symbol.for(\"io.opentelemetry.js.api.logs\");\nvar _global2 = _globalThis4;\nfunction makeGetter(requiredVersion, instance, fallback) {\n  return function(version) {\n    return version === requiredVersion ? instance : fallback;\n  };\n}\nvar API_BACKWARDS_COMPATIBILITY_VERSION = 1;\n\n// node_modules/@opentelemetry/api-logs/build/esm/api/logs.js\nvar LogsAPI = (\n  /** @class */\n  function() {\n    function LogsAPI2() {\n    }\n    LogsAPI2.getInstance = function() {\n      if (!this._instance) {\n        this._instance = new LogsAPI2();\n      }\n      return this._instance;\n    };\n    LogsAPI2.prototype.setGlobalLoggerProvider = function(provider) {\n      if (_global2[GLOBAL_LOGS_API_KEY]) {\n        return this.getLoggerProvider();\n      }\n      _global2[GLOBAL_LOGS_API_KEY] = makeGetter(API_BACKWARDS_COMPATIBILITY_VERSION, provider, NOOP_LOGGER_PROVIDER);\n      return provider;\n    };\n    LogsAPI2.prototype.getLoggerProvider = function() {\n      var _a2, _b;\n      return (_b = (_a2 = _global2[GLOBAL_LOGS_API_KEY]) === null || _a2 === void 0 ? void 0 : _a2.call(_global2, API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_LOGGER_PROVIDER;\n    };\n    LogsAPI2.prototype.getLogger = function(name, version, options) {\n      return this.getLoggerProvider().getLogger(name, version, options);\n    };\n    LogsAPI2.prototype.disable = function() {\n      delete _global2[GLOBAL_LOGS_API_KEY];\n    };\n    return LogsAPI2;\n  }()\n);\n\n// node_modules/@opentelemetry/api-logs/build/esm/index.js\nvar logs = LogsAPI.getInstance();\n\n// node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js\nfunction parseInstrumentationOptions(options) {\n  if (options === void 0) {\n    options = [];\n  }\n  var instrumentations = [];\n  for (var i = 0, j = options.length; i < j; i++) {\n    var option = options[i];\n    if (Array.isArray(option)) {\n      var results = parseInstrumentationOptions(option);\n      instrumentations = instrumentations.concat(results.instrumentations);\n    } else if (typeof option === \"function\") {\n      instrumentations.push(new option());\n    } else if (option.instrumentationName) {\n      instrumentations.push(option);\n    }\n  }\n  return { instrumentations };\n}\nfunction enableInstrumentations(instrumentations, tracerProvider, meterProvider, loggerProvider) {\n  for (var i = 0, j = instrumentations.length; i < j; i++) {\n    var instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    if (loggerProvider && instrumentation.setLoggerProvider) {\n      instrumentation.setLoggerProvider(loggerProvider);\n    }\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\nfunction disableInstrumentations(instrumentations) {\n  instrumentations.forEach(function(instrumentation) {\n    return instrumentation.disable();\n  });\n}\n\n// node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js\nfunction registerInstrumentations(options) {\n  var instrumentations = parseInstrumentationOptions(options.instrumentations).instrumentations;\n  var tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  var meterProvider = options.meterProvider || metrics.getMeterProvider();\n  var loggerProvider = options.loggerProvider || logs.getLoggerProvider();\n  enableInstrumentations(instrumentations, tracerProvider, meterProvider, loggerProvider);\n  return function() {\n    disableInstrumentations(instrumentations);\n  };\n}\n\n// node_modules/@opentelemetry/instrumentation/build/esm/platform/node/instrumentation.js\nvar path2 = __toESM(__webpack_require__(/*! path */ \"path\"));\nvar import_util6 = __webpack_require__(/*! util */ \"util\");\nvar import_semver2 = __toESM(require_semver2());\nvar import_shimmer = __toESM(require_shimmer());\n\n// node_modules/@opentelemetry/instrumentation/build/esm/instrumentation.js\ninit_esm();\nvar shimmer = __toESM(require_shimmer());\nvar __assign5 = function() {\n  __assign5 = Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s)\n        if (Object.prototype.hasOwnProperty.call(s, p))\n          t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign5.apply(this, arguments);\n};\nvar InstrumentationAbstract = (\n  /** @class */\n  function() {\n    function InstrumentationAbstract2(instrumentationName, instrumentationVersion, config) {\n      if (config === void 0) {\n        config = {};\n      }\n      this.instrumentationName = instrumentationName;\n      this.instrumentationVersion = instrumentationVersion;\n      this._wrap = shimmer.wrap;\n      this._unwrap = shimmer.unwrap;\n      this._massWrap = shimmer.massWrap;\n      this._massUnwrap = shimmer.massUnwrap;\n      this._config = __assign5({ enabled: true }, config);\n      this._diag = diag2.createComponentLogger({\n        namespace: instrumentationName\n      });\n      this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n      this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n      this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n      this._updateMetricInstruments();\n    }\n    Object.defineProperty(InstrumentationAbstract2.prototype, \"meter\", {\n      /* Returns meter */\n      get: function() {\n        return this._meter;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    InstrumentationAbstract2.prototype.setMeterProvider = function(meterProvider) {\n      this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n      this._updateMetricInstruments();\n    };\n    Object.defineProperty(InstrumentationAbstract2.prototype, \"logger\", {\n      /* Returns logger */\n      get: function() {\n        return this._logger;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    InstrumentationAbstract2.prototype.setLoggerProvider = function(loggerProvider) {\n      this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);\n    };\n    InstrumentationAbstract2.prototype.getModuleDefinitions = function() {\n      var _a2;\n      var initResult = (_a2 = this.init()) !== null && _a2 !== void 0 ? _a2 : [];\n      if (!Array.isArray(initResult)) {\n        return [initResult];\n      }\n      return initResult;\n    };\n    InstrumentationAbstract2.prototype._updateMetricInstruments = function() {\n      return;\n    };\n    InstrumentationAbstract2.prototype.getConfig = function() {\n      return this._config;\n    };\n    InstrumentationAbstract2.prototype.setConfig = function(config) {\n      if (config === void 0) {\n        config = {};\n      }\n      this._config = Object.assign({}, config);\n    };\n    InstrumentationAbstract2.prototype.setTracerProvider = function(tracerProvider) {\n      this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n    };\n    Object.defineProperty(InstrumentationAbstract2.prototype, \"tracer\", {\n      /* Returns tracer */\n      get: function() {\n        return this._tracer;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return InstrumentationAbstract2;\n  }()\n);\n\n// node_modules/@opentelemetry/instrumentation/build/esm/platform/node/RequireInTheMiddleSingleton.js\nvar import_require_in_the_middle = __toESM(require_require_in_the_middle());\nvar path = __toESM(__webpack_require__(/*! path */ \"path\"));\n\n// node_modules/@opentelemetry/instrumentation/build/esm/platform/node/ModuleNameTrie.js\nvar __values12 = function(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m)\n    return m.call(o);\n  if (o && typeof o.length === \"number\")\n    return {\n      next: function() {\n        if (o && i >= o.length)\n          o = void 0;\n        return { value: o && o[i++], done: !o };\n      }\n    };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read19 = function(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m)\n    return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n      ar.push(r.value);\n  } catch (error) {\n    e = { error };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"]))\n        m.call(i);\n    } finally {\n      if (e)\n        throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray8 = function(to, from, pack) {\n  if (pack || arguments.length === 2)\n    for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar)\n          ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar ModuleNameSeparator = \"/\";\nvar ModuleNameTrieNode = (\n  /** @class */\n  function() {\n    function ModuleNameTrieNode2() {\n      this.hooks = [];\n      this.children = /* @__PURE__ */ new Map();\n    }\n    return ModuleNameTrieNode2;\n  }()\n);\nvar ModuleNameTrie = (\n  /** @class */\n  function() {\n    function ModuleNameTrie2() {\n      this._trie = new ModuleNameTrieNode();\n      this._counter = 0;\n    }\n    ModuleNameTrie2.prototype.insert = function(hook) {\n      var e_1, _a2;\n      var trieNode = this._trie;\n      try {\n        for (var _b = __values12(hook.moduleName.split(ModuleNameSeparator)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var moduleNamePart = _c.value;\n          var nextNode = trieNode.children.get(moduleNamePart);\n          if (!nextNode) {\n            nextNode = new ModuleNameTrieNode();\n            trieNode.children.set(moduleNamePart, nextNode);\n          }\n          trieNode = nextNode;\n        }\n      } catch (e_1_1) {\n        e_1 = { error: e_1_1 };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a2 = _b.return))\n            _a2.call(_b);\n        } finally {\n          if (e_1)\n            throw e_1.error;\n        }\n      }\n      trieNode.hooks.push({ hook, insertedId: this._counter++ });\n    };\n    ModuleNameTrie2.prototype.search = function(moduleName, _a2) {\n      var e_2, _b;\n      var _c = _a2 === void 0 ? {} : _a2, maintainInsertionOrder = _c.maintainInsertionOrder, fullOnly = _c.fullOnly;\n      var trieNode = this._trie;\n      var results = [];\n      var foundFull = true;\n      try {\n        for (var _d = __values12(moduleName.split(ModuleNameSeparator)), _e = _d.next(); !_e.done; _e = _d.next()) {\n          var moduleNamePart = _e.value;\n          var nextNode = trieNode.children.get(moduleNamePart);\n          if (!nextNode) {\n            foundFull = false;\n            break;\n          }\n          if (!fullOnly) {\n            results.push.apply(results, __spreadArray8([], __read19(nextNode.hooks), false));\n          }\n          trieNode = nextNode;\n        }\n      } catch (e_2_1) {\n        e_2 = { error: e_2_1 };\n      } finally {\n        try {\n          if (_e && !_e.done && (_b = _d.return))\n            _b.call(_d);\n        } finally {\n          if (e_2)\n            throw e_2.error;\n        }\n      }\n      if (fullOnly && foundFull) {\n        results.push.apply(results, __spreadArray8([], __read19(trieNode.hooks), false));\n      }\n      if (results.length === 0) {\n        return [];\n      }\n      if (results.length === 1) {\n        return [results[0].hook];\n      }\n      if (maintainInsertionOrder) {\n        results.sort(function(a, b) {\n          return a.insertedId - b.insertedId;\n        });\n      }\n      return results.map(function(_a3) {\n        var hook = _a3.hook;\n        return hook;\n      });\n    };\n    return ModuleNameTrie2;\n  }()\n);\n\n// node_modules/@opentelemetry/instrumentation/build/esm/platform/node/RequireInTheMiddleSingleton.js\nvar __values13 = function(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m)\n    return m.call(o);\n  if (o && typeof o.length === \"number\")\n    return {\n      next: function() {\n        if (o && i >= o.length)\n          o = void 0;\n        return { value: o && o[i++], done: !o };\n      }\n    };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar isMocha = [\n  \"afterEach\",\n  \"after\",\n  \"beforeEach\",\n  \"before\",\n  \"describe\",\n  \"it\"\n].every(function(fn) {\n  return typeof global[fn] === \"function\";\n});\nvar RequireInTheMiddleSingleton = (\n  /** @class */\n  function() {\n    function RequireInTheMiddleSingleton2() {\n      this._moduleNameTrie = new ModuleNameTrie();\n      this._initialize();\n    }\n    RequireInTheMiddleSingleton2.prototype._initialize = function() {\n      var _this = this;\n      new import_require_in_the_middle.Hook(\n        // Intercept all `require` calls; we will filter the matching ones below\n        null,\n        { internals: true },\n        function(exports, name, basedir) {\n          var e_1, _a2;\n          var normalizedModuleName = normalizePathSeparators(name);\n          var matches = _this._moduleNameTrie.search(normalizedModuleName, {\n            maintainInsertionOrder: true,\n            // For core modules (e.g. `fs`), do not match on sub-paths (e.g. `fs/promises').\n            // This matches the behavior of `require-in-the-middle`.\n            // `basedir` is always `undefined` for core modules.\n            fullOnly: basedir === void 0\n          });\n          try {\n            for (var matches_1 = __values13(matches), matches_1_1 = matches_1.next(); !matches_1_1.done; matches_1_1 = matches_1.next()) {\n              var onRequire = matches_1_1.value.onRequire;\n              exports = onRequire(exports, name, basedir);\n            }\n          } catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n          } finally {\n            try {\n              if (matches_1_1 && !matches_1_1.done && (_a2 = matches_1.return))\n                _a2.call(matches_1);\n            } finally {\n              if (e_1)\n                throw e_1.error;\n            }\n          }\n          return exports;\n        }\n      );\n    };\n    RequireInTheMiddleSingleton2.prototype.register = function(moduleName, onRequire) {\n      var hooked = { moduleName, onRequire };\n      this._moduleNameTrie.insert(hooked);\n      return hooked;\n    };\n    RequireInTheMiddleSingleton2.getInstance = function() {\n      var _a2;\n      if (isMocha)\n        return new RequireInTheMiddleSingleton2();\n      return this._instance = (_a2 = this._instance) !== null && _a2 !== void 0 ? _a2 : new RequireInTheMiddleSingleton2();\n    };\n    return RequireInTheMiddleSingleton2;\n  }()\n);\nfunction normalizePathSeparators(moduleNameOrPath) {\n  return path.sep !== ModuleNameSeparator ? moduleNameOrPath.split(path.sep).join(ModuleNameSeparator) : moduleNameOrPath;\n}\n\n// node_modules/@opentelemetry/instrumentation/build/esm/platform/node/instrumentation.js\nvar import_import_in_the_middle = __toESM(require_import_in_the_middle());\ninit_esm();\nvar import_require_in_the_middle2 = __toESM(require_require_in_the_middle());\nvar __extends7 = function() {\n  var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {\n      d2.__proto__ = b2;\n    } || function(d2, b2) {\n      for (var p in b2)\n        if (Object.prototype.hasOwnProperty.call(b2, p))\n          d2[p] = b2[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function(d, b) {\n    if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values14 = function(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m)\n    return m.call(o);\n  if (o && typeof o.length === \"number\")\n    return {\n      next: function() {\n        if (o && i >= o.length)\n          o = void 0;\n        return { value: o && o[i++], done: !o };\n      }\n    };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar InstrumentationBase = (\n  /** @class */\n  function(_super) {\n    __extends7(InstrumentationBase2, _super);\n    function InstrumentationBase2(instrumentationName, instrumentationVersion, config) {\n      if (config === void 0) {\n        config = {};\n      }\n      var _this = _super.call(this, instrumentationName, instrumentationVersion, config) || this;\n      _this._hooks = [];\n      _this._requireInTheMiddleSingleton = RequireInTheMiddleSingleton.getInstance();\n      _this._enabled = false;\n      _this._wrap = function(moduleExports, name, wrapper) {\n        if (!import_util6.types.isProxy(moduleExports)) {\n          return (0, import_shimmer.wrap)(moduleExports, name, wrapper);\n        } else {\n          var wrapped = (0, import_shimmer.wrap)(Object.assign({}, moduleExports), name, wrapper);\n          return Object.defineProperty(moduleExports, name, {\n            value: wrapped\n          });\n        }\n      };\n      _this._unwrap = function(moduleExports, name) {\n        if (!import_util6.types.isProxy(moduleExports)) {\n          return (0, import_shimmer.unwrap)(moduleExports, name);\n        } else {\n          return Object.defineProperty(moduleExports, name, {\n            value: moduleExports[name]\n          });\n        }\n      };\n      _this._massWrap = function(moduleExportsArray, names, wrapper) {\n        if (!moduleExportsArray) {\n          diag2.error(\"must provide one or more modules to patch\");\n          return;\n        } else if (!Array.isArray(moduleExportsArray)) {\n          moduleExportsArray = [moduleExportsArray];\n        }\n        if (!(names && Array.isArray(names))) {\n          diag2.error(\"must provide one or more functions to wrap on modules\");\n          return;\n        }\n        moduleExportsArray.forEach(function(moduleExports) {\n          names.forEach(function(name) {\n            _this._wrap(moduleExports, name, wrapper);\n          });\n        });\n      };\n      _this._massUnwrap = function(moduleExportsArray, names) {\n        if (!moduleExportsArray) {\n          diag2.error(\"must provide one or more modules to patch\");\n          return;\n        } else if (!Array.isArray(moduleExportsArray)) {\n          moduleExportsArray = [moduleExportsArray];\n        }\n        if (!(names && Array.isArray(names))) {\n          diag2.error(\"must provide one or more functions to wrap on modules\");\n          return;\n        }\n        moduleExportsArray.forEach(function(moduleExports) {\n          names.forEach(function(name) {\n            _this._unwrap(moduleExports, name);\n          });\n        });\n      };\n      var modules = _this.init();\n      if (modules && !Array.isArray(modules)) {\n        modules = [modules];\n      }\n      _this._modules = modules || [];\n      if (_this._modules.length === 0) {\n        diag2.debug(\"No modules instrumentation has been defined for \" + (\"'\" + _this.instrumentationName + \"@\" + _this.instrumentationVersion + \"'\") + \", nothing will be patched\");\n      }\n      if (_this._config.enabled) {\n        _this.enable();\n      }\n      return _this;\n    }\n    InstrumentationBase2.prototype._warnOnPreloadedModules = function() {\n      var _this = this;\n      this._modules.forEach(function(module2) {\n        var name = module2.name;\n        try {\n          var resolvedModule = /*require.resolve*/(__webpack_require__(\"(instrument)/../../node_modules/.pnpm/@baselime+node-opentelemetry@0.5.8_@trpc+server@10.45.2/node_modules/@baselime/node-opentelemetry/dist sync recursive\").resolve(name));\n          if (__webpack_require__.c[resolvedModule]) {\n            _this._diag.warn(\"Module \" + name + \" has been loaded before \" + _this.instrumentationName + \" so it might not work, please initialize it before requiring \" + name);\n          }\n        } catch (_a2) {\n        }\n      });\n    };\n    InstrumentationBase2.prototype._extractPackageVersion = function(baseDir) {\n      try {\n        var version = __webpack_require__(\"(instrument)/../../node_modules/.pnpm/@baselime+node-opentelemetry@0.5.8_@trpc+server@10.45.2/node_modules/@baselime/node-opentelemetry/dist sync recursive\")(path2.join(baseDir, \"package.json\")).version;\n        return typeof version === \"string\" ? version : void 0;\n      } catch (error) {\n        diag2.warn(\"Failed extracting version\", baseDir);\n      }\n      return void 0;\n    };\n    InstrumentationBase2.prototype._onRequire = function(module2, exports, name, baseDir) {\n      var _this = this;\n      var _a2;\n      if (!baseDir) {\n        if (typeof module2.patch === \"function\") {\n          module2.moduleExports = exports;\n          if (this._enabled) {\n            return module2.patch(exports);\n          }\n        }\n        return exports;\n      }\n      var version = this._extractPackageVersion(baseDir);\n      module2.moduleVersion = version;\n      if (module2.name === name) {\n        if (isSupported(module2.supportedVersions, version, module2.includePrerelease)) {\n          if (typeof module2.patch === \"function\") {\n            module2.moduleExports = exports;\n            if (this._enabled) {\n              return module2.patch(exports, module2.moduleVersion);\n            }\n          }\n        }\n        return exports;\n      }\n      var files = (_a2 = module2.files) !== null && _a2 !== void 0 ? _a2 : [];\n      var normalizedName = path2.normalize(name);\n      var supportedFileInstrumentations = files.filter(function(f) {\n        return f.name === normalizedName;\n      }).filter(function(f) {\n        return isSupported(f.supportedVersions, version, module2.includePrerelease);\n      });\n      return supportedFileInstrumentations.reduce(function(patchedExports, file) {\n        file.moduleExports = patchedExports;\n        if (_this._enabled) {\n          return file.patch(patchedExports, module2.moduleVersion);\n        }\n        return patchedExports;\n      }, exports);\n    };\n    InstrumentationBase2.prototype.enable = function() {\n      var e_1, _a2, e_2, _b, e_3, _c;\n      var _this = this;\n      if (this._enabled) {\n        return;\n      }\n      this._enabled = true;\n      if (this._hooks.length > 0) {\n        try {\n          for (var _d = __values14(this._modules), _e = _d.next(); !_e.done; _e = _d.next()) {\n            var module_1 = _e.value;\n            if (typeof module_1.patch === \"function\" && module_1.moduleExports) {\n              module_1.patch(module_1.moduleExports, module_1.moduleVersion);\n            }\n            try {\n              for (var _f = (e_2 = void 0, __values14(module_1.files)), _g = _f.next(); !_g.done; _g = _f.next()) {\n                var file = _g.value;\n                if (file.moduleExports) {\n                  file.patch(file.moduleExports, module_1.moduleVersion);\n                }\n              }\n            } catch (e_2_1) {\n              e_2 = { error: e_2_1 };\n            } finally {\n              try {\n                if (_g && !_g.done && (_b = _f.return))\n                  _b.call(_f);\n              } finally {\n                if (e_2)\n                  throw e_2.error;\n              }\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = { error: e_1_1 };\n        } finally {\n          try {\n            if (_e && !_e.done && (_a2 = _d.return))\n              _a2.call(_d);\n          } finally {\n            if (e_1)\n              throw e_1.error;\n          }\n        }\n        return;\n      }\n      this._warnOnPreloadedModules();\n      var _loop_1 = function(module_22) {\n        var hookFn = function(exports, name, baseDir) {\n          return _this._onRequire(module_22, exports, name, baseDir);\n        };\n        var onRequire = function(exports, name, baseDir) {\n          return _this._onRequire(module_22, exports, name, baseDir);\n        };\n        var hook = path2.isAbsolute(module_22.name) ? new import_require_in_the_middle2.Hook([module_22.name], { internals: true }, onRequire) : this_1._requireInTheMiddleSingleton.register(module_22.name, onRequire);\n        this_1._hooks.push(hook);\n        var esmHook = new import_import_in_the_middle.default([module_22.name], { internals: false }, hookFn);\n        this_1._hooks.push(esmHook);\n      };\n      var this_1 = this;\n      try {\n        for (var _h = __values14(this._modules), _j = _h.next(); !_j.done; _j = _h.next()) {\n          var module_2 = _j.value;\n          _loop_1(module_2);\n        }\n      } catch (e_3_1) {\n        e_3 = { error: e_3_1 };\n      } finally {\n        try {\n          if (_j && !_j.done && (_c = _h.return))\n            _c.call(_h);\n        } finally {\n          if (e_3)\n            throw e_3.error;\n        }\n      }\n    };\n    InstrumentationBase2.prototype.disable = function() {\n      var e_4, _a2, e_5, _b;\n      if (!this._enabled) {\n        return;\n      }\n      this._enabled = false;\n      try {\n        for (var _c = __values14(this._modules), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var module_3 = _d.value;\n          if (typeof module_3.unpatch === \"function\" && module_3.moduleExports) {\n            module_3.unpatch(module_3.moduleExports, module_3.moduleVersion);\n          }\n          try {\n            for (var _e = (e_5 = void 0, __values14(module_3.files)), _f = _e.next(); !_f.done; _f = _e.next()) {\n              var file = _f.value;\n              if (file.moduleExports) {\n                file.unpatch(file.moduleExports, module_3.moduleVersion);\n              }\n            }\n          } catch (e_5_1) {\n            e_5 = { error: e_5_1 };\n          } finally {\n            try {\n              if (_f && !_f.done && (_b = _e.return))\n                _b.call(_e);\n            } finally {\n              if (e_5)\n                throw e_5.error;\n            }\n          }\n        }\n      } catch (e_4_1) {\n        e_4 = { error: e_4_1 };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a2 = _c.return))\n            _a2.call(_c);\n        } finally {\n          if (e_4)\n            throw e_4.error;\n        }\n      }\n    };\n    InstrumentationBase2.prototype.isEnabled = function() {\n      return this._enabled;\n    };\n    return InstrumentationBase2;\n  }(InstrumentationAbstract)\n);\nfunction isSupported(supportedVersions, version, includePrerelease) {\n  if (typeof version === \"undefined\") {\n    return supportedVersions.includes(\"*\");\n  }\n  return supportedVersions.some(function(supportedVersion) {\n    return (0, import_semver2.satisfies)(version, supportedVersion, { includePrerelease });\n  });\n}\n\n// node_modules/@opentelemetry/instrumentation/build/esm/instrumentationNodeModuleDefinition.js\nvar InstrumentationNodeModuleDefinition = (\n  /** @class */\n  function() {\n    function InstrumentationNodeModuleDefinition2(name, supportedVersions, patch, unpatch, files) {\n      this.name = name;\n      this.supportedVersions = supportedVersions;\n      this.patch = patch;\n      this.unpatch = unpatch;\n      this.files = files || [];\n    }\n    return InstrumentationNodeModuleDefinition2;\n  }()\n);\n\n// node_modules/@opentelemetry/instrumentation/build/esm/utils.js\nfunction safeExecuteInTheMiddle(execute, onFinish, preventThrowingError) {\n  var error;\n  var result;\n  try {\n    result = execute();\n  } catch (e) {\n    error = e;\n  } finally {\n    onFinish(error, result);\n    if (error && !preventThrowingError) {\n      throw error;\n    }\n    return result;\n  }\n}\nfunction isWrapped2(func) {\n  return typeof func === \"function\" && typeof func.__original === \"function\" && typeof func.__unwrap === \"function\" && func.__wrapped === true;\n}\n\n// src/baselime.ts\nvar import_fs3 = __webpack_require__(/*! fs */ \"fs\");\n\n// src/resources/service.ts\ninit_esm5();\nvar ServiceDetector = class {\n  serviceName;\n  attributes;\n  constructor(config) {\n    this.serviceName = config?.serviceName || process.env.OTEL_SERVICE_NAME;\n    this.attributes = config?.attributes instanceof Resource ? config.attributes.attributes : config?.attributes || {};\n  }\n  detect(_config) {\n    if (!this.serviceName || !this.attributes) {\n      return Resource.empty();\n    }\n    const attributes = {\n      \"service.name\": this.serviceName,\n      \"service.namespace\": this.serviceName,\n      ...this.attributes\n    };\n    return new Resource(attributes);\n  }\n};\n\n// src/resources/koyeb.ts\ninit_esm5();\ninit_esm2();\nvar KoyebDetector = class {\n  detect(_config) {\n    if (!process.env.KOYEB_APP_NAME) {\n      return Resource.empty();\n    }\n    const portProtocols = Object.keys(process.env).filter((key) => key.startsWith(\"KOYEB_PORT_\"));\n    const protocols = portProtocols.reduce((sum, el) => ({\n      ...sum,\n      [el.replace(\"_\", \".\").toLowerCase()]: process.env[el]\n    }), {});\n    const attributes = {\n      [SemanticResourceAttributes.CLOUD_PROVIDER]: String(\n        \"Koyeb\"\n      ),\n      [SemanticResourceAttributes.CLOUD_PLATFORM]: String(\n        \"Koyeb MicroVM\"\n      ),\n      [SemanticResourceAttributes.CLOUD_REGION]: String(process.env.KOYEB_DC),\n      \"koyeb.app.name\": String(process.env.KOYEB_APP_NAME),\n      \"koyeb.app.id\": String(process.env.KOYEB_APP_ID),\n      \"koyeb.organization.name\": String(process.env.KOYEB_ORGANIZATION_NAME),\n      \"koyeb.organization.id\": String(process.env.KOYEB_ORGANIZATION_ID),\n      \"koyeb.service.name\": String(process.env.KOYEB_SERVICE_NAME),\n      \"koyeb.service.id\": String(process.env.KOYEB_SERVICE_ID),\n      \"koyeb.service.privateDomain\": String(process.env.KOYEB_SERVICE_PRIVATE_DOMAIN),\n      \"koyeb.publicDomain\": String(process.env.KOYEB_PUBLIC_DOMAIN),\n      \"koyeb.region\": String(process.env.KOYEB_REGION),\n      \"koyeb.regionalDeploymentId\": String(process.env.KOYEB_REGIONAL_DEPLOYMENT_ID),\n      \"koyeb.instance.id\": String(process.env.KOYEB_INSTANCE_ID),\n      \"koyeb.instance.type\": String(process.env.KOYEB_INSTANCE_TYPE),\n      \"koyeb.instance.memory\": String(process.env.KOYEB_INSTANCE_MEMORY_MB),\n      \"koyeb.privileged\": process.env.KOYEB_PRIVILEGED === \"true\",\n      \"koyeb.hypervisor.id\": String(process.env.KOYEB_HYPERVISOR_ID),\n      \"koyeb.dc\": String(process.env.KOYEB_DC),\n      \"koyeb.docker.ref\": String(process.env.KOYEB_DOCKER_REF),\n      \"koyeb.git.sha\": String(process.env.KOYEB_GIT_SHA),\n      \"koyeb.git.branch\": String(process.env.KOYEB_GIT_BRANCH),\n      \"koyeb.git.commit.author\": String(process.env.KOYEB_GIT_COMMIT_AUTHOR),\n      \"koyeb.git.commit.message\": String(process.env.KOYEB_GIT_COMMIT_MESSAGE),\n      \"koyeb.git.repository\": String(process.env.KOYEB_GIT_REPOSITORY),\n      ...protocols,\n      // SET OTEL SPECIAL ATTRIBUTES\n      \"service.name\": String(process.env.KOYEB_APP_NAME),\n      \"service.namespace\": String(process.env.KOYEB_SERVICE_NAME)\n    };\n    return new Resource(attributes);\n  }\n};\n\n// src/baselime.ts\nvar BaselimeSDK = class {\n  options;\n  attributes;\n  constructor(options) {\n    options.serverless = options.serverless || false;\n    options.collectorUrl = options.collectorUrl || process.env.COLLECTOR_URL || \"https://otel.baselime.io/v1\";\n    options.baselimeKey = options.baselimeKey || process.env.BASELIME_API_KEY || process.env.BASELIME_KEY;\n    this.options = options;\n  }\n  start() {\n    if (process.env.OTEL_LOG_LEVEL === \"debug\") {\n      esm_default.diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.ALL);\n    }\n    const provider = new import_sdk_trace_node.NodeTracerProvider({\n      sampler: this.options.sampler,\n      resource: detectResourcesSync({\n        detectors: [\n          import_resource_detector_aws.awsLambdaDetector,\n          new VercelDetector(),\n          new KoyebDetector(),\n          ...this.options.resourceDetectors || [],\n          new ServiceDetector({ serviceName: this.options.service, attributes: this.options.resourceAttributes })\n        ]\n      }),\n      forceFlushTimeoutMillis: 5e3\n    });\n    let exporter = void 0;\n    if (!this.options.baselimeKey) {\n      console.warn(\"No Baselime API key provided. Traces will not be sent to Baselime.\");\n    }\n    if (this.options.baselimeKey) {\n      let collectorUrl = this.options.collectorUrl;\n      if ((0, import_fs3.existsSync)(\"/opt/extensions/baselime\")) {\n        collectorUrl = \"http://sandbox:4323/otel\";\n      }\n      exporter = new OTLPTraceExporter({\n        url: collectorUrl,\n        headers: {\n          \"x-api-key\": this.options.baselimeKey || process.env.BASELIME_KEY || process.env.BASELIME_OTEL_KEY\n        },\n        timeoutMillis: 1e3\n      });\n    }\n    if (this.options.log) {\n      exporter = new import_sdk_trace_node.ConsoleSpanExporter();\n    }\n    if (exporter) {\n      const spanProcessor = this.options.serverless ? new import_sdk_trace_node.SimpleSpanProcessor(exporter) : new import_sdk_trace_node.BatchSpanProcessor(exporter, {\n        maxQueueSize: 100,\n        maxExportBatchSize: 5\n      });\n      provider.addSpanProcessor(spanProcessor);\n    }\n    provider.register();\n    registerInstrumentations({\n      instrumentations: [\n        ...this.options.instrumentations || []\n      ]\n    });\n    return provider;\n  }\n};\n\n// src/http.ts\nvar import_http = __webpack_require__(/*! http */ \"http\");\n\n// node_modules/flat/index.js\nfunction isBuffer(obj) {\n  return obj && obj.constructor && typeof obj.constructor.isBuffer === \"function\" && obj.constructor.isBuffer(obj);\n}\nfunction keyIdentity(key) {\n  return key;\n}\nfunction flatten(target, opts) {\n  opts = opts || {};\n  const delimiter = opts.delimiter || \".\";\n  const maxDepth = opts.maxDepth;\n  const transformKey = opts.transformKey || keyIdentity;\n  const output = {};\n  function step(object, prev, currentDepth) {\n    currentDepth = currentDepth || 1;\n    Object.keys(object).forEach(function(key) {\n      const value = object[key];\n      const isarray = opts.safe && Array.isArray(value);\n      const type = Object.prototype.toString.call(value);\n      const isbuffer = isBuffer(value);\n      const isobject = type === \"[object Object]\" || type === \"[object Array]\";\n      const newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);\n      if (!isarray && !isbuffer && isobject && Object.keys(value).length && (!opts.maxDepth || currentDepth < maxDepth)) {\n        return step(value, newKey, currentDepth + 1);\n      }\n      output[newKey] = value;\n    });\n  }\n  step(target);\n  return output;\n}\n\n// src/http/index.ts\ninit_esm();\ninit_esm3();\nvar url3 = __toESM(__webpack_require__(/*! url */ \"url\"), 1);\n\n// src/http/utils.ts\ninit_esm();\ninit_esm2();\ninit_esm3();\nvar url2 = __toESM(__webpack_require__(/*! url */ \"url\"), 1);\nvar getAbsoluteUrl = (requestUrl, headers, fallbackProtocol = \"http:\") => {\n  const reqUrlObject = requestUrl || {};\n  const protocol = reqUrlObject.protocol || fallbackProtocol;\n  const port = (reqUrlObject.port || \"\").toString();\n  const path3 = reqUrlObject.path || \"/\";\n  let host = reqUrlObject.host || reqUrlObject.hostname || headers.host || \"localhost\";\n  if (host.indexOf(\":\") === -1 && port && port !== \"80\" && port !== \"443\") {\n    host += `:${port}`;\n  }\n  return `${protocol}//${host}${path3}`;\n};\nvar parseResponseStatus = (kind, statusCode) => {\n  const upperBound = kind === SpanKind.CLIENT ? 400 : 500;\n  if (statusCode && statusCode >= 100 && statusCode < upperBound) {\n    return SpanStatusCode.UNSET;\n  }\n  return SpanStatusCode.ERROR;\n};\nvar satisfiesPattern = (constant, pattern) => {\n  if (typeof pattern === \"string\") {\n    return pattern === constant;\n  } else if (pattern instanceof RegExp) {\n    return pattern.test(constant);\n  } else if (typeof pattern === \"function\") {\n    return pattern(constant);\n  } else {\n    throw new TypeError(\"Pattern is in unsupported datatype\");\n  }\n};\nvar isIgnored = (constant, list, onException) => {\n  if (!list) {\n    return false;\n  }\n  try {\n    for (const pattern of list) {\n      if (satisfiesPattern(constant, pattern)) {\n        return true;\n      }\n    }\n  } catch (e) {\n    if (onException) {\n      onException(e);\n    }\n  }\n  return false;\n};\nvar setSpanWithError = (span, error) => {\n  const message = error.message;\n  span.setAttributes({\n    [\"http.error_name\" /* HTTP_ERROR_NAME */]: error.name,\n    [\"http.error_message\" /* HTTP_ERROR_MESSAGE */]: message\n  });\n  span.setStatus({ code: SpanStatusCode.ERROR, message });\n  span.recordException(error);\n};\nvar setRequestContentLengthAttribute = (request3, attributes) => {\n  const length = getContentLength(request3.headers);\n  if (length === null)\n    return;\n  if (isCompressed(request3.headers)) {\n    attributes[SemanticAttributes.HTTP_REQUEST_CONTENT_LENGTH] = length;\n  } else {\n    attributes[SemanticAttributes.HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED] = length;\n  }\n};\nvar setResponseContentLengthAttribute = (response, attributes) => {\n  const length = getContentLength(response.headers);\n  if (length === null)\n    return;\n  if (isCompressed(response.headers)) {\n    attributes[SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH] = length;\n  } else {\n    attributes[SemanticAttributes.HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED] = length;\n  }\n};\nfunction getContentLength(headers) {\n  const contentLengthHeader = headers[\"content-length\"];\n  if (contentLengthHeader === void 0)\n    return null;\n  const contentLength = parseInt(contentLengthHeader, 10);\n  if (isNaN(contentLength))\n    return null;\n  return contentLength;\n}\nvar isCompressed = (headers) => {\n  const encoding = headers[\"content-encoding\"];\n  return !!encoding && encoding !== \"identity\";\n};\nvar getRequestInfo = (options, extraOptions) => {\n  let pathname = \"/\";\n  let origin = \"\";\n  let optionsParsed;\n  if (typeof options === \"string\") {\n    optionsParsed = url2.parse(options);\n    pathname = optionsParsed.pathname || \"/\";\n    origin = `${optionsParsed.protocol || \"http:\"}//${optionsParsed.host}`;\n    if (extraOptions !== void 0) {\n      Object.assign(optionsParsed, extraOptions);\n    }\n  } else if (options instanceof url2.URL) {\n    optionsParsed = {\n      protocol: options.protocol,\n      hostname: typeof options.hostname === \"string\" && options.hostname.startsWith(\"[\") ? options.hostname.slice(1, -1) : options.hostname,\n      path: `${options.pathname || \"\"}${options.search || \"\"}`\n    };\n    if (options.port !== \"\") {\n      optionsParsed.port = Number(options.port);\n    }\n    if (options.username || options.password) {\n      optionsParsed.auth = `${options.username}:${options.password}`;\n    }\n    pathname = options.pathname;\n    origin = options.origin;\n    if (extraOptions !== void 0) {\n      Object.assign(optionsParsed, extraOptions);\n    }\n  } else {\n    optionsParsed = Object.assign(\n      { protocol: options.host ? \"http:\" : void 0 },\n      options\n    );\n    pathname = options.pathname;\n    if (!pathname && optionsParsed.path) {\n      pathname = url2.parse(optionsParsed.path).pathname || \"/\";\n    }\n    const hostname2 = optionsParsed.host || (optionsParsed.port != null ? `${optionsParsed.hostname}${optionsParsed.port}` : optionsParsed.hostname);\n    origin = `${optionsParsed.protocol || \"http:\"}//${hostname2}`;\n  }\n  const method = optionsParsed.method ? optionsParsed.method.toUpperCase() : \"GET\";\n  return { origin, pathname, method, optionsParsed };\n};\nvar isValidOptionsType = (options) => {\n  if (!options) {\n    return false;\n  }\n  const type = typeof options;\n  return type === \"string\" || type === \"object\" && !Array.isArray(options);\n};\nvar extractHostnameAndPort = (requestOptions) => {\n  if (requestOptions.hostname && requestOptions.port) {\n    return { hostname: requestOptions.hostname, port: requestOptions.port };\n  }\n  const matches = requestOptions.host?.match(/^([^:/ ]+)(:\\d{1,5})?/) || null;\n  const hostname2 = requestOptions.hostname || (matches === null ? \"localhost\" : matches[1]);\n  let port = requestOptions.port;\n  if (!port) {\n    if (matches && matches[2]) {\n      port = matches[2].substring(1);\n    } else {\n      port = requestOptions.protocol === \"https:\" ? \"443\" : \"80\";\n    }\n  }\n  return { hostname: hostname2, port };\n};\nvar getOutgoingRequestAttributes = (requestOptions, options) => {\n  const hostname2 = options.hostname;\n  const port = options.port;\n  const requestMethod = requestOptions.method;\n  const method = requestMethod ? requestMethod.toUpperCase() : \"GET\";\n  const headers = requestOptions.headers || {};\n  const userAgent = headers[\"user-agent\"];\n  const attributes = {\n    [SemanticAttributes.HTTP_URL]: getAbsoluteUrl(\n      requestOptions,\n      headers,\n      `${options.component}:`\n    ),\n    [SemanticAttributes.HTTP_METHOD]: method,\n    [SemanticAttributes.HTTP_TARGET]: requestOptions.path || \"/\",\n    [SemanticAttributes.NET_PEER_NAME]: hostname2,\n    [SemanticAttributes.HTTP_HOST]: requestOptions.headers?.host ?? `${hostname2}:${port}`\n  };\n  if (userAgent !== void 0) {\n    attributes[SemanticAttributes.HTTP_USER_AGENT] = userAgent;\n  }\n  return Object.assign(attributes, options.hookAttributes);\n};\nvar getOutgoingRequestMetricAttributes = (spanAttributes) => {\n  const metricAttributes = {};\n  metricAttributes[SemanticAttributes.HTTP_METHOD] = spanAttributes[SemanticAttributes.HTTP_METHOD];\n  metricAttributes[SemanticAttributes.NET_PEER_NAME] = spanAttributes[SemanticAttributes.NET_PEER_NAME];\n  return metricAttributes;\n};\nvar getAttributesFromHttpKind = (kind) => {\n  const attributes = {};\n  if (kind) {\n    attributes[SemanticAttributes.HTTP_FLAVOR] = kind;\n    if (kind.toUpperCase() !== \"QUIC\") {\n      attributes[SemanticAttributes.NET_TRANSPORT] = NetTransportValues.IP_TCP;\n    } else {\n      attributes[SemanticAttributes.NET_TRANSPORT] = NetTransportValues.IP_UDP;\n    }\n  }\n  return attributes;\n};\nvar getOutgoingRequestAttributesOnResponse = (response) => {\n  const { statusCode, statusMessage, httpVersion, socket } = response;\n  const attributes = {};\n  if (socket) {\n    const { remoteAddress, remotePort } = socket;\n    attributes[SemanticAttributes.NET_PEER_IP] = remoteAddress;\n    attributes[SemanticAttributes.NET_PEER_PORT] = remotePort;\n  }\n  setResponseContentLengthAttribute(response, attributes);\n  if (statusCode) {\n    attributes[SemanticAttributes.HTTP_STATUS_CODE] = statusCode;\n    attributes[\"http.status_text\" /* HTTP_STATUS_TEXT */] = (statusMessage || \"\").toUpperCase();\n  }\n  const httpKindAttributes = getAttributesFromHttpKind(httpVersion);\n  return Object.assign(attributes, httpKindAttributes);\n};\nvar getOutgoingRequestMetricAttributesOnResponse = (spanAttributes) => {\n  const metricAttributes = {};\n  metricAttributes[SemanticAttributes.NET_PEER_PORT] = spanAttributes[SemanticAttributes.NET_PEER_PORT];\n  metricAttributes[SemanticAttributes.HTTP_STATUS_CODE] = spanAttributes[SemanticAttributes.HTTP_STATUS_CODE];\n  metricAttributes[SemanticAttributes.HTTP_FLAVOR] = spanAttributes[SemanticAttributes.HTTP_FLAVOR];\n  return metricAttributes;\n};\nvar getIncomingRequestAttributes = (request3, options) => {\n  const headers = request3.headers;\n  const userAgent = headers[\"user-agent\"];\n  const ips = headers[\"x-forwarded-for\"];\n  const method = request3.method || \"GET\";\n  const httpVersion = request3.httpVersion;\n  const requestUrl = request3.url ? url2.parse(request3.url) : null;\n  const host = requestUrl?.host || headers.host;\n  const hostname2 = requestUrl?.hostname || host?.replace(/^(.*)(:[0-9]{1,5})/, \"$1\") || \"localhost\";\n  const serverName = options.serverName;\n  const attributes = {\n    [SemanticAttributes.HTTP_URL]: getAbsoluteUrl(\n      requestUrl,\n      headers,\n      `${options.component}:`\n    ),\n    [SemanticAttributes.HTTP_HOST]: host,\n    [SemanticAttributes.NET_HOST_NAME]: hostname2,\n    [SemanticAttributes.HTTP_METHOD]: method,\n    [SemanticAttributes.HTTP_SCHEME]: options.component\n  };\n  if (typeof ips === \"string\") {\n    attributes[SemanticAttributes.HTTP_CLIENT_IP] = ips.split(\",\")[0];\n  }\n  if (typeof serverName === \"string\") {\n    attributes[SemanticAttributes.HTTP_SERVER_NAME] = serverName;\n  }\n  if (requestUrl) {\n    attributes[SemanticAttributes.HTTP_TARGET] = requestUrl.path || \"/\";\n  }\n  if (userAgent !== void 0) {\n    attributes[SemanticAttributes.HTTP_USER_AGENT] = userAgent;\n  }\n  setRequestContentLengthAttribute(request3, attributes);\n  const httpKindAttributes = getAttributesFromHttpKind(httpVersion);\n  return Object.assign(attributes, httpKindAttributes, options.hookAttributes);\n};\nvar getIncomingRequestMetricAttributes = (spanAttributes) => {\n  const metricAttributes = {};\n  metricAttributes[SemanticAttributes.HTTP_SCHEME] = spanAttributes[SemanticAttributes.HTTP_SCHEME];\n  metricAttributes[SemanticAttributes.HTTP_METHOD] = spanAttributes[SemanticAttributes.HTTP_METHOD];\n  metricAttributes[SemanticAttributes.NET_HOST_NAME] = spanAttributes[SemanticAttributes.NET_HOST_NAME];\n  metricAttributes[SemanticAttributes.HTTP_FLAVOR] = spanAttributes[SemanticAttributes.HTTP_FLAVOR];\n  return metricAttributes;\n};\nvar getIncomingRequestAttributesOnResponse = (request3, response) => {\n  const { socket } = request3;\n  const { statusCode, statusMessage } = response;\n  const rpcMetadata = getRPCMetadata(context.active());\n  const attributes = {};\n  if (socket) {\n    const { localAddress, localPort, remoteAddress, remotePort } = socket;\n    attributes[SemanticAttributes.NET_HOST_IP] = localAddress;\n    attributes[SemanticAttributes.NET_HOST_PORT] = localPort;\n    attributes[SemanticAttributes.NET_PEER_IP] = remoteAddress;\n    attributes[SemanticAttributes.NET_PEER_PORT] = remotePort;\n  }\n  attributes[SemanticAttributes.HTTP_STATUS_CODE] = statusCode;\n  attributes[\"http.status_text\" /* HTTP_STATUS_TEXT */] = (statusMessage || \"\").toUpperCase();\n  if (rpcMetadata?.type === RPCType.HTTP && rpcMetadata.route !== void 0) {\n    attributes[SemanticAttributes.HTTP_ROUTE] = rpcMetadata.route;\n  }\n  return attributes;\n};\nvar getIncomingRequestMetricAttributesOnResponse = (spanAttributes) => {\n  const metricAttributes = {};\n  metricAttributes[SemanticAttributes.HTTP_STATUS_CODE] = spanAttributes[SemanticAttributes.HTTP_STATUS_CODE];\n  metricAttributes[SemanticAttributes.NET_HOST_PORT] = spanAttributes[SemanticAttributes.NET_HOST_PORT];\n  if (spanAttributes[SemanticAttributes.HTTP_ROUTE] !== void 0) {\n    metricAttributes[SemanticAttributes.HTTP_ROUTE] = spanAttributes[SemanticAttributes.HTTP_ROUTE];\n  }\n  return metricAttributes;\n};\nfunction headerCapture(type, headers) {\n  const normalizedHeaders = new Map(\n    headers.map((header) => [\n      header.toLowerCase(),\n      header.toLowerCase().replace(/-/g, \"_\")\n    ])\n  );\n  return (span, getHeader) => {\n    for (const [capturedHeader, normalizedHeader] of normalizedHeaders) {\n      const value = getHeader(capturedHeader);\n      if (value === void 0) {\n        continue;\n      }\n      const key = `http.${type}.header.${normalizedHeader}`;\n      if (typeof value === \"string\") {\n        span.setAttribute(key, [value]);\n      } else if (Array.isArray(value)) {\n        span.setAttribute(key, value);\n      } else {\n        span.setAttribute(key, [value]);\n      }\n    }\n  };\n}\n\n// src/http/index.ts\ninit_esm3();\nvar import_events = __webpack_require__(/*! events */ \"events\");\ninit_esm2();\nvar HttpInstrumentation = class extends InstrumentationBase {\n  /** keep track on spans not ended */\n  _spanNotEnded = /* @__PURE__ */ new WeakSet();\n  _headerCapture;\n  _httpServerDurationHistogram;\n  _httpClientDurationHistogram;\n  constructor(config) {\n    super(\"@opentelemetry/instrumentation-http\", \"1.0\", config);\n    this._headerCapture = this._createHeaderCapture();\n  }\n  _updateMetricInstruments() {\n    this._httpServerDurationHistogram = this.meter.createHistogram(\n      \"http.server.duration\",\n      {\n        description: \"Measures the duration of inbound HTTP requests.\",\n        unit: \"ms\",\n        valueType: ValueType.DOUBLE\n      }\n    );\n    this._httpClientDurationHistogram = this.meter.createHistogram(\n      \"http.client.duration\",\n      {\n        description: \"Measures the duration of outbound HTTP requests.\",\n        unit: \"ms\",\n        valueType: ValueType.DOUBLE\n      }\n    );\n  }\n  _getConfig() {\n    return this._config;\n  }\n  setConfig(config) {\n    super.setConfig(config);\n    this._headerCapture = this._createHeaderCapture();\n  }\n  init() {\n    return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n  }\n  _getHttpInstrumentation() {\n    const version = process.versions.node;\n    return new InstrumentationNodeModuleDefinition(\n      \"http\",\n      [\"*\"],\n      (moduleExports) => {\n        this._diag.debug(`Applying patch for http@${version}`);\n        if (isWrapped2(moduleExports.request)) {\n          this._unwrap(moduleExports, \"request\");\n        }\n        this._wrap(\n          moduleExports,\n          \"request\",\n          this._getPatchOutgoingRequestFunction(\"http\")\n        );\n        if (isWrapped2(moduleExports.get)) {\n          this._unwrap(moduleExports, \"get\");\n        }\n        this._wrap(\n          moduleExports,\n          \"get\",\n          this._getPatchOutgoingGetFunction(moduleExports.request)\n        );\n        if (isWrapped2(moduleExports.Server.prototype.emit)) {\n          this._unwrap(moduleExports.Server.prototype, \"emit\");\n        }\n        this._wrap(\n          moduleExports.Server.prototype,\n          \"emit\",\n          this._getPatchIncomingRequestFunction(\"http\")\n        );\n        return moduleExports;\n      },\n      (moduleExports) => {\n        if (moduleExports === void 0)\n          return;\n        this._diag.debug(`Removing patch for http@${version}`);\n        this._unwrap(moduleExports, \"request\");\n        this._unwrap(moduleExports, \"get\");\n        this._unwrap(moduleExports.Server.prototype, \"emit\");\n      }\n    );\n  }\n  _getHttpsInstrumentation() {\n    const version = process.versions.node;\n    return new InstrumentationNodeModuleDefinition(\n      \"https\",\n      [\"*\"],\n      (moduleExports) => {\n        this._diag.debug(`Applying patch for https@${version}`);\n        if (isWrapped2(moduleExports.request)) {\n          this._unwrap(moduleExports, \"request\");\n        }\n        this._wrap(\n          moduleExports,\n          \"request\",\n          this._getPatchHttpsOutgoingRequestFunction(\"https\")\n        );\n        if (isWrapped2(moduleExports.get)) {\n          this._unwrap(moduleExports, \"get\");\n        }\n        this._wrap(\n          moduleExports,\n          \"get\",\n          this._getPatchHttpsOutgoingGetFunction(moduleExports.request)\n        );\n        if (isWrapped2(moduleExports.Server.prototype.emit)) {\n          this._unwrap(moduleExports.Server.prototype, \"emit\");\n        }\n        this._wrap(\n          moduleExports.Server.prototype,\n          \"emit\",\n          this._getPatchIncomingRequestFunction(\"https\")\n        );\n        return moduleExports;\n      },\n      (moduleExports) => {\n        if (moduleExports === void 0)\n          return;\n        this._diag.debug(`Removing patch for https@${version}`);\n        this._unwrap(moduleExports, \"request\");\n        this._unwrap(moduleExports, \"get\");\n        this._unwrap(moduleExports.Server.prototype, \"emit\");\n      }\n    );\n  }\n  /**\n   * Creates spans for incoming requests, restoring spans' context if applied.\n   */\n  _getPatchIncomingRequestFunction(component) {\n    return (original) => {\n      return this._incomingRequestFunction(component, original);\n    };\n  }\n  /**\n   * Creates spans for outgoing requests, sending spans' context for distributed\n   * tracing.\n   */\n  _getPatchOutgoingRequestFunction(component) {\n    return (original) => {\n      return this._outgoingRequestFunction(component, original);\n    };\n  }\n  _getPatchOutgoingGetFunction(clientRequest) {\n    return (_original) => {\n      return function outgoingGetRequest(options, ...args) {\n        const req = clientRequest(options, ...args);\n        req.end();\n        return req;\n      };\n    };\n  }\n  /** Patches HTTPS outgoing requests */\n  _getPatchHttpsOutgoingRequestFunction(component) {\n    return (original) => {\n      const instrumentation = this;\n      return function httpsOutgoingRequest(options, ...args) {\n        if (component === \"https\" && typeof options === \"object\" && options?.constructor?.name !== \"URL\") {\n          options = Object.assign({}, options);\n          instrumentation._setDefaultOptions(options);\n        }\n        return instrumentation._getPatchOutgoingRequestFunction(component)(\n          original\n        )(options, ...args);\n      };\n    };\n  }\n  _setDefaultOptions(options) {\n    options.protocol = options.protocol || \"https:\";\n    options.port = options.port || 443;\n  }\n  /** Patches HTTPS outgoing get requests */\n  _getPatchHttpsOutgoingGetFunction(clientRequest) {\n    return (original) => {\n      const instrumentation = this;\n      return function httpsOutgoingRequest(options, ...args) {\n        return instrumentation._getPatchOutgoingGetFunction(clientRequest)(\n          original\n        )(options, ...args);\n      };\n    };\n  }\n  /**\n   * Attach event listeners to a client request to end span and add span attributes.\n   *\n   * @param request The original request object.\n   * @param span representing the current operation\n   * @param startTime representing the start time of the request to calculate duration in Metric\n   * @param metricAttributes metric attributes\n   */\n  _traceClientRequest(request3, span, startTime, metricAttributes) {\n    if (this._getConfig().requestHook) {\n      this._callRequestHook(span, request3);\n    }\n    let responseFinished = false;\n    request3.prependListener(\n      \"response\",\n      (response) => {\n        this._diag.debug(\"outgoingRequest on response()\");\n        if (request3.listenerCount(\"response\") <= 1) {\n          response.resume();\n        }\n        const responseAttributes = getOutgoingRequestAttributesOnResponse(response);\n        span.setAttributes(responseAttributes);\n        metricAttributes = Object.assign(\n          metricAttributes,\n          getOutgoingRequestMetricAttributesOnResponse(responseAttributes)\n        );\n        if (this._getConfig().responseHook) {\n          this._callResponseHook(span, response, this, startTime, metricAttributes);\n        }\n        this._headerCapture.client.captureRequestHeaders(\n          span,\n          (header) => request3.getHeader(header)\n        );\n        this._headerCapture.client.captureResponseHeaders(\n          span,\n          (header) => response.headers[header]\n        );\n        context.bind(context.active(), response);\n        const endHandler = () => {\n          this._diag.debug(\"outgoingRequest on end()\");\n          if (responseFinished) {\n            return;\n          }\n          responseFinished = true;\n          let status;\n          if (response.aborted && !response.complete) {\n            status = { code: SpanStatusCode.ERROR };\n          } else {\n            status = {\n              code: parseResponseStatus(\n                SpanKind.CLIENT,\n                response.statusCode\n              )\n            };\n          }\n          span.setStatus(status);\n          if (this._getConfig().applyCustomAttributesOnSpan) {\n            safeExecuteInTheMiddle(\n              () => this._getConfig().applyCustomAttributesOnSpan(\n                span,\n                request3,\n                response\n              ),\n              () => {\n              },\n              true\n            );\n          }\n          if (!this._getConfig().responseHook) {\n            this._closeHttpSpan(\n              span,\n              SpanKind.CLIENT,\n              startTime,\n              metricAttributes\n            );\n          }\n        };\n        response.on(\"end\", endHandler);\n        response.on(import_events.errorMonitor, (error) => {\n          this._diag.debug(\"outgoingRequest on error()\", error);\n          if (responseFinished) {\n            return;\n          }\n          responseFinished = true;\n          setSpanWithError(span, error);\n          span.setStatus({\n            code: SpanStatusCode.ERROR,\n            message: error.message\n          });\n          this._closeHttpSpan(\n            span,\n            SpanKind.CLIENT,\n            startTime,\n            metricAttributes\n          );\n        });\n      }\n    );\n    request3.on(\"close\", () => {\n      this._diag.debug(\"outgoingRequest on request close()\");\n      if (request3.aborted || responseFinished) {\n        return;\n      }\n      responseFinished = true;\n      this._closeHttpSpan(span, SpanKind.CLIENT, startTime, metricAttributes);\n    });\n    request3.on(import_events.errorMonitor, (error) => {\n      this._diag.debug(\"outgoingRequest on request error()\", error);\n      if (responseFinished) {\n        return;\n      }\n      responseFinished = true;\n      setSpanWithError(span, error);\n      this._closeHttpSpan(span, SpanKind.CLIENT, startTime, metricAttributes);\n    });\n    this._diag.debug(\"http.ClientRequest return request\");\n    return request3;\n  }\n  _incomingRequestFunction(component, original) {\n    const instrumentation = this;\n    return function incomingRequest(event, ...args) {\n      if (event !== \"request\") {\n        return original.apply(this, [event, ...args]);\n      }\n      const request3 = args[0];\n      const response = args[1];\n      const pathname = request3.url ? url3.parse(request3.url).pathname || \"/\" : \"/\";\n      const method = request3.method || \"GET\";\n      instrumentation._diag.debug(\n        `${component} instrumentation incomingRequest`\n      );\n      if (isIgnored(\n        pathname,\n        instrumentation._getConfig().ignoreIncomingPaths,\n        (e) => instrumentation._diag.error(\"caught ignoreIncomingPaths error: \", e)\n      ) || safeExecuteInTheMiddle(\n        () => instrumentation._getConfig().ignoreIncomingRequestHook?.(request3),\n        (e) => {\n          if (e != null) {\n            instrumentation._diag.error(\n              \"caught ignoreIncomingRequestHook error: \",\n              e\n            );\n          }\n        },\n        true\n      )) {\n        return context.with(suppressTracing(context.active()), () => {\n          context.bind(context.active(), request3);\n          context.bind(context.active(), response);\n          return original.apply(this, [event, ...args]);\n        });\n      }\n      const headers = request3.headers;\n      const spanAttributes = getIncomingRequestAttributes(request3, {\n        component,\n        serverName: instrumentation._getConfig().serverName,\n        hookAttributes: instrumentation._callStartSpanHook(\n          request3,\n          instrumentation._getConfig().startIncomingSpanHook\n        )\n      });\n      const spanOptions = {\n        kind: SpanKind.SERVER,\n        attributes: spanAttributes\n      };\n      const startTime = hrTime();\n      const metricAttributes = getIncomingRequestMetricAttributes(spanAttributes);\n      const ctx = propagation.extract(ROOT_CONTEXT, headers);\n      const span = instrumentation._startHttpSpan(method, spanOptions, ctx);\n      const rpcMetadata = {\n        type: RPCType.HTTP,\n        span\n      };\n      return context.with(\n        setRPCMetadata(trace.setSpan(ctx, span), rpcMetadata),\n        () => {\n          context.bind(context.active(), request3);\n          context.bind(context.active(), response);\n          if (instrumentation._getConfig().requestHook) {\n            instrumentation._callRequestHook(span, request3);\n          }\n          if (instrumentation._getConfig().responseHook) {\n            instrumentation._callResponseHook(span, response, instrumentation, startTime, metricAttributes);\n          }\n          instrumentation._headerCapture.server.captureRequestHeaders(\n            span,\n            (header) => request3.headers[header]\n          );\n          let hasError = false;\n          response.on(\"close\", () => {\n            if (hasError) {\n              return;\n            }\n            instrumentation._onServerResponseFinish(\n              request3,\n              response,\n              span,\n              metricAttributes,\n              startTime\n            );\n          });\n          response.on(import_events.errorMonitor, (err) => {\n            hasError = true;\n            instrumentation._onServerResponseError(\n              span,\n              metricAttributes,\n              startTime,\n              err\n            );\n          });\n          return safeExecuteInTheMiddle(\n            () => original.apply(this, [event, ...args]),\n            (error) => {\n              if (error) {\n                setSpanWithError(span, error);\n                instrumentation._closeHttpSpan(\n                  span,\n                  SpanKind.SERVER,\n                  startTime,\n                  metricAttributes\n                );\n                throw error;\n              }\n            }\n          );\n        }\n      );\n    };\n  }\n  _outgoingRequestFunction(component, original) {\n    const instrumentation = this;\n    return function outgoingRequest(options, ...args) {\n      if (!isValidOptionsType(options)) {\n        return original.apply(this, [options, ...args]);\n      }\n      const extraOptions = typeof args[0] === \"object\" && (typeof options === \"string\" || options instanceof url3.URL) ? args.shift() : void 0;\n      const { origin, pathname, method, optionsParsed } = getRequestInfo(\n        options,\n        extraOptions\n      );\n      if (isIgnored(\n        origin + pathname,\n        instrumentation._getConfig().ignoreOutgoingUrls,\n        (e) => instrumentation._diag.error(\"caught ignoreOutgoingUrls error: \", e)\n      ) || safeExecuteInTheMiddle(\n        () => instrumentation._getConfig().ignoreOutgoingRequestHook?.(optionsParsed),\n        (e) => {\n          if (e != null) {\n            instrumentation._diag.error(\n              \"caught ignoreOutgoingRequestHook error: \",\n              e\n            );\n          }\n        },\n        true\n      )) {\n        return original.apply(this, [optionsParsed, ...args]);\n      }\n      const { hostname: hostname2, port } = extractHostnameAndPort(optionsParsed);\n      const attributes = getOutgoingRequestAttributes(optionsParsed, {\n        component,\n        port,\n        hostname: hostname2,\n        hookAttributes: instrumentation._callStartSpanHook(\n          optionsParsed,\n          instrumentation._getConfig().startOutgoingSpanHook\n        )\n      });\n      const startTime = hrTime();\n      const metricAttributes = getOutgoingRequestMetricAttributes(attributes);\n      const spanOptions = {\n        kind: SpanKind.CLIENT,\n        attributes\n      };\n      const span = instrumentation._startHttpSpan(method, spanOptions);\n      const parentContext = context.active();\n      const requestContext = trace.setSpan(parentContext, span);\n      if (!optionsParsed.headers) {\n        optionsParsed.headers = {};\n      } else {\n        optionsParsed.headers = Object.assign({}, optionsParsed.headers);\n      }\n      propagation.inject(requestContext, optionsParsed.headers);\n      return context.with(requestContext, () => {\n        const cb = args[args.length - 1];\n        if (typeof cb === \"function\") {\n          args[args.length - 1] = context.bind(parentContext, cb);\n        }\n        const request3 = safeExecuteInTheMiddle(\n          () => original.apply(this, [optionsParsed, ...args]),\n          (error) => {\n            if (error) {\n              setSpanWithError(span, error);\n              instrumentation._closeHttpSpan(\n                span,\n                SpanKind.CLIENT,\n                startTime,\n                metricAttributes\n              );\n              throw error;\n            }\n          }\n        );\n        instrumentation._diag.debug(\n          `${component} instrumentation outgoingRequest`\n        );\n        context.bind(parentContext, request3);\n        return instrumentation._traceClientRequest(\n          request3,\n          span,\n          startTime,\n          metricAttributes\n        );\n      });\n    };\n  }\n  _onServerResponseFinish(request3, response, span, metricAttributes, startTime) {\n    const attributes = getIncomingRequestAttributesOnResponse(\n      request3,\n      response\n    );\n    metricAttributes = Object.assign(\n      metricAttributes,\n      getIncomingRequestMetricAttributesOnResponse(attributes)\n    );\n    this._headerCapture.server.captureResponseHeaders(\n      span,\n      (header) => response.getHeader(header)\n    );\n    span.setAttributes(attributes).setStatus({\n      code: parseResponseStatus(SpanKind.SERVER, response.statusCode)\n    });\n    const route = attributes[SemanticAttributes.HTTP_ROUTE];\n    if (route) {\n      span.updateName(`${request3.method || \"GET\"} ${route}`);\n    }\n    if (this._getConfig().applyCustomAttributesOnSpan) {\n      safeExecuteInTheMiddle(\n        () => this._getConfig().applyCustomAttributesOnSpan(\n          span,\n          request3,\n          response\n        ),\n        () => {\n        },\n        true\n      );\n    }\n    this._closeHttpSpan(span, SpanKind.SERVER, startTime, metricAttributes);\n  }\n  _onServerResponseError(span, metricAttributes, startTime, error) {\n    setSpanWithError(span, error);\n    this._closeHttpSpan(span, SpanKind.SERVER, startTime, metricAttributes);\n  }\n  _startHttpSpan(name, options, ctx = context.active()) {\n    const requireParent = options.kind === SpanKind.CLIENT ? this._getConfig().requireParentforOutgoingSpans : this._getConfig().requireParentforIncomingSpans;\n    let span;\n    const currentSpan = trace.getSpan(ctx);\n    if (requireParent === true && currentSpan === void 0) {\n      span = trace.wrapSpanContext(INVALID_SPAN_CONTEXT);\n    } else if (requireParent === true && currentSpan?.spanContext().isRemote) {\n      span = currentSpan;\n    } else {\n      span = this.tracer.startSpan(name, options, ctx);\n    }\n    this._spanNotEnded.add(span);\n    return span;\n  }\n  _closeHttpSpan(span, spanKind, startTime, metricAttributes) {\n    if (!this._spanNotEnded.has(span)) {\n      return;\n    }\n    span.end();\n    this._spanNotEnded.delete(span);\n    const duration = hrTimeToMilliseconds(hrTimeDuration(startTime, hrTime()));\n    if (spanKind === SpanKind.SERVER) {\n      this._httpServerDurationHistogram.record(duration, metricAttributes);\n    } else if (spanKind === SpanKind.CLIENT) {\n      this._httpClientDurationHistogram.record(duration, metricAttributes);\n    }\n  }\n  _callResponseHook(span, response, instrumentation, startTime, metricAttributes) {\n    safeExecuteInTheMiddle(\n      () => this._getConfig().responseHook(span, response, () => {\n        instrumentation._closeHttpSpan(\n          span,\n          SpanKind.SERVER,\n          startTime,\n          metricAttributes\n        );\n      }),\n      () => {\n      },\n      true\n    );\n  }\n  _callRequestHook(span, request3) {\n    safeExecuteInTheMiddle(\n      () => this._getConfig().requestHook(span, request3),\n      () => {\n      },\n      true\n    );\n  }\n  _callStartSpanHook(request3, hookFunc) {\n    if (typeof hookFunc === \"function\") {\n      return safeExecuteInTheMiddle(\n        () => hookFunc(request3),\n        () => {\n        },\n        true\n      );\n    }\n  }\n  _createHeaderCapture() {\n    const config = this._getConfig();\n    return {\n      client: {\n        captureRequestHeaders: headerCapture(\n          \"request\",\n          config.headersToSpanAttributes?.client?.requestHeaders ?? []\n        ),\n        captureResponseHeaders: headerCapture(\n          \"response\",\n          config.headersToSpanAttributes?.client?.responseHeaders ?? []\n        )\n      },\n      server: {\n        captureRequestHeaders: headerCapture(\n          \"request\",\n          config.headersToSpanAttributes?.server?.requestHeaders ?? []\n        ),\n        captureResponseHeaders: headerCapture(\n          \"response\",\n          config.headersToSpanAttributes?.server?.responseHeaders ?? []\n        )\n      }\n    };\n  }\n};\n\n// src/http.ts\nvar import_querystring = __webpack_require__(/*! querystring */ \"querystring\");\nvar import_stream2 = __webpack_require__(/*! stream */ \"stream\");\nfunction _betterHttpInstrumentation(options = {}) {\n  options.plugins = options.plugins || [];\n  return {\n    requestHook(span, request3) {\n      if (request3 instanceof import_http.ClientRequest) {\n        const plugin2 = options.plugins.find((plugin3) => plugin3?.shouldParseRequest(request3));\n        if (plugin2) {\n          span.setAttribute(\"http.plugin.name\", plugin2.name);\n          const headers = request3.getHeaders();\n          if (options.captureHeaders) {\n            span.setAttributes(flatten({ request: { headers } }));\n          }\n          if (plugin2.captureBody) {\n            getClientRequestBody(request3, (body) => {\n              const requestData = _parseBodySafe(body, headers);\n              span.setAttributes(flatten({ request: { body: requestData } }));\n            });\n          }\n        } else {\n          const headers = request3.getHeaders();\n          if (options.captureHeaders) {\n            span.setAttributes(flatten({ request: { headers } }));\n          }\n          if (options.captureBody && shouldCaptureBody(request3.host)) {\n            getClientRequestBody(request3, (body) => {\n              const requestData = _parseBodySafe(body, headers);\n              span.setAttributes(flatten({ request: { body: requestData } }));\n            });\n          }\n        }\n      }\n      if (request3 instanceof import_http.IncomingMessage) {\n        const plugin2 = options.plugins.find((plugin3) => plugin3.shouldParseRequest && plugin3.shouldParseRequest(request3));\n        span.setAttribute(\"http.plugin.name\", plugin2.name);\n        if (plugin2.parseIncommingMessage) {\n          const attributes = plugin2.parseIncommingMessage(request3);\n          span.setAttributes(flatten(attributes));\n        }\n      }\n      if (options.requestHook) {\n        options.requestHook(span, request3);\n      }\n    },\n    responseHook(span, response, cb) {\n      if (response instanceof import_http.IncomingMessage) {\n        try {\n          const headers = response.headers;\n          if (options.captureHeaders) {\n            span.setAttributes(flatten({ response: { headers } }));\n          }\n          if (options.captureBody && shouldCaptureBody(response.url || \"\")) {\n            getClientResponseBody(response, (body) => {\n              const responseData = _parseBodySafe(body, headers);\n              span.setAttributes(flatten({ response: { body: responseData } }));\n              cb();\n            });\n          } else {\n            cb();\n          }\n        } catch (e) {\n          cb();\n        }\n      }\n      if (options.responseHook) {\n        options.responseHook(span, response, cb);\n      }\n    }\n  };\n}\nvar ignoredHosts = [\n  \"localhost\",\n  \"otel.baselime\"\n];\nfunction getClientRequestBody(r, cb) {\n  const chunks = [];\n  const oldWrite = r.write.bind(r);\n  r.write = (data) => {\n    try {\n      if (typeof data === \"string\") {\n        chunks.push(Buffer.from(data));\n        if (data[data.length - 1] === \"}\") {\n          const body = Buffer.concat(chunks).toString(\"utf8\");\n          cb(body);\n        }\n      } else {\n        chunks.push(data);\n        if (data[data.length - 1] === 125) {\n          const body = Buffer.concat(chunks).toString(\"utf8\");\n          cb(body);\n        }\n      }\n    } catch (e) {\n    }\n    return oldWrite(data);\n  };\n  const oldEnd = r.end.bind(r);\n  r.end = (data) => {\n    try {\n      if (data) {\n        if (typeof data === \"string\") {\n          chunks.push(Buffer.from(data));\n        } else {\n          chunks.push(data);\n        }\n      }\n      if (chunks.length > 0) {\n        const body = Buffer.concat(chunks).toString(\"utf8\");\n        cb(body);\n      }\n    } catch (e) {\n    }\n    return oldEnd(data);\n  };\n}\nfunction getClientResponseBody(r, cb) {\n  const chunks = [];\n  const pt = new import_stream2.PassThrough();\n  pt.on(\"data\", (chunk) => {\n    try {\n      if (typeof chunk === \"string\") {\n        chunks.push(Buffer.from(chunk));\n      } else {\n        chunks.push(chunk);\n      }\n    } catch (e) {\n    }\n  }).on(\"end\", () => {\n    try {\n      if (chunks.length > 0) {\n        const body = Buffer.concat(chunks).toString(\"utf8\");\n        cb(body);\n      }\n    } catch (e) {\n    }\n  });\n  const originalState = r.readableFlowing;\n  r.pipe(pt);\n  r.readableFlowing = originalState;\n}\nfunction shouldCaptureBody(host) {\n  return !ignoredHosts.find((ignoredHost) => host.includes(ignoredHost));\n}\nfunction _parseBodySafe(body, headers) {\n  let requestData = body;\n  try {\n    if (headers[\"content-type\"] && typeof headers[\"content-type\"] === \"string\") {\n      if (headers[\"content-type\"].includes(\"application/json\") || headers[\"content-type\"].includes(\"application/x-amz-json\")) {\n        requestData = JSON.parse(body);\n      } else if (headers[\"content-type\"].includes(\"application/x-www-form-urlencoded\")) {\n        requestData = (0, import_querystring.parse)(body);\n      }\n    }\n  } catch (_) {\n  }\n  return requestData;\n}\nvar BetterHttpInstrumentation = class extends HttpInstrumentation {\n  constructor(options = {}) {\n    super({\n      ..._betterHttpInstrumentation(options),\n      ignoreIncomingRequestHook: options.ignoreIncomingRequestHook,\n      ignoreOutgoingRequestHook: options.ignoreOutgoingRequestHook,\n      startIncomingSpanHook: options.startIncomingSpanHook,\n      startOutgoingSpanHook: options.startOutgoingSpanHook\n    });\n  }\n};\n\n// src/http-plugins/stripe.ts\nvar import_http3 = __webpack_require__(/*! http */ \"http\");\n\n// src/http-plugins/plugin.ts\nvar HttpPlugin = class {\n  captureBody = false;\n  name = \"base-plugin-should-extend\";\n  constructor() {\n  }\n  shouldParseRequest(request3) {\n    return false;\n  }\n  shouldParseResponse(response) {\n    return false;\n  }\n};\n\n// src/http-plugins/stripe.ts\nvar StripePlugin = class extends HttpPlugin {\n  captureBody = true;\n  name = \"stripe\";\n  shouldParseRequest(request3) {\n    if (request3 instanceof import_http3.ClientRequest && request3.host?.includes(\"api.stripe.com\")) {\n      return true;\n    }\n    return false;\n  }\n  parseClientRequest(request3) {\n    const method = request3.method;\n    const [version, entity, entityIdOrOperation, operation] = request3.path.split(\"/\");\n    return {\n      stripe: {\n        version,\n        method,\n        entity,\n        entityIdOrOperation,\n        operation\n      }\n    };\n  }\n};\nvar plugin = new StripePlugin();\n\n// src/http-plugins/vercel.ts\nvar import_http4 = __webpack_require__(/*! http */ \"http\");\nvar VercelPlugin = class extends HttpPlugin {\n  name = \"vercel\";\n  shouldParseRequest(request3) {\n    if (request3 instanceof import_http4.IncomingMessage && request3.headers[\"x-vercel-id\"]) {\n      return true;\n    }\n    return false;\n  }\n  parseIncommingMessage(request3) {\n    const headers = request3.headers;\n    const vercelRequestId = headers[\"x-vercel-id\"];\n    if (typeof vercelRequestId === \"string\") {\n      const requestIdParts = vercelRequestId.split(\"::\");\n      const requestId = requestIdParts[requestIdParts.length - 1];\n      const user = {\n        ip: headers[\"x-forwarded-for\"],\n        country: headers[\"x-vercel-ip-country\"],\n        region: headers[\"x-vercel-ip-region\"],\n        city: headers[\"x-vercel-ip-city\"],\n        latitude: headers[\"x-vercel-ip-latitude\"],\n        longitude: headers[\"x-vercel-ip-longitude\"],\n        timezone: headers[\"x-vercel-ip-timezone\"]\n      };\n      return {\n        requestId,\n        faas: { execution: requestId },\n        user\n      };\n    }\n  }\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@baselime+node-opentelemetry@0.5.8_@trpc+server@10.45.2/node_modules/@baselime/node-opentelemetry/dist/index.cjs\n");

/***/ })

};
;